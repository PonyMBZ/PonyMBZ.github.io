<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis6</title>
      <link href="/posts/Redis6.html"/>
      <url>/posts/Redis6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis6"><a href="#Redis6" class="headerlink" title="Redis6"></a>Redis6</h1><h2 id="1-NoSql-数据库"><a href="#1-NoSql-数据库" class="headerlink" title="1. NoSql 数据库"></a>1. NoSql 数据库</h2><p>​为了解决性能问题，NoSql（Not Only Sql）,泛指非关系数据库，NoSql 数据库不依赖业务逻辑方式存储，而以简单的 key-value 模式存储，因此大大增加了数据库的扩展能力。</p><ul><li>不遵循 SQL 标准</li><li>不支持 ACID</li><li>远超于 SQL 的性能</li></ul><p>​       </p><p>NoSql 适应场景</p><ul><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据高可扩展性</li></ul><p>​</p><p>NoSql 不适应场景</p><ul><li><p>需要事务支持</p></li><li><p>基于sql的机构化查询，处理复杂的关系，需要即席查询</p><p>（<strong>用不着 sql和用了 sql 也不行的情况</strong>）</p></li></ul><p>​web 1.0，单点服务器</p><p><img src="/../images/Redis/image-20220824080945280.png" alt="image-20220824080945280"></p><p>​分布式服务器</p><p><img src="/../images/Redis/image-20220824081116448.png" alt="image-20220824081116448"></p><p><img src="/../images/Redis/image-20220824081214695.png" alt="image-20220824081214695"></p><p><img src="/../images/Redis/image-20220824081245386.png" alt="image-20220824081245386"></p><h3 id="1-1-行式数据库"><a href="#1-1-行式数据库" class="headerlink" title="1.1. 行式数据库"></a>1.1. 行式数据库</h3><p><img src="/../images/Redis/image-20220824082728277.png" alt="image-20220824082728277"></p><h3 id="1-2-列式数据库"><a href="#1-2-列式数据库" class="headerlink" title="1.2. 列式数据库"></a>1.2. 列式数据库</h3><p><img src="/../images/Redis/image-20220824082745087.png" alt="image-20220824082745087"></p><h2 id="2-Redis"><a href="#2-Redis" class="headerlink" title="2. Redis"></a>2. Redis</h2><h3 id="2-1-Redis-概述"><a href="#2-1-Redis-概述" class="headerlink" title="2.1. Redis 概述"></a>2.1. Redis 概述</h3><p>Redis 是一个 <strong>开源</strong> 的 <strong>key-value</strong> 存储系统</p><p>存储的 value 类型有很多 ，包括 string、list、set、zset（有序集合）和 hash</p><p>支持 push&#x2F;pop ，add&#x2F;remove 及取交并集和差集及其他 <strong>原子性</strong> 操作</p><p>支持 排序</p><p>数据既可以 存储到内存中，也可以写入磁盘（持久化）</p><p>实现了 master-slave （主从同步）</p><p><img src="/../images/Redis/image-20220824083741731.png" alt="image-20220824083741731"></p><h3 id="2-2-Redis-安装（linux）"><a href="#2-2-Redis-安装（linux）" class="headerlink" title="2.2. Redis 安装（linux）"></a>2.2. Redis 安装（linux）</h3><p>这里以 linux 版的安装为例</p><p><strong>前置准备 ：</strong></p><ul><li><p>首先要准备 一个 linux 虚拟机（这里以 CentOs 7 为例）</p></li><li><p>文件传输工具，Xshell、Xftp。</p><p>Xshell、Xftp的安装使用教程请参考：<a href="https://www.jianshu.com/p/7fbef3019659">https://www.jianshu.com/p/7fbef3019659</a> </p><p>和 <a href="https://blog.csdn.net/qq_52720527/article/details/125896786">https://blog.csdn.net/qq_52720527/article/details/125896786</a></p><p><strong>Linux 安装C 语言的编译环境</strong></p><p>安装 gcc</p><p>yum install gcc</p><p>查看测试 gcc版本 </p><p>gcc –version</p></li></ul><ol><li>去 Redis 官网：<a href="https://redis.io/">https://redis.io/</a> 下载 Redis 的压缩包，然后利用 Xftp 传输工具 将压缩包传到 linux 虚拟机中</li></ol><p><img src="/../images/Redis/image-20220824104323651.png" alt="image-20220824104323651"></p><ol start="2"><li><p>使用解压命令：tar -zxvf redis-6.2.1.tar.gz 解压文件</p></li><li><p>解压完成后进入目录：cd redis-6.2.1</p></li><li><p>编译文件，编译成 .c 文件在redis-6.2.1目录下再次执行make命令</p><p><img src="/../images/Redis/image-20220824105246145.png" alt="image-20220824105246145"></p></li><li><p>进行安装 make install ，需要 root 权限，命令 su，切换到 root 用户。</p><p><img src="/../images/Redis/image-20220824105742775.png" alt="image-20220824105742775"></p></li><li><p>默认安装到 &#x2F;usr&#x2F;local&#x2F;bin，cd 进入进行查看（sl）</p><p><img src="/../images/Redis/image-20220824105954643.png" alt="image-20220824105954643"></p></li></ol><p><strong>查看默认安装目录：</strong></p><p>redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何</p><p>redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲</p><p>redis-check-dump：修复有问题的dump.rdb文件</p><p>redis-sentinel：Redis集群使用</p><p><strong>redis-server：Redis服务器启动命令</strong></p><p><strong>redis-cli：客户端，操作入口</strong></p><h3 id="2-3-启动服务"><a href="#2-3-启动服务" class="headerlink" title="2.3. 启动服务"></a>2.3. 启动服务</h3><h4 id="1-前台启动：（不推荐）"><a href="#1-前台启动：（不推荐）" class="headerlink" title="1. 前台启动：（不推荐）"></a>1. 前台启动：（不推荐）</h4><p><img src="/../images/Redis/image-20220826092616262.png" alt="image-20220826092616262"></p><p><strong>ctrl + c :  停止服务</strong></p><p><img src="/../images/Redis/image-20220826092836525.png" alt="image-20220826092836525"></p><h4 id="2-后台启动："><a href="#2-后台启动：" class="headerlink" title="2. 后台启动："></a>2. 后台启动：</h4><p>将启动窗口关闭，仍能够运行</p><p>2.1.  将 redis.conf 文件复制（cp）一份到  etc 目录</p><p><img src="/../images/Redis/image-20220826095656755.png" alt="image-20220826095656755"></p><p>2.2. 将 etc 目录下的 redis.conf 中的一个属性  deemonize 的值改为 yes</p><p><img src="/../images/Redis/image-20220826100102895.png" alt="image-20220826100102895"></p><p><img src="/../images/Redis/image-20220826100009247.png" alt="image-20220826100009247"></p><p>2.3. 重新进入 &#x2F;usr&#x2F;local&#x2F;bin 启动 redis 服务 并加上配置文件的名字，查看进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server /etc/redis.conf</span><br><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure><p><img src="/../images/Redis/image-20220826100321509.png" alt="image-20220826100321509"></p><p>2.4. 连接 redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p><img src="/../images/Redis/image-20220826100638564.png" alt="image-20220826100638564"></p><p>连接测试：输入ping 返回 PONG 就是连接上了</p><p><img src="/../images/Redis/image-20220826100804512.png" alt="image-20220826100804512"></p><p>2.5. 关闭 redis</p><p>方式一：直接输入 shutdown</p><p><img src="/../images/Redis/image-20220826101021951.png" alt="image-20220826101021951"></p><p>方式二：先退出（ctrl + c)，杀死进程</p><p><img src="/../images/Redis/image-20220826101251722.png" alt="image-20220826101251722"></p><p>杀死进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure><p><img src="/../images/Redis/image-20220826101537205.png" alt="image-20220826101537205"></p><p><img src="/../images/Redis/image-20220826101604272.png" alt="image-20220826101604272"></p><h3 id="2-4-Redis-相关知识"><a href="#2-4-Redis-相关知识" class="headerlink" title="2.4. Redis 相关知识"></a>2.4. Redis <strong>相关知识</strong></h3><p>Redis默认16个数据库，类似数组下标从0开始，初始默认使用0号库</p><p>使用命令 select   <dbid>来切换数据库。如: select 8 </p><p>统一密码管理，所有库同样密码。</p><p>dbsize查看当前数据库的key的数量</p><p>flushdb清空当前库</p><p>flushall通杀全部库</p><p><img src="/../images/Redis/image-20220826102248530.png" alt="image-20220826102248530"></p><p><strong>Redis是单线程+多路IO复用技术</strong></p><p>串行   vs   多线程+锁（memcached） vs   单线程+多路IO复用(Redis)</p><p>串行：多个操作，要等第一个执行完后，才能执行第二个，…</p><p>单线程+多路IO复用：可以实现多线程的效果，但效率更高</p><p>例如：买票</p><p><img src="/../images/Redis/image-20220826103300249.png" alt="image-20220826103300249"></p><p>用户把需求告诉黄牛，黄牛买到票，就会通知用户，用户再黄牛通知期间还可以做自己的事，这就是多路复用</p><h2 id="3-五大常用数据类型"><a href="#3-五大常用数据类型" class="headerlink" title="3. 五大常用数据类型"></a>3. 五大常用数据类型</h2><p>字符串（String）、列表（List）、集合（Set）、哈希（Hash）、有序集合（Zset）</p><p>连上 redis</p><p><img src="/../images/Redis/image-20220826104805790.png" alt="image-20220826104805790"></p><h3 id="3-1-Redis-键（key）"><a href="#3-1-Redis-键（key）" class="headerlink" title="3.1. Redis 键（key）"></a>3.1. Redis 键（key）</h3><p>keys *                     查看当前库所有key    (匹配：keys *1)</p><p><img src="/../images/Redis/image-20220826105156640.png" alt="image-20220826105156640"></p><p>exists key              判断某个key是否存在</p><p><img src="/../images/Redis/image-20220826105247357.png" alt="image-20220826105247357"></p><p>type key                查看你的key是什么类型</p><p><img src="/../images/Redis/image-20220826105313849.png" alt="image-20220826105313849"></p><p>del key                  删除指定的key数据</p><p><img src="/../images/Redis/image-20220826105401531.png" alt="image-20220826105401531"></p><p>unlink key            根据value选择非阻塞删除</p><p>仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</p><p>expire key 10      10秒钟：为给定的key设置过期时间</p><p><img src="/../images/Redis/image-20220826105631735.png" alt="image-20220826105631735"></p><p>ttl key                    查看还有多少秒过期，-1表示永不过期，-2表示已过期</p><p>select命令切换数据库（默认是0，总共 16 个库）</p><p><img src="/../images/Redis/image-20220826102248530.png" alt="image-20220826102248530"></p><p>dbsize                  查看当前数据库的key的数量</p><p>flushdb                清空当前库</p><p>flushall                通杀全部库</p><h3 id="3-2-Redis-字符串（String）"><a href="#3-2-Redis-字符串（String）" class="headerlink" title="3.2. Redis 字符串（String）"></a>3.2. Redis 字符串（String）</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p>String是Redis最基本的类型，一个key对应一个value。</p><p>String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</p><h4 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h4><p><strong>set <key><value> ： 添加键值对</strong></p><p><img src="/../images/Redis/image-20220826110448477.png" alt="image-20220826110448477"></p><p>设置相同的 key，会被覆盖</p><p><strong>get <key>  ：取到对应的 value 值</strong></p><p><img src="/../images/Redis/image-20220826110556310.png" alt="image-20220826110556310"></p><p>**append <key> 追加的值  ：追加 **</p><p>返回追加后的总长度</p><p><img src="/../images/Redis/image-20220826110907408.png" alt="image-20220826110907408"></p><p><strong>strlen <key> : 获取值长度</strong></p><p><img src="/../images/Redis/image-20220826111124554.png" alt="image-20220826111124554"></p><p><strong>setnx <key><value> : 只有当可以不存在，才能设置成功</strong></p><p><img src="/../images/Redis/image-20220826111403401.png" alt="image-20220826111403401"></p><p><strong>incr  <key></strong></p><p>将 key 中储存的数字值增1</p><p>只能对数字值操作，如果为空，新增值为1</p><p><strong>decr  <key></strong></p><p>将 key 中储存的数字值减1</p><p>只能对数字值操作，如果为空，新增值为-1</p><p><img src="/../images/Redis/image-20220826111625455.png" alt="image-20220826111625455"></p><p><img src="/../images/Redis/image-20220826113134523.png" alt="image-20220826113134523"></p><p>redis 操作是原子性的，不会被打断</p><p>java中的i++是否是原子操作？ <strong>不是</strong></p><p>i&#x3D;0 ，两个线程分别对 i 进行++100，值是多少？ </p><p>最大值：200 </p><p>最小值：2</p><p>a 线程，加到99 ，在赋值时被 b 打断，b，i++，赋值为1，a 线程取到 i &#x3D; 1 ，a 线程还要加 1，被 b 打断，b 加加到100，在赋值时被 a 打断，然后 a 在加 1，最后值为 2</p><p><img src="/../images/Redis/image-20220826114533071.png" alt="image-20220826114533071"></p><p><strong>mset <key1><value1><key2><value2>…：同时设置多个key-value</strong> </p><p><strong>mget：<key1><key2><key3>：同时获取一个或多个value</strong></p><p><strong>msetnx：<key1><value1><key2><value2>…：有一个已经存在的就不会成功</strong></p><p><img src="/../images/Redis/image-20220826115449719.png" alt="image-20220826115449719"></p><p><strong>原子性有一个失败都失败</strong></p><p><strong>getrange<key>&lt;起始位置&gt;&lt;结束位置&gt;</strong> </p><p>获得值的范围，类似java中的substring，<strong>前包，后包</strong></p><p><strong>setrange  <key>&lt;起始位置&gt;<value></strong></p><p>用 <value>  覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0开始</strong>)。</p><p><img src="/../images/Redis/image-20220826132712224.png" alt="image-20220826132712224"></p><p><strong>setex  <key>&lt;过期时间&gt;<value></strong></p><p>设置键值的同时，设置过期时间，单位秒。</p><p><strong>getset <key><value></strong></p><p>以新换旧，设置了新值同时获得旧值。</p><p><img src="/../images/Redis/image-20220826132826155.png" alt="image-20220826132826155"></p><p><img src="/../images/Redis/image-20220826132922977.png" alt="image-20220826132922977"></p><h4 id="3-数据结构"><a href="#3-数据结构" class="headerlink" title="3. 数据结构"></a>3. 数据结构</h4><p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p><p><img src="/../images/Redis/image-20220826133151882.png" alt="image-20220826133151882"></p><p>如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p><h3 id="3-3-Redis-列表-List"><a href="#3-3-Redis-列表-List" class="headerlink" title="3.3. Redis 列表 List"></a>3.3. Redis 列表 List</h3><h4 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p><strong>单键多值</strong></p><p>​Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>​它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p><p><img src="/../images/Redis/image-20220826133504592.png" alt="image-20220826133504592"></p><h4 id="2-常用命令-1"><a href="#2-常用命令-1" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h4><p><strong>lpush &#x2F; rpush <key1> <value1> <value2> <value3> 从左边 &#x2F; 右边 插入一个或多个值</strong></p><p><strong>lpop &#x2F; rpop <key> 从左边&#x2F;右边吐出一个值。值在键在，值光键亡</strong></p><p><img src="/../images/Redis/image-20220826134617861.png" alt="image-20220826134617861"></p><p><strong>rpoplpush  <key1><key2>从<key1>列表右边吐出一个值，插到<key2>列表左边</strong></p><p><img src="/../images/Redis/image-20220826135219649.png" alt="image-20220826135219649"></p><p><strong>lrange <key><start><stop></strong></p><p>按照索引下标获得元素(从左到右)</p><p>lrange mylist 0 -1   0左边第一个，-1右边第一个，（0-1表示获取所有）</p><p><strong>lindex <key><index>按照索引下标获得元素(从左到右)</strong></p><p><img src="/../images/Redis/image-20220826135451659.png" alt="image-20220826135451659"></p><p><strong>llen <key>获得列表长度</strong> </p><p><img src="/../images/Redis/image-20220826135527757.png" alt="image-20220826135527757"></p><p><strong>linsert <key>  before <value><newvalue>在<value>的后面插入<newvalue>插入值</strong></p><p><img src="/../images/Redis/image-20220826135811722.png" alt="image-20220826135811722"></p><p><strong>lrem <key><n><value>从左边删除n个value(从左到右)</strong></p><p><img src="/../images/Redis/image-20220826140156574.png" alt="image-20220826140156574"></p><p>lset<key><index><value>将列表key下标为index的值替换成value</p><p><img src="/../images/Redis/image-20220826140356825.png" alt="image-20220826140356825"></p><h4 id="3-数据结构-1"><a href="#3-数据结构-1" class="headerlink" title="3. 数据结构"></a>3. 数据结构</h4><p>List的数据结构为快速链表quickList。</p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。</p><p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成quicklist。</p><p>​因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p><p><img src="/../images/Redis/image-20220826140618098.png" alt="image-20220826140618098"></p><p>​Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><h3 id="3-4-Redis-集合（set）"><a href="#3-4-Redis-集合（set）" class="headerlink" title="3.4. Redis 集合（set）"></a>3.4. Redis 集合（set）</h3><h4 id="1-介绍-2"><a href="#1-介绍-2" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p>​Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>的，当你需要存储一个列表数据，又<strong>不希望出现重复数据</strong>时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p><p>​Redis的Set是string类型的<strong>无序</strong>集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的**复杂度都是O(1)**。</p><p>​一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变</p><h4 id="2-常用命令-2"><a href="#2-常用命令-2" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h4><p>sadd <key><value1><value2> ….. </p><p>将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</p><p>smembers <key>取出该集合的所有值。</p><p><img src="/../images/Redis/image-20220826141230576.png" alt="image-20220826141230576"></p><p>sismember <key><value>判断集合<key>是否为含有该<value>值，有1，没有0</p><p><img src="/../images/Redis/image-20220826141322587.png" alt="image-20220826141322587"></p><p>scard<key>返回该集合的元素个数。</p><p><img src="/../images/Redis/image-20220826141348451.png" alt="image-20220826141348451"></p><p>srem <key><value1><value2> …. 删除集合中的某个元素。</p><p><img src="/../images/Redis/image-20220826141448527.png" alt="image-20220826141448527"></p><p>spop <key><strong>随机从该集合中吐出一个值。取完就不存在了</strong></p><p><img src="/../images/Redis/image-20220826141637009.png" alt="image-20220826141637009"></p><p>srandmember <key><n>随机从该集合中取出n个值。不会从集合中删除 。</p><p>smove <source><destination>value把集合中一个值从一个集合移动到另一个集合</p><p><img src="/../images/Redis/image-20220826142022129.png" alt="image-20220826142022129"></p><p>sinter <key1><key2>返回两个集合的交集元素。</p><p>sunion <key1><key2>返回两个集合的并集元素。</p><p>sdiff <key1><key2>返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</p><h4 id="3-数据结构-2"><a href="#3-数据结构-2" class="headerlink" title="3. 数据结构"></a>3. 数据结构</h4><p>​Set数据结构是dict字典，字典是用哈希表实现的。</p><p>​Java中 HashSet 的内部实现使用的是 HashMap，只不过所有的 value 都指向同一个对象。Redis 的 set 结构也是一样，它的内部也使用 hash 结构，所有的 value 都指向同一个内部值。</p><h3 id="3-5-Redis-哈希（hash）"><a href="#3-5-Redis-哈希（hash）" class="headerlink" title="3.5. Redis 哈希（hash）"></a>3.5. Redis 哈希（hash）</h3><h4 id="1-介绍-3"><a href="#1-介绍-3" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p>Redis hash 是一个键值对集合。</p><p>Redis hash是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><p>类似 Java 里面的 Map&lt;String,Object&gt;</p><p>​用户 ID 为查找的 key，存储的 value 用户对象包含姓名，年龄，生日等信息，如果用普通的 key&#x2F;value 结构来存储</p><p><img src="/../images/Redis/image-20220826143158338.png" alt="image-20220826143158338"></p><h4 id="2-常用命令-3"><a href="#2-常用命令-3" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h4><p>hset <key><field><value>给<key>集合中的  <field>键赋值<value></p><p>hget <key1><field>从<key1>集合<field>取出 value </p><p><img src="/../images/Redis/image-20220826152405453.png" alt="image-20220826152405453"></p><p>hmset <key1><field1><value1><field2><value2>… 批量设置hash的值</p><p><img src="/../images/Redis/image-20220826152517875.png" alt="image-20220826152517875"></p><p>hexists<key1><field>查看哈希表 key 中，给定域 field 是否存在。 </p><p><img src="/../images/Redis/image-20220826152615022.png" alt="image-20220826152615022"></p><p>hkeys <key>列出该hash集合的所有field</p><p><img src="/../images/Redis/image-20220826152734119.png" alt="image-20220826152734119"></p><p>hvals <key>列出该hash集合的所有value</p><p><img src="/../images/Redis/image-20220826152801889.png" alt="image-20220826152801889"></p><p>hincrby <key><field><increment>为哈希表 key 中的域 field 的值加上增量 1   -1</p><p><img src="/../images/Redis/image-20220826152918579.png" alt="image-20220826152918579"></p><p>hsetnx <key><field><value>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</p><h4 id="3-数据结构-3"><a href="#3-数据结构-3" class="headerlink" title="3. 数据结构"></a>3. 数据结构</h4><p>​Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p><h3 id="3-6-Redis-有序集合（Zset）"><a href="#3-6-Redis-有序集合（Zset）" class="headerlink" title="3.6. Redis 有序集合（Zset）"></a>3.6. Redis 有序集合（Zset）</h3><h4 id="1-介绍-4"><a href="#1-介绍-4" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p>​Redis 有序集合zset与普通集合 set 非常相似，是一个<strong>没有重复元素</strong>的字符串集合。</p><p>​不同之处是有序集合的每个成员都关联了一个<strong>评分（score）</strong>,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。<strong>集合的成员是唯一的，但是评分可以是重复了</strong> 。</p><p>​因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p><p>​访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p><h4 id="2-常用命令-4"><a href="#2-常用命令-4" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h4><p>zadd  <key><score1><value1><score2><value2>…</p><p>将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</p><p><strong>zrange <key><start><stop>  [WITHSCORES]</strong>   </p><p>返回有序集 key 中，下标在<start><stop>之间的元素</p><p>带WITHSCORES，可以让分数一起和值返回到结果集。</p><p><img src="/../images/Redis/image-20220826153750910.png" alt="image-20220826153750910"></p><p>zrangebyscore key minmax [withscores] [limit offset count]</p><p>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </p><p><img src="/../images/Redis/image-20220826153914888.png" alt="image-20220826153914888"></p><p>zrevrangebyscore key maxmin [withscores] [limit offset count]               </p><p>同上，改为<strong>从大到小</strong>排列。 </p><p><img src="/../images/Redis/image-20220826154016417.png" alt="image-20220826154016417"></p><p>zincrby <key><increment><value>      为元素的score加上增量</p><p>zrem  <key><value>删除该集合下，指定值的元素 </p><p>zcount <key><min><max>统计该集合，分数区间内的元素个数 </p><p>zrank <key><value>返回该值在集合中的排名，从0开始。</p><p><img src="/../images/Redis/image-20220826154256689.png" alt="image-20220826154256689"></p><h4 id="3-数据结构-4"><a href="#3-数据结构-4" class="headerlink" title="3. 数据结构"></a>3. 数据结构</h4><p>​SortedSet(zset) 是 Redis 提供的一个非常特别的数据结构，一方面它等价于 Java 的数据Map&lt;String,Double&gt;，可以给每一个元素 value 赋予一个权重 score ，另一方面它又类似于 TreeSet，内部的元素会按照权重 score 进行排序，可以得到每个元素的名次，还可以通过 score 的范围来获取元素的列表。</p><p>zset底层使用了两个数据结构</p><p>（1）hash，hash的作用就是关联元素 value 和权重 score，保障元素value的唯一性，可以通过元素value找到相应的 score 值。</p><p>（2）跳跃表，跳跃表的目的在于给元素 value 排序，根据 score 的范围获取元素列表。</p><ol><li><strong>跳跃表（跳表）</strong></li></ol><p>1、简介</p><p>​有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p><p>2、实例</p><p>对比有序链表和跳跃表，从链表中查询出51</p><p>（1）有序链表</p><p><img src="/../images/Redis/image-20220826154622824.png" alt="image-20220826154622824"></p><p>要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。</p><p>（2）跳跃表</p><p><img src="/../images/Redis/image-20220826154748922.png" alt="image-20220826154748922"></p><p>从第2层开始，1节点比51节点小，向后比较。</p><p>21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层</p><p>在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下</p><p>在第0层，51节点为要查找的节点，节点被找到，共查找4次。</p><p>从此可以看出跳跃表比有序链表效率要高</p><h2 id="4-Redis-配置文件"><a href="#4-Redis-配置文件" class="headerlink" title="4. Redis 配置文件"></a>4. Redis 配置文件</h2><h4 id="4-1-配置大小单位，只支持-bytes，不支持-bit"><a href="#4-1-配置大小单位，只支持-bytes，不支持-bit" class="headerlink" title="4.1. 配置大小单位，只支持 bytes，不支持 bit"></a><strong>4.1. 配置大小单位，只支持 bytes，不支持 bit</strong></h4><p><img src="/../images/Redis/image-20220826155430319.png" alt="image-20220826155430319"></p><h4 id="4-2-INCLUDES包含"><a href="#4-2-INCLUDES包含" class="headerlink" title="4.2. ###INCLUDES包含###"></a><strong>4.2. ###INCLUDES包含###</strong></h4><p>类似jsp中的include，多实例的情况可以把公用的配置文件提取出来</p><p><img src="/../images/Redis/image-20220826155605199.png" alt="image-20220826155605199"></p><h4 id="4-3-网络相关配置"><a href="#4-3-网络相关配置" class="headerlink" title="4.3. ###网络相关配置 ###"></a><strong>4.3. ###网络相关配置 ###</strong></h4><p><img src="/../images/Redis/image-20220826155659464.png" alt="image-20220826155659464"></p><p><strong>bind</strong></p><p>默认情况bind&#x3D;127.0.0.1只能接受本机的访问请求（不支持远程连接，可以注掉）</p><p>不写的情况下，无限制接受任何ip地址的访问</p><p>生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其注释掉</p><p>如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的响应</p><p><strong>protected</strong></p><p>将本机访问保护模式设置 no（这样就可以远程访问了）</p><p><img src="/../images/Redis/image-20220826155945741.png" alt="image-20220826155945741"></p><p><strong>port</strong></p><p>端口号</p><p><img src="/../images/Redis/image-20220826160203767.png" alt="image-20220826160203767"></p><p><strong>tcp-backlog</strong></p><p>​设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和&#x3D;未完成三次握手队列 + 已经完成三次握手队列。</p><p>​在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。</p><p>​注意Linux内核会将这个值减小到&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn的值（128），所以需要确认增大&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn和&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_max_syn_backlog（128）两个值来达到想要的效果</p><p><img src="/../images/Redis/image-20220826160314632.png" alt="image-20220826160314632"></p><p><strong>timeout</strong></p><p>一个空闲的客户端维持多少秒会关闭，0表示关闭该功能。即永不关闭。单位秒</p><p><img src="/../images/Redis/image-20220826160514036.png" alt="image-20220826160514036"></p><p><strong>tcp-keepalive</strong></p><p>对访问客户端的一种心跳检测，每个n秒检测一次，长时间不操作就会自己断开连接。</p><p>单位为秒，如果设置为0，则不会进行 Keepalive 检测，建议设置成60 。</p><p><img src="/../images/Redis/image-20220826160618260.png" alt="image-20220826160618260"></p><h4 id="4-4-GENERAL通用"><a href="#4-4-GENERAL通用" class="headerlink" title="4.4. ###GENERAL通用###"></a>4.4. <strong>###GENERAL通用###</strong></h4><p><img src="/../images/Redis/image-20220826161049244.png" alt="image-20220826161049244"></p><p><strong>daemonize</strong></p><p>是否为后台进程，设置为yes</p><p>守护进程，后台启动</p><p><strong>pidfile</strong></p><p>存放pid（进程号）文件的位置，每个实例会产生一个不同的pid文件</p><p><img src="/../images/Redis/image-20220826161201727.png" alt="image-20220826161201727"></p><p><strong>loglevel</strong> </p><p>​指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为<strong>notice</strong></p><p>四个级别根据使用阶段来选择，生产环境选择notice 或者warning</p><p><img src="/../images/Redis/image-20220826161309847.png" alt="image-20220826161309847"></p><p><strong>logfile</strong> </p><p>设置日志文件输出的路径</p><p><img src="/../images/Redis/image-20220826161524422.png" alt="image-20220826161524422"></p><p><strong>databases 16</strong> </p><p>设定库的数量 默认16，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id</p><p><img src="/../images/Redis/image-20220826161602059.png" alt="image-20220826161602059"></p><h4 id="4-5-SECURITY安全"><a href="#4-5-SECURITY安全" class="headerlink" title="4.5. ###SECURITY安全###"></a><strong>4.5. ###SECURITY安全###</strong></h4><p><img src="/../images/Redis/image-20220826161652940.png" alt="image-20220826161652940"></p><p><strong>设置密码</strong></p><p><img src="/../images/Redis/image-20220826162316705.png" alt="image-20220826162316705"></p><p>访问密码的查看、设置和取消</p><p>在命令中设置密码，只是临时的。重启redis服务器，密码就还原了。</p><p>永久设置，需要再配置文件中进行设置。</p><h4 id="4-6-LIMITS限制"><a href="#4-6-LIMITS限制" class="headerlink" title="4.6. #### LIMITS限制 ###"></a><strong>4.6. #### LIMITS限制 ###</strong></h4><p><strong>maxclients</strong></p><ul><li>设置redis同时可以与多少个客户端进行连接。</li><li>默认情况下为10000个客户端。</li><li>如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。</li></ul><p><strong>maxmemory</strong> </p><ul><li>建议<strong>必须设置</strong>，否则，将内存占满，造成服务器宕机</li><li>设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。</li><li>如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。</li><li>但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。</li></ul><p><strong>maxmemory-policy</strong></p><ul><li>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）</li><li>allkeys-lru：在所有集合key中，使用LRU算法移除key</li><li>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键</li><li>allkeys-random：在所有集合key中，移除随机的key</li><li>volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key</li><li>noeviction：不进行移除。针对写操作，只是返回错误信息</li></ul><p><strong>maxmemory-samples</strong></p><ul><li>设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis默认会检查这么多个key并选择其中LRU的那个。</li><li>一般设置3到7的数字，数值越小样本越不准确，但性能消耗越小。</li></ul><h2 id="5-Redis-6-发布和订阅"><a href="#5-Redis-6-发布和订阅" class="headerlink" title="5. Redis 6 发布和订阅"></a>5. Redis 6 发布和订阅</h2><h3 id="5-1-什么是发布和订阅"><a href="#5-1-什么是发布和订阅" class="headerlink" title="5.1.什么是发布和订阅"></a>5.1.<strong>什么是发布和订阅</strong></h3><p>Redis 发布订阅 (pub&#x2F;sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。</p><p>1、客户端可以订阅频道如下图</p><p><img src="/../images/Redis/image-20220826163808209.png" alt="image-20220826163808209"></p><p>2、当给这个频道发布消息后，消息就会发送给订阅的客户端</p><p><img src="/../images/Redis/image-20220826163843758.png" alt="image-20220826163843758"></p><h3 id="5-2-发布和订阅命令行实现"><a href="#5-2-发布和订阅命令行实现" class="headerlink" title="5.2. 发布和订阅命令行实现"></a>5.2. 发布和订阅命令行实现</h3><p>1、打开一个客户端订阅channel1</p><p>SUBSCRIBE channel1</p><p><img src="/../images/Redis/image-20220826170807867.png" alt="image-20220826170807867"></p><p>2、打开另一个客户端，给channel1发布消息hello</p><p>publish channel1 hello</p><p><img src="/../images/Redis/image-20220826170854588.png" alt="image-20220826170854588"></p><p>3、打开第一个客户端可以看到发送的消息</p><p><img src="/../images/Redis/image-20220826170924252.png" alt="image-20220826170924252"></p><p>注：发布的消息没有持久化，如果在订阅的客户端收不到hello，只能收到订阅后发布的消息</p><h2 id="6-Redis新数据类型"><a href="#6-Redis新数据类型" class="headerlink" title="6. Redis新数据类型"></a><strong>6. Redis新数据类型</strong></h2><h3 id="6-1-Bitmaps"><a href="#6-1-Bitmaps" class="headerlink" title="6.1. Bitmaps"></a>6.1. <strong>Bitmaps</strong></h3><h4 id="1-介绍-5"><a href="#1-介绍-5" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p>​现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图</p><p>  <img src="/../images/Redis/image-20220826172246775.png" alt="image-20220826172246775"></p><p>合理地使用操作位能够有效地提高内存使用率和开发效率。</p><p><code></code>Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p><ol><li><p>Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</p></li><li><p>Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p><p><img src="/../images/Redis/image-20220826172352747.png" alt="image-20220826172352747"></p></li></ol><h4 id="2-常用命令-5"><a href="#2-常用命令-5" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h4><h5 id="2-1-setbit"><a href="#2-1-setbit" class="headerlink" title="2.1. setbit"></a>2.1. setbit</h5><p>（1）格式</p><p>setbit<key><offset><value>设置 Bitmaps 中某个偏移量的值（ 0 或 1 ）</p><p>（2）实例</p><p>​每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。</p><p>​设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid&#x3D;1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图</p><p><img src="/../images/Redis/image-20220826172746618.png" alt="image-20220826172746618"></p><p><img src="/../images/Redis/image-20220826173049453.png" alt="image-20220826173049453"></p><p>注：</p><p>​很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。</p><p>​在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</p><h5 id="2-2-getbit"><a href="#2-2-getbit" class="headerlink" title="2.2. getbit"></a>2.2. getbit</h5><p>（1）格式</p><p>getbit<key><offset>获取Bitmaps中某个偏移量的值</p><p>（2）实例</p><p><img src="/../images/Redis/image-20220826173339332.png" alt="image-20220826173339332"></p><h5 id="2-3-bitcount"><a href="#2-3-bitcount" class="headerlink" title="2.3. bitcount"></a>2.3. bitcount</h5><p>​统计<strong>字符串</strong>被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含。</p><p>（1）格式</p><p>bitcount<key>[start end] 统计字符串从start字节到end字节比特值为1的数量</p><p>（2）实例</p><p><img src="/../images/Redis/image-20220826173535637.png" alt="image-20220826173535637"></p><p>举例： K1 【01000001 01000000  00000000 00100001】，对应【0，1，2，3】</p><p>bitcount K1 1 2  ： 统计下标1、2字节组中bit&#x3D;1的个数，即01000000  00000000</p><p>–》bitcount K1 1 2 　　–》1</p><p>bitcount K1 1 3  ： 统计下标1、2字节组中bit&#x3D;1的个数，即01000000  00000000 00100001</p><p>–》bitcount K1 1 3　　–》3</p><p>bitcount K1 0 -2  ： 统计下标0到下标倒数第2，字节组中bit&#x3D;1的个数，即01000001  01000000   00000000</p><p>–》bitcount K1 0 -2　　–》3</p><p><code> </code>注意：redis的setbit设置或清除的是bit位置，而bitcount计算的是byte位置。</p><h5 id="2-4-bitop"><a href="#2-4-bitop" class="headerlink" title="2.4. bitop"></a>2.4. bitop</h5><p>(1)格式</p><p>bitop  and(or&#x2F;not&#x2F;xor) <destkey> [key…]</p><p>bitop是一个复合操作， 它可以做多个 Bitmaps 的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</p><p>(2)实例</p><p>2020-11-04 日访问网站的userid&#x3D;1,2,5,9。</p><p>setbit unique:users:20201104 1 1</p><p>setbit unique:users:20201104 2 1</p><p>setbit unique:users:20201104 5 1</p><p>setbit unique:users:20201104 9 1</p><p>2020-11-03 日访问网站的userid&#x3D;0,1,4,9。</p><p>setbit unique:users:20201103 0 1</p><p>setbit unique:users:20201103 1 1</p><p>setbit unique:users:20201103 4 1</p><p>setbit unique:users:20201103 9 1</p><p>计算出两天都访问过网站的用户数量</p><p>bitop and unique:users:and:20201104_03</p><p><code> </code>unique:users:20201103unique:users:20201104</p><h4 id="3-Bitmaps-与-set-的对比"><a href="#3-Bitmaps-与-set-的对比" class="headerlink" title="3. Bitmaps 与 set 的对比"></a>3. Bitmaps 与 set 的对比</h4><p><img src="/../images/Redis/image-20220826175957828.png" alt="image-20220826175957828"></p><p><img src="/../images/Redis/image-20220826180026482.png" alt="image-20220826180026482"></p><p><img src="/../images/Redis/image-20220826180122508.png" alt="image-20220826180122508"></p><h3 id="6-2-HyperLogLog"><a href="#6-2-HyperLogLog" class="headerlink" title="6.2. HyperLogLog"></a>6.2. <strong>HyperLogLog</strong></h3><h4 id="1-介绍-6"><a href="#1-介绍-6" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p>​在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p><p>​但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p><p>解决基数问题有很多种方案：</p><p>（1）数据存储在 MySQL 表中，使用 distinct count 计算不重复个数</p><p>（2）使用 Redis 提供的 hash、set、bitmaps 等数据结构来处理</p><p>​以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><p>能否能够降低一定的精度来平衡存储空间？Redis推出了HyperLogLog</p><p>​Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>​在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>​但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>什么是基数?</p><p>​比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><h4 id="2-常用命令-6"><a href="#2-常用命令-6" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h4><h5 id="2-1-pfadd"><a href="#2-1-pfadd" class="headerlink" title="2.1. pfadd"></a>2.1. pfadd</h5><p>（1）格式</p><p>pfadd <key>&lt; element&gt; [element …]   添加指定元素到 HyperLogLog 中</p><p>（2）实例</p><p><img src="/../images/Redis/image-20220826202407855.png" alt="image-20220826202407855"></p><p><code></code>将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。</p><h5 id="2-2-pfcount"><a href="#2-2-pfcount" class="headerlink" title="2.2. pfcount"></a>2.2. pfcount</h5><p>（1）格式</p><p>pfcount<key> [key …] 计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</p><p>（2）实例</p><p><img src="/../images/Redis/image-20220826202522791.png" alt="image-20220826202522791"></p><h5 id="2-3-pfmerge"><a href="#2-3-pfmerge" class="headerlink" title="2.3. pfmerge"></a>2.3. pfmerge</h5><p>（1）格式</p><p>pfmerge<destkey><sourcekey> [sourcekey …]  将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p><p>（2）实例</p><p><img src="/../images/Redis/image-20220826202927560.png" alt="image-20220826202927560"></p><h3 id="6-3-Geospatial"><a href="#6-3-Geospatial" class="headerlink" title="6.3. Geospatial"></a>6.3. <strong>Geospatial</strong></h3><h4 id="1-介绍-7"><a href="#1-介绍-7" class="headerlink" title="1.  介绍"></a>1.  介绍</h4><p>​Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><h4 id="2-常用命令-7"><a href="#2-常用命令-7" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h4><h5 id="2-1-geoadd"><a href="#2-1-geoadd" class="headerlink" title="2.1. geoadd"></a>2.1. geoadd</h5><p>（1）格式</p><p>geoadd<key>&lt; longitude&gt;<latitude><member> [longitude latitude member…]   添加地理位置（经度，纬度，名称）</p><p>（2）实例</p><p>geoadd china:city 121.47 31.23 shanghai</p><p>geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing</p><p><img src="/../images/Redis/image-20220826203629068.png" alt="image-20220826203629068"></p><p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p><p>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</p><p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p>已经添加的数据，是无法再次往里面添加的。</p><h5 id="2-2-geopos"><a href="#2-2-geopos" class="headerlink" title="2.2. geopos"></a>2.2. geopos</h5><p>（1）格式</p><p>geopos  <key><member> [member…]  获得指定地区的坐标值</p><p>（2）实例</p><p><img src="/../images/Redis/image-20220826203757489.png" alt="image-20220826203757489"></p><h5 id="2-3-geodist"><a href="#2-3-geodist" class="headerlink" title="2.3. geodist"></a>2.3. geodist</h5><p>（1）格式</p><p>geodist<key><member1><member2>  [m|km|ft|mi ]  获取两个位置之间的直线距离</p><p>（2）实例</p><p><img src="/../images/Redis/image-20220826204034369.png" alt="image-20220826204034369"></p><p>获取两个位置之间的直线距离</p><p>单位：</p><p>m 表示单位为米[默认值]。</p><p>km 表示单位为千米。</p><p>mi 表示单位为英里。</p><p>ft 表示单位为英尺。</p><p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p><h5 id="2-4-georadius"><a href="#2-4-georadius" class="headerlink" title="2.4.  georadius"></a>2.4.  georadius</h5><p>（1）格式</p><p>georadius<key>&lt; longitude&gt;<latitude>radius  m|km|ft|mi   以给定的经纬度为中心，找出某一半径内的元素</p><p>经度 纬度 距离 单位</p><p>（2）实例</p><p><img src="/../images/Redis/image-20220826204232417.png" alt="image-20220826204232417"></p><h2 id="7-Jedis-操作-Redis"><a href="#7-Jedis-操作-Redis" class="headerlink" title="7. Jedis 操作 Redis"></a>7. Jedis 操作 Redis</h2><p>使用 java 语言操作 Redis ，类似于 jdbc 操作数据库</p><p>1.首先创建一个 maven 工程，加入 Jedis 相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.测试</p><p>前置条件</p><ol><li>Redis 的 配置文件 网络相关配置</li></ol><p><strong>bind</strong> 注掉</p><p><strong>protected</strong>将本机访问保护模式设置 no</p><ol start="2"><li><p>Linux 防火墙，开放指定端口，或把防火墙关了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld ：查看防火墙状态</span><br><span class="line">systemctl stop firewalld：暂时关闭防火墙</span><br><span class="line">systemctl start firewalld：开启防火墙</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent ：开放指定端口</span><br><span class="line">firewall-cmd --reload：防火墙重新加载配置（设置好后一定要执行）</span><br><span class="line">firewall-cmd --zone=public --list-ports：查看已经开放的端口</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建 Jedis 对象</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.100.131&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ping</span> <span class="operator">=</span> jedis.ping();</span><br><span class="line">        System.out.println(ping);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Redis/image-20220826214527953.png" alt="image-20220826214527953"></p><p>测试成功，会返回一个pong</p><h3 id="7-1-相关操作"><a href="#7-1-相关操作" class="headerlink" title="7.1. 相关操作"></a>7.1. 相关操作</h3><h4 id="1-Jedis-API-Key"><a href="#1-Jedis-API-Key" class="headerlink" title="1. Jedis-API:    Key"></a>1. <strong>Jedis-API:    Key</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//操作 key</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建 Jedis 对象</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.100.131&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.得到所有key</span></span><br><span class="line">    Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key: keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.添加key-value</span></span><br><span class="line">    jedis.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    jedis.set(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    jedis.set(<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (String key: keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.判断key是否存在</span></span><br><span class="line">    System.out.println(jedis.exists(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">    <span class="comment">//4.看key的过期时间</span></span><br><span class="line">    System.out.println(jedis.ttl(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">    <span class="comment">//5.得到key的值</span></span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//6.设置多个key-value</span></span><br><span class="line">        jedis.mset(<span class="string">&quot;k4&quot;</span>,<span class="string">&quot;v4&quot;</span>,<span class="string">&quot;k5&quot;</span>,<span class="string">&quot;v5&quot;</span>);</span><br><span class="line">        List&lt;String&gt; mget = jedis.mget(<span class="string">&quot;k4&quot;</span>, <span class="string">&quot;k5&quot;</span>);</span><br><span class="line">        System.out.println(mget);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Jedis-API-List"><a href="#2-Jedis-API-List" class="headerlink" title="2. Jedis-API:    List"></a>2. <strong>Jedis-API:    List</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = jedis.lrange(<span class="string">&quot;mylist&quot;</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (String element : list) &#123;</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Jedis-API-set"><a href="#3-Jedis-API-set" class="headerlink" title="3. Jedis-API:    set"></a>3. <strong>Jedis-API:    set</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order01&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order02&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order03&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order04&quot;</span>);</span><br><span class="line">Set&lt;String&gt; smembers = jedis.smembers(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String order : smembers) &#123;</span><br><span class="line">    System.out.println(order);</span><br><span class="line">&#125;</span><br><span class="line">jedis.srem(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order02&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="4-Jedis-API-hash"><a href="#4-Jedis-API-hash" class="headerlink" title="4. Jedis-API:    hash"></a>4. <strong>Jedis-API:    hash</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jedis.hset(<span class="string">&quot;hash1&quot;</span>,<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">System.out.println(jedis.hget(<span class="string">&quot;hash1&quot;</span>,<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String();</span><br><span class="line">map.put(<span class="string">&quot;telphone&quot;</span>,<span class="string">&quot;13810169999&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;abc@163.com&quot;</span>);</span><br><span class="line">jedis.hmset(<span class="string">&quot;hash2&quot;</span>,map);</span><br><span class="line">List&lt;String&gt; result = jedis.hmget(<span class="string">&quot;hash2&quot;</span>, <span class="string">&quot;telphone&quot;</span>,<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String element : result) &#123;</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Jedis-API-zset"><a href="#5-Jedis-API-zset" class="headerlink" title="5. Jedis-API:    zset"></a>5. <strong>Jedis-API:    zset</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">100d</span>, <span class="string">&quot;z3&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">90d</span>, <span class="string">&quot;l4&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">80d</span>, <span class="string">&quot;w5&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">70d</span>, <span class="string">&quot;z6&quot;</span>);</span><br><span class="line">Set&lt;String&gt; zrange = jedis.zrange(<span class="string">&quot;zset01&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (String e : zrange)&#123;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-手机验证码"><a href="#7-2-手机验证码" class="headerlink" title="7.2. 手机验证码"></a>7.2. 手机验证码</h3><p>要求：</p><p>1、输入手机号，点击发送后随机生成6位数字码，2分钟有效</p><p>2、输入验证码，点击验证，返回成功或失败</p><p>3、每个手机号每天只能输入3次</p><p><img src="/../images/Redis/image-20220826223403028.png" alt="image-20220826223403028"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        verifyCode(&quot;13262016514&quot;);</span></span><br><span class="line">        <span class="comment">//校验</span></span><br><span class="line">        getRedisCode(<span class="string">&quot;13262016514&quot;</span>,<span class="string">&quot;056891&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.生成6位的验证码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCode</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rand</span> <span class="operator">=</span> random.nextInt(<span class="number">10</span>);</span><br><span class="line">            code += rand;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.让每个手机每天只能发送三次，验证码放到redis中，设置过期时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">verifyCode</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">        <span class="comment">//连接 redis</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.100.131&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//拼接key</span></span><br><span class="line">        <span class="comment">//手机发送次数key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">countKey</span> <span class="operator">=</span> <span class="string">&quot;VerifyCode&quot;</span> + phone + <span class="string">&quot;:count&quot;</span>;</span><br><span class="line">        <span class="comment">//验证码key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codeKey</span> <span class="operator">=</span> <span class="string">&quot;VerifyCode&quot;</span> + phone + <span class="string">&quot;:code&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每个手机每天只能发送三次</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">count</span> <span class="operator">=</span> jedis.get(countKey);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//没有发送次数，第一次发送</span></span><br><span class="line">            <span class="comment">//设置发送次数是1</span></span><br><span class="line">            jedis.setex(countKey, <span class="number">86400</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Integer.parseInt(count)&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//发送次数 + 1</span></span><br><span class="line">            jedis.incr(countKey);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Integer.parseInt(count)&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;今天的发送次数已经超过三次&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送的验证码放到redis里面</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">vcode</span> <span class="operator">=</span> getCode();</span><br><span class="line">        jedis.setex(codeKey,<span class="number">120</span>,vcode);</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.验证码校验</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getRedisCode</span><span class="params">(String phone,String code)</span>&#123;</span><br><span class="line">        <span class="comment">//从redis中获取验证码</span></span><br><span class="line">        <span class="comment">//连接 redis</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.100.131&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//验证码key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codeKey</span> <span class="operator">=</span> <span class="string">&quot;VerifyCode&quot;</span> + phone + <span class="string">&quot;:code&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">redisCode</span> <span class="operator">=</span> jedis.get(codeKey);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(redisCode.equals(code))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;shib&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Redis/image-20220826231650777.png" alt="image-20220826231650777"></p><p><img src="/../images/Redis/image-20220826231740911.png" alt="image-20220826231740911"></p><h2 id="8-SpringBoot-整合-Redis"><a href="#8-SpringBoot-整合-Redis" class="headerlink" title="8. SpringBoot 整合 Redis"></a>8. SpringBoot 整合 Redis</h2><h3 id="1-加入依赖"><a href="#1-加入依赖" class="headerlink" title="1. 加入依赖"></a>1. 加入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-application-properties配置redis配置"><a href="#2-application-properties配置redis配置" class="headerlink" title="2. application.properties配置redis配置"></a>2. application.properties配置redis配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#Redis服务器地址</span><br><span class="line">spring.redis.host=192.168.140.136</span><br><span class="line">#Redis服务器连接端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">#Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database=0</span><br><span class="line">#连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=1800000</span><br><span class="line">#连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.lettuce.pool.max-active=20</span><br><span class="line">#最大阻塞等待时间(负数表示没限制)</span><br><span class="line">spring.redis.lettuce.pool.max-wait=-1</span><br><span class="line">#连接池中的最大空闲连接</span><br><span class="line">pring.redis.lettuce.pool.max-idle=5</span><br><span class="line">#连接池中的最小空闲连接</span><br><span class="line">spring.redis.lettuce.pool.min-idle=0</span><br></pre></td></tr></table></figure><h3 id="3-创建redis配置类"><a href="#3-创建redis配置类" class="headerlink" title="3. 创建redis配置类"></a>3. 创建redis配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"><span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line"><span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"><span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line"><span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"><span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redisTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTestController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRedis</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//设置值到redis中</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;pony&quot;</span>);</span><br><span class="line">        <span class="comment">//获取值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Redis/image-20220827001753385.png" alt="image-20220827001753385"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git的使用</title>
      <link href="/posts/git%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
      <url>/posts/git%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h1><h2 id="1-Git-介绍"><a href="#1-Git-介绍" class="headerlink" title="1. Git 介绍"></a>1. Git 介绍</h2><p>​Git 是一个免费的、开源的 <strong>分布式版本控制系统</strong>，可以快速高效地处理从小型到大型的各种项目</p><h3 id="1-1-何为版本控制"><a href="#1-1-何为版本控制" class="headerlink" title="1.1.  何为版本控制"></a>1.1.  何为版本控制</h3><p>​版本控制，记录文件内容变化，便于将来查阅特定的版本修订情况的系统。</p><p>​记录文件修改的历史记录，让用户查看历史版本，方便版本切换。</p><h3 id="1-2-版本控制工具"><a href="#1-2-版本控制工具" class="headerlink" title="1.2. 版本控制工具"></a>1.2. 版本控制工具</h3><h4 id="1-集中式"><a href="#1-集中式" class="headerlink" title="1.集中式"></a>1.集中式</h4><p>例：SVN</p><p>​这类工具都有一个比较集中的管理服务器，保存所有文件修订版本，所有用户的客户机连接到这太服务器，取出最新的文件或者提交更新。</p><p>​每个人都可以，看到项目中的其他人正在做什么事，如果服务器坏了，所有人都不能修改，提交，无法协同工作,无法作版本控制。</p><h4 id="2-分布式"><a href="#2-分布式" class="headerlink" title="2.分布式"></a>2.分布式</h4><p>例：Git、Bazaar</p><p>​用户从远程库的每次提取，提取的不是最新版本的文件快照，而是把代码仓库完整的镜像下来（相当于对远程库的备份）（本地库）。如果发生故障，可以通过其他客户端的本地仓库进行恢复。</p><p>​用户以自己的客户端，做远程控制，然后提交到远程库（版本控制是在本机进行的）</p><p>​每个客户端保存的都是个完整的项目（包含历史记录，更加安全）</p><h3 id="1-3-git-工作机制"><a href="#1-3-git-工作机制" class="headerlink" title="1.3. git 工作机制"></a>1.3. git 工作机制</h3><p><img src="/../images/Git/image-20220822160210326.png" alt="image-20220822160210326"></p><h3 id="1-4-Git-和代码托管心"><a href="#1-4-Git-和代码托管心" class="headerlink" title="1.4. Git 和代码托管心"></a>1.4. Git 和代码托管心</h3><p>​代码托管心，即远程库。</p><p>​局域网：GitLab</p><p>​        互联网：Gitee码云，GitHub</p><h2 id="2-Git安装"><a href="#2-Git安装" class="headerlink" title="2.Git安装"></a>2.Git安装</h2><h2 id="3-Git常用命令"><a href="#3-Git常用命令" class="headerlink" title="3. Git常用命令"></a>3. Git常用命令</h2><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户签名</td></tr><tr><td><strong>git init</strong></td><td>初始化本地库</td></tr><tr><td><strong>git status</strong></td><td>查看本地仓库状态</td></tr><tr><td><strong>git 文件名</strong></td><td>添加到暂存区</td></tr><tr><td><strong>git commit -m “日志信息” 文件名</strong></td><td>提交到本地库</td></tr><tr><td><strong>git reflog</strong></td><td>查看历史记录</td></tr><tr><td><strong>git reset –hard</strong></td><td>版本穿梭</td></tr><tr><td><strong>git rm –cached 文件名</strong></td><td>删除暂存区的文件</td></tr></tbody></table><h3 id="3-1-设置用户签名"><a href="#3-1-设置用户签名" class="headerlink" title="3.1. 设置用户签名"></a>3.1. 设置用户签名</h3><p>必须要设置用户签名，不然提交代码会报错</p><p><img src="/../images/Git/image-20220822162549493.png" alt="image-20220822162549493"></p><p>在 C:\Users\DEII  gitconfig 查看用户签名</p><p><img src="/../images/Git/image-20220822162634754.png" alt="image-20220822162634754"></p><p><img src="/../images/Git/image-20220822162713447.png" alt="image-20220822162713447"></p><p>签名作用，为了区别哪一个操作者提交的代码，用户签名和登录账号是没有任何关系的</p><h3 id="3-2-初始化本地库"><a href="#3-2-初始化本地库" class="headerlink" title="3.2. 初始化本地库"></a>3.2. 初始化本地库</h3><p>（1）基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="/../images/Git/image-20220822163836002.png" alt="image-20220822163836002"></p><p>3.3. 查看本地库状态</p><p>（1）基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="/../images/Git/image-20220822164551030.png" alt="image-20220822164551030"></p><p>添加一个文件</p><p>vim hello.txt</p><p>i 进入编辑模式</p><p>esc 退出编辑模式</p><p>yy 复制</p><p>p 粘贴</p><p>wq 保存</p><p>ZZ 退出</p><p>cat 文件名 ：查看文件内容</p><p><img src="/../images/Git/image-20220822165757877.png" alt="image-20220822165757877"></p><h3 id="3-3-将文件添加到暂存区"><a href="#3-3-将文件添加到暂存区" class="headerlink" title="3.3. 将文件添加到暂存区"></a>3.3. 将文件添加到暂存区</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure><p><img src="/../images/Git/image-20220822170257561.png" alt="image-20220822170257561"></p><p>git 已经追踪到文件了</p><p><img src="/../images/Git/image-20220822170554320.png" alt="image-20220822170554320"></p><p>暂存区的文件可以删除，即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached 文件名</span><br></pre></td></tr></table></figure><p>这只是删了暂存区的文件按，工作区还有</p><h3 id="3-4-提交到本地库"><a href="#3-4-提交到本地库" class="headerlink" title="3.4. 提交到本地库"></a>3.4. 提交到本地库</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;日志信息&quot; 文件名</span><br></pre></td></tr></table></figure><p><img src="/../images/Git/image-20220822171606846.png" alt="image-20220822171606846"></p><p><img src="/../images/Git/image-20220822171725799.png" alt="image-20220822171725799"></p><p><img src="/../images/Git/image-20220822171911988.png" alt="image-20220822171911988"></p><h3 id="3-5-修改文件"><a href="#3-5-修改文件" class="headerlink" title="3.5. 修改文件"></a>3.5. 修改文件</h3><p><img src="/../images/Git/image-20220822172222211.png" alt="image-20220822172222211"></p><p>查看本地库状态</p><p><img src="/../images/Git/image-20220822172400212.png" alt="image-20220822172400212"></p><p>添加到暂存区</p><p><img src="/../images/Git/image-20220822172451721.png" alt="image-20220822172451721"></p><p>查看本地库状态</p><p><img src="/../images/Git/image-20220822172531211.png" alt="image-20220822172531211"></p><p>提交到本地库</p><p><img src="/../images/Git/image-20220822172640464.png" alt="image-20220822172640464"></p><p>修改，git 没法表示出来，就是删除再添加</p><p>查看版本信息</p><p><img src="/../images/Git/image-20220822172905856.png" alt="image-20220822172905856"></p><h3 id="3-6-历史版本"><a href="#3-6-历史版本" class="headerlink" title="3.6. 历史版本"></a>3.6. 历史版本</h3><ol><li><p>基本语法</p><p>git reflog : 查看历史版本</p></li></ol><p>​   git flog : 查看版本详细信息</p><p>​2.版本穿梭</p><p>​git reset –hard 要穿越的版本号</p><p><img src="/../images/Git/image-20220822173829184.png" alt="image-20220822173829184"></p><p>​查看版本信息</p><p><img src="/../images/Git/image-20220822173950346.png" alt="image-20220822173950346"></p><p>.git HEAD 存放着 你在哪个分支</p><p><img src="/../images/Git/image-20220822174413331.png" alt="image-20220822174413331"></p><p>git-demo1.git\refs\heads 的 master 你在哪个版本</p><p><img src="/../images/Git/image-20220822174334423.png" alt="image-20220822174334423"></p><h2 id="4-分支操作"><a href="#4-分支操作" class="headerlink" title="4. 分支操作"></a>4. 分支操作</h2><p><img src="/../images/Git/image-20220822175330805.png" alt="image-20220822175330805"></p><p>开发自己的分支不会影响主线分支的运行</p><p><img src="/../images/Git/image-20220822175505385.png" alt="image-20220822175505385"></p><p>master : 主线分支</p><p>hot-fix：热补丁 修复好后与主分支合并</p><p>这样就可以并行推进多个功能的开发，提高效率</p><p>各个分支的开发互不影响。</p><h3 id="4-1-分支操作"><a href="#4-1-分支操作" class="headerlink" title="4.1. 分支操作"></a>4.1. 分支操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定分支合并到当前分支上</td></tr></tbody></table><p><img src="/../images/Git/image-20220822180433644.png" alt="image-20220822180433644"></p><h3 id="4-2-切换分支"><a href="#4-2-切换分支" class="headerlink" title="4.2. 切换分支"></a>4.2. 切换分支</h3><p><img src="/../images/Git/image-20220822180625576.png" alt="image-20220822180625576"></p><h3 id="4-3-修改分支"><a href="#4-3-修改分支" class="headerlink" title="4.3. 修改分支"></a>4.3. 修改分支</h3><p>修改文件</p><p><img src="/../images/Git/image-20220822180837158.png" alt="image-20220822180837158"></p><p>添加到暂存区</p><p><img src="/../images/Git/image-20220822181148406.png" alt="image-20220822181148406"></p><p>提交本地库</p><p><img src="/../images/Git/image-20220822181214838.png" alt="image-20220822181214838"></p><h3 id="4-4-合并分支"><a href="#4-4-合并分支" class="headerlink" title="4.4. 合并分支"></a>4.4. 合并分支</h3><p>先回到 master 分支</p><p><img src="/../images/Git/image-20220822181530066.png" alt="image-20220822181530066"></p><p>合并 hot-fix 分支</p><p><img src="/../images/Git/image-20220822181627617.png" alt="image-20220822181627617"></p><h3 id="4-5-冲突合并"><a href="#4-5-冲突合并" class="headerlink" title="4.5. 冲突合并"></a>4.5. 冲突合并</h3><p>​在合并时，两个分支在<strong>同一个位置，有两套完全不同的修改</strong>。Git 无法提我们决定使用哪一个，必须认为决定新代码内容。</p><p>在 master 分支 修改文件</p><p><img src="/../images/Git/image-20220822184449684.png" alt="image-20220822184449684"></p><p>提交本地仓库</p><p><img src="/../images/Git/image-20220822184524674.png" alt="image-20220822184524674"></p><p>切换到 hot-fix 分支</p><p><img src="/../images/Git/image-20220822184616343.png" alt="image-20220822184616343"></p><p>修改文件</p><p><img src="/../images/Git/image-20220822184743986.png" alt="image-20220822184743986"></p><p>提交本地库</p><p><img src="/../images/Git/image-20220822184918684.png" alt="image-20220822184918684"></p><p>切换到 master 分支，合并分支</p><p><img src="/../images/Git/image-20220822194320566.png" alt="image-20220822194320566"></p><p>合并失败，代码冲突，需要手动合并，并且文件已经指出冲突的代码</p><p><img src="/../images/Git/image-20220822194645538.png" alt="image-20220822194645538"></p><p>修改文件，并将特殊符合都删掉</p><p><img src="/../images/Git/image-20220822194924487.png" alt="image-20220822194924487"></p><p>添加到暂存区</p><p><img src="/../images/Git/image-20220822195231554.png" alt="image-20220822195231554"></p><p>提交到本地库（此时commit 不能加文件名）</p><p><img src="/../images/Git/image-20220822195248105.png" alt="image-20220822195248105"></p><h2 id="5-Git-团队协作机制"><a href="#5-Git-团队协作机制" class="headerlink" title="5.  Git 团队协作机制"></a>5.  Git 团队协作机制</h2><h4 id="团队内协作"><a href="#团队内协作" class="headerlink" title="团队内协作"></a><strong>团队内协作</strong></h4><p><img src="/../images/Git/image-20220822202046524.png" alt="image-20220822202046524"></p><h4 id="团队外协作"><a href="#团队外协作" class="headerlink" title="团队外协作"></a>团队外协作</h4><p><img src="/../images/Git/image-20220822201933487.png" alt="image-20220822201933487"></p><h2 id="6-GitHub操作"><a href="#6-GitHub操作" class="headerlink" title="6. GitHub操作"></a>6. GitHub操作</h2><h3 id="6-1-创建远程仓库"><a href="#6-1-创建远程仓库" class="headerlink" title="6.1.创建远程仓库"></a>6.1.创建远程仓库</h3><p><img src="/../images/Git/image-20220822203902171.png" alt="image-20220822203902171"></p><p><img src="/../images/Git/image-20220822204214756.png" alt="image-20220822204214756"></p><p>复制连接 ：<a href="https://github.com/PonyMBZ/git-demo1.git">https://github.com/PonyMBZ/git-demo1.git</a></p><h3 id="6-2-创建远程库的别名"><a href="#6-2-创建远程库的别名" class="headerlink" title="6.2. 创建远程库的别名"></a>6.2. 创建远程库的别名</h3><p>连接太长了，起一个别名</p><p>（1）基本语法</p><p>git remote -v 查看当前所有远程地址别名</p><p>git remote add 别名 远程地址</p><p><img src="/../images/Git/image-20220822204828069.png" alt="image-20220822204828069"></p><h3 id="6-3-将本地分支推送到远程仓库"><a href="#6-3-将本地分支推送到远程仓库" class="headerlink" title="6.3.将本地分支推送到远程仓库"></a>6.3.将本地分支推送到远程仓库</h3><p>git puch 别名&#x2F;地址 分支</p><p><img src="/../images/Git/image-20220822211011098.png" alt="image-20220822211011098"> </p><p><img src="/../images/Git/image-20220822211143472.png" alt="image-20220822211143472"></p><p><img src="/../images/Git/image-20220822211357132.png" alt="image-20220822211357132"></p><p><img src="/../images/Git/image-20220822211859807.png" alt="image-20220822211859807"></p><h3 id="6-4-拉取远程库代码"><a href="#6-4-拉取远程库代码" class="headerlink" title="6.4. 拉取远程库代码"></a>6.4. 拉取远程库代码</h3><p><img src="/../images/Git/image-20220822214627490.png" alt="image-20220822214627490"></p><h3 id="6-5-克隆远程仓库到本地"><a href="#6-5-克隆远程仓库到本地" class="headerlink" title="6.5. 克隆远程仓库到本地"></a>6.5. 克隆远程仓库到本地</h3><p><img src="/../images/Git/image-20220822215724949.png" alt="image-20220822215724949"></p><p>拉取代码、初始化本地仓库、创建别名</p><h3 id="6-6-团队内协作"><a href="#6-6-团队内协作" class="headerlink" title="6.6. 团队内协作"></a>6.6. 团队内协作</h3><p>git-demo2 修改hello.txt文件</p><p><img src="/../images/Git/image-20220822224511700.png" alt="image-20220822224511700"></p><p>GitHub 账号添加 一个成员，给他权限，不然他没法，push 代码。</p><p><img src="/../images/Git/image-20220822222948821.png" alt="image-20220822222948821"></p><p>添加后给他发邀请函</p><p><img src="/../images/Git/image-20220822223330921.png" alt="image-20220822223330921"></p><p>将邀请函（也是一个地址）复制下来</p><p><img src="/../images/Git/image-20220822223452671.png" alt="image-20220822223452671"></p><p>​然后把邀请函通过qq、微信等发给邀请的人，然后被邀请的人把邀请函复制到自己的 GitHub 连接上，点击同意。</p><p><img src="/../images/Git/image-20220822223817913.png" alt="image-20220822223817913"></p><p>demo1，将远程仓库的代码，pull 下来</p><p><img src="/../images/Git/image-20220822224424345.png" alt="image-20220822224424345"></p><h3 id="6-7-跨团队协作"><a href="#6-7-跨团队协作" class="headerlink" title="6.7. 跨团队协作"></a>6.7. 跨团队协作</h3><p>来了一个团队外的人要修改代码</p><p>首先，搜索到别人的仓库</p><p><img src="/../images/Git/image-20220822225756663.png" alt="image-20220822225756663"></p><p>点击 fork 叉取代码</p><p><img src="/../images/Git/image-20220822230117684.png" alt="image-20220822230117684"></p><p><img src="/../images/Git/image-20220822230302037.png" alt="image-20220822230302037"></p><p>改完代码后，拉取请求</p><p><img src="/../images/Git/image-20220822230432012.png" alt="image-20220822230432012"></p><p><img src="/../images/Git/image-20220822230523513.png" alt="image-20220822230523513"></p><p><img src="/../images/Git/image-20220822230601287.png" alt="image-20220822230601287"></p><p><img src="/../images/Git/image-20220822230634258.png" alt="image-20220822230634258"></p><p>在团队的人就可以看到，一个拉取请求</p><p><img src="/../images/Git/image-20220822230756387.png" alt="image-20220822230756387"></p><p><img src="/../images/Git/image-20220822230827383.png" alt="image-20220822230827383"></p><p>请求合并申请</p><p><img src="/../images/Git/image-20220822231000216.png" alt="image-20220822231000216"></p><h3 id="6-8-SSH-免密登录"><a href="#6-8-SSH-免密登录" class="headerlink" title="6.8. SSH 免密登录"></a>6.8. SSH 免密登录</h3><p>C:\Users\DEII.ssh 文件下打开终端</p><p>输入 ssh-keygen -t res -C 账号邮箱</p><p>ssh-keygen 一个命令生成ssh免密登录协议</p><p>-t : 指定加密算法</p><p>rsa：一种非对称加密协议</p><p>-C：描述</p><p>敲三次回车，就会生成密钥</p><p><img src="/../images/Git/image-20220822231951791.png" alt="image-20220822231951791"></p><p>公钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDvhlStY21jLH6HDlCgtnsDvfTJZdBIuwQ7brGI6/xklCe7Hj8B4NO2ZVZWtQAUTgrM7b5v/kHTwop7qNB3vpTm9LtvJqQS9sN2MTPdo30AGnZhLvkTW4JIq/iyGNkw/c1a8MeXJ4SUjqfHUJ9ZJxhXT2kJwc0Ak6hvaTUqWLk9IvpsHHiDjj6r4n4efH6ETk6VobjGTqmTUbMqezd0+XU08FfG5kpWQZbLDNyRquq+jn9Nb/9NzVdEeQRF0D3iYCE48TC7V0KJGVIyekYGIcOIAwMc/Y6q37DvCEqwVy+YkqEnCD/ReEYI1Ut2o9Q5d6mDY0noee74DGbz9wOBlNkS3nbEDxGY/V5DFw8iroIsHhcVDtvppp0yAEbPJzIWmDrcxRqnEMDGgKftwqM+bswCrIW2dRgU62B3tauZ6rw61RYW7usMakiFpHZalVGwklDPkchQwl9pf3Dn8RBxR9q5P+Prr7jxjKG+5DbXAWdekT5Tz1ZFwU1gZ4z8yO+ZqZ8= 2916378264@qq.com</span><br></pre></td></tr></table></figure><p><img src="/../images/Git/image-20220822232125669.png" alt="image-20220822232125669"></p><p><img src="/../images/Git/image-20220822232219745.png" alt="image-20220822232219745"></p><h2 id="7-idea-集成-Git"><a href="#7-idea-集成-Git" class="headerlink" title="7.  idea 集成 Git"></a>7.  idea 集成 Git</h2><h3 id="7-1-配置-git-忽略文件"><a href="#7-1-配置-git-忽略文件" class="headerlink" title="7.1. 配置 git 忽略文件"></a>7.1. 配置 git 忽略文件</h3><p>​与项目的实际功能无关，不参与服务器上的部署运行。忽略后能够屏蔽IDE工具之间的差异。</p><p>​起一个 .ignore 的文件，原则上放哪都行，为了便于让~&#x2F;.gitconfig 文件的引用，建议也放在用户目录下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">\# Compiled class file</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line">\# Log file</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line">\# BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line">\# Mobile Tools for [Java](http://search.bilibili.com/all?from_source=webcommentline_search&amp;keyword=Java) (J2ME)</span><br><span class="line">.mtj.tmp/# Package Files #</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line">hs_err_pid*</span><br><span class="line"></span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target</span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure><p>对 .gitconfig 文件进行配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">  name = Pony</span><br><span class="line">  email = 2916378264@qq.com</span><br><span class="line"></span><br><span class="line">[core]</span><br><span class="line">  excludefile = C:/Users/DEII/git.ignore</span><br></pre></td></tr></table></figure><p>也可使用 idea 的插件来做（参考连接    <a href="https://blog.csdn.net/brantykl/article/details/123057853%EF%BC%89">https://blog.csdn.net/brantykl/article/details/123057853）</a></p><h3 id="7-2-定位git程序"><a href="#7-2-定位git程序" class="headerlink" title="7.2. 定位git程序"></a>7.2. 定位git程序</h3><p><img src="/../images/Git/image-20220823095039592.png" alt="image-20220823095039592"></p><h3 id="7-3-使用-git-管理"><a href="#7-3-使用-git-管理" class="headerlink" title="7.3. 使用 git 管理"></a>7.3. 使用 git 管理</h3><p><img src="/../images/Git/image-20220823095401027.png" alt="image-20220823095401027"></p><p>点完之后对应的目录就会出现一个 .git 目录，git 就接管这个目录</p><p><img src="/../images/Git/image-20220823095624848.png" alt="image-20220823095624848"></p><h4 id="1-将文件添加到暂存区"><a href="#1-将文件添加到暂存区" class="headerlink" title="1. 将文件添加到暂存区"></a>1. 将文件添加到暂存区</h4><p><img src="/../images/Git/image-20220823095835630.png" alt="image-20220823095835630"></p><p>问是否依然添加被忽略的文件，选则否</p><p><img src="/../images/Git/image-20220823100622442.png" alt="image-20220823100622442"></p><h4 id="2-提交本地库"><a href="#2-提交本地库" class="headerlink" title="2.  提交本地库"></a>2.  提交本地库</h4><p><img src="/../images/Git/image-20220823100748929.png" alt="image-20220823100748929"></p><p>修改后第二次提交</p><p><img src="/../images/Git/image-20220823102021677.png" alt="image-20220823102021677"></p><h4 id="3-切换版本"><a href="#3-切换版本" class="headerlink" title="3. 切换版本"></a>3. 切换版本</h4><p><img src="/../images/Git/image-20220823102627650.png" alt="image-20220823102627650"></p><p><img src="/../images/Git/image-20220823102713109.png" alt="image-20220823102713109"></p><p><img src="/../images/Git/image-20220823103018693.png" alt="image-20220823103018693"></p><h4 id="4-创建分支"><a href="#4-创建分支" class="headerlink" title="4. 创建分支"></a>4. 创建分支</h4><p><img src="/../images/Git/image-20220823103317527.png" alt="image-20220823103317527"></p><p>或者右下角</p><p><img src="/../images/Git/image-20220823103357773.png" alt="image-20220823103357773"></p><p><img src="/../images/Git/image-20220823103524000.png" alt="image-20220823103524000"></p><h4 id="5-切换分支"><a href="#5-切换分支" class="headerlink" title="5. 切换分支"></a>5. 切换分支</h4><p><img src="/../images/Git/image-20220823103613244.png" alt="image-20220823103613244"></p><p><img src="/../images/Git/image-20220823103645179.png" alt="image-20220823103645179"></p><h4 id="6-合并分支（没有冲突）"><a href="#6-合并分支（没有冲突）" class="headerlink" title="6.合并分支（没有冲突）"></a>6.合并分支（没有冲突）</h4><p><img src="/../images/Git/image-20220823104258049.png" alt="image-20220823104258049"></p><p><img src="/../images/Git/image-20220823104412516.png" alt="image-20220823104412516"></p><h4 id="7-解决冲突"><a href="#7-解决冲突" class="headerlink" title="7. 解决冲突"></a>7. 解决冲突</h4><p>hot-fix 分支修改文件</p><p><img src="/../images/Git/image-20220823104549939.png" alt="image-20220823104549939"></p><p>master 分支修改文件</p><p><img src="/../images/Git/image-20220823105757282.png" alt="image-20220823105757282"></p><p>在合并就会出现代码冲突，需要手动合并代码，点击 merge</p><p><img src="/../images/Git/image-20220823105927744.png" alt="image-20220823105927744"></p><p><img src="/../images/Git/image-20220823110218187.png" alt="image-20220823110218187"></p><p><img src="/../images/Git/image-20220823110448503.png" alt="image-20220823110448503"></p><p><img src="/../images/Git/image-20220823112349914.png" alt="image-20220823112349914"></p><h2 id="8-Idea-集成-GitHub"><a href="#8-Idea-集成-GitHub" class="headerlink" title="8. Idea 集成 GitHub"></a>8. Idea 集成 GitHub</h2><h3 id="8-1-设置-GitHub-账号"><a href="#8-1-设置-GitHub-账号" class="headerlink" title="8.1. 设置 GitHub 账号"></a>8.1. 设置 GitHub 账号</h3><p><img src="/../images/Git/image-20220823112638206.png" alt="image-20220823112638206"></p><p>使用账号密码，很难登陆上，所以这里使用口令登录</p><p><img src="/../images/Git/image-20220823113318029.png" alt="image-20220823113318029"></p><p>去 GitHub 生成一个口令</p><p><img src="/../images/Git/image-20220823113428744.png" alt="image-20220823113428744"></p><p><img src="/../images/Git/image-20220823113725692.png" alt="image-20220823113725692"></p><p><img src="/../images/Git/image-20220823113841066.png" alt="image-20220823113841066"></p><p>口令：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 （一定要保存，刷新就看不见了）</p><p><img src="/../images/Git/image-20220823114004419.png" alt="image-20220823114004419"></p><h3 id="8-2-push-到远程库"><a href="#8-2-push-到远程库" class="headerlink" title="8.2. push 到远程库"></a>8.2. push 到远程库</h3><p>先创建远程库</p><p><img src="/../images/Git/image-20220823165753969.png" alt="image-20220823165753969"></p><p><img src="/../images/Git/image-20220823164750439.png" alt="image-20220823164750439"></p><p>push 可能会报错：<a href="https://blog.csdn.net/qq_55125921/article/details/125220576">https://blog.csdn.net/qq_55125921/article/details/125220576</a></p><p>使用 ssh 免密登录进行 push（https会因网络而失败）</p><p><img src="/../images/Git/image-20220823170656593.png" alt="image-20220823170656593"></p><p><img src="/../images/Git/image-20220823170828456.png" alt="image-20220823170828456"></p><p>​注：在Push之前，如果本地库代码跟远程库代码版本不一致，push的操作是会被拒绝的，想要push成功，<strong>一定要保证本地库的版本要比远程库版本高，</strong>在动手改代码前要检查远程库跟本地库的区别，要先 pull 拉取一下远程库的代码，将本地代码更新到最新以后，然后再修改提交，推送。</p><h3 id="8-3-pull-拉取代码"><a href="#8-3-pull-拉取代码" class="headerlink" title="8.3. pull 拉取代码"></a>8.3. pull 拉取代码</h3><p><img src="/../images/Git/image-20220823173357681.png" alt="image-20220823173357681"></p><h3 id="8-4-clone-克隆代码"><a href="#8-4-clone-克隆代码" class="headerlink" title="8.4. clone 克隆代码"></a>8.4. clone 克隆代码</h3><p><img src="/../images/Git/image-20220823174225763.png" alt="image-20220823174225763"></p><p><img src="/../images/Git/image-20220823174404433.png" alt="image-20220823174404433"></p><h2 id="9-gitee"><a href="#9-gitee" class="headerlink" title="9. gitee"></a>9. gitee</h2><p><img src="/../images/Git/image-20220823180816349.png" alt="image-20220823180816349"></p><p>使用邮箱登录</p><p><img src="/../images/Git/image-20220823181204500.png" alt="image-20220823181204500"></p><p>先创建一个仓库，然后复制仓库连接</p><p><img src="/../images/Git/image-20220823181551566.png" alt="image-20220823181551566"></p><h3 id="9-1-Gitee-导入-GitHub-项目"><a href="#9-1-Gitee-导入-GitHub-项目" class="headerlink" title="9.1. Gitee 导入 GitHub 项目"></a>9.1. Gitee 导入 GitHub 项目</h3><p><img src="/../images/Git/image-20220823200253337.png" alt="image-20220823200253337"></p><p><img src="/../images/Git/image-20220823200428727.png" alt="image-20220823200428727"></p><p><img src="/../images/Git/image-20220823200801634.png" alt="image-20220823200801634"></p><h2 id="10-GitLab"><a href="#10-GitLab" class="headerlink" title="10. GitLab"></a>10. GitLab</h2><p>目前我还没有服务器，做不了，以后再更新</p><p><a href="https://about.gitlab.com/">https://about.gitlab.com/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、MyBatis"><a href="#一、MyBatis" class="headerlink" title="一、MyBatis"></a><strong>一、MyBatis</strong></h1><h2 id="1、MyBatis简介"><a href="#1、MyBatis简介" class="headerlink" title="1、MyBatis简介"></a><strong>1、MyBatis简介</strong></h2><h3 id="1-1、MyBatis历史"><a href="#1-1、MyBatis历史" class="headerlink" title="1.1、MyBatis历史"></a><strong>1.1、MyBatis历史</strong></h3><p>MyBatis最初是Apache的一个开源项目<strong>iBatis</strong>, 2010年6月这个项目由Apache Software Foundation迁</p><p>移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于</p><p>2013年11月迁移到Github。</p><p>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架</p><p>包括SQL Maps和Data Access Objects（DAO）。</p><h3 id="1-2、MyBatis特性"><a href="#1-2、MyBatis特性" class="headerlink" title="1.2、MyBatis特性"></a><strong>1.2、MyBatis特性</strong></h3><p>1） MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</p><p>2） MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</p><p>3） MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java</p><p>Objects，普通的Java对象）映射成数据库中的记录</p><p>4） MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><h3 id="1-3、MyBatis下载"><a href="#1-3、MyBatis下载" class="headerlink" title="1.3、MyBatis下载"></a><img src="/SSM%E6%95%B4%E5%90%88.003.jpeg"><strong>1.3、MyBatis下载</strong></h3><p>MyBatis下载地址：<a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p><h3 id="1-4、和其它持久化层技术对比"><a href="#1-4、和其它持久化层技术对比" class="headerlink" title="1.4、和其它持久化层技术对比"></a><strong>1.4、和其它持久化层技术对比</strong></h3><p>JDBC</p><p>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤<br>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见<br>代码冗长，开发效率低</p><p>Hibernate 和 JPA</p><p>操作简便，开发效率高 程序中的长难复杂 SQL 需要绕过框架</p><p>内部自动生产的 SQL，不容易做特殊优化 基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。 反射操作太多，导致数据库性能下降</p><p>MyBatis</p><p>轻量级，性能出色</p><p>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据<br>开发效率稍逊于HIbernate，但是完全能够接受</p><h2 id="2、搭建MyBatis"><a href="#2、搭建MyBatis" class="headerlink" title="2、搭建MyBatis"></a><strong>2、搭建MyBatis</strong></h2><h3 id="2-1、开发环境"><a href="#2-1、开发环境" class="headerlink" title="2.1、开发环境"></a><strong>2.1、开发环境</strong></h3><p>IDE：idea 2019.2</p><p>构建工具：maven 3.5.4</p><p>MySQL版本：MySQL 8</p><p>MyBatis版本：MyBatis 3.5.7</p><p>MySQL不同版本的注意事项</p><p>1、驱动类driver-class-name</p><p>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver</p><p>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver</p><p>2、连接地址url</p><p>MySQL 5版本的url：</p><p>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm</p><p>MySQL 8版本的url：</p><p>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm?serverTimezone&#x3D;UTC</p><p>否则运行测试用例报告如下错误：</p><p>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or<br>represents more</p><h3 id="2-2、创建maven工程"><a href="#2-2、创建maven工程" class="headerlink" title="2.2、创建maven工程"></a><strong>2.2、创建maven工程</strong></h3><h4 id="①打包方式：jar"><a href="#①打包方式：jar" class="headerlink" title="①打包方式：jar"></a><strong>①打包方式：jar</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②引入依赖"><a href="#②引入依赖" class="headerlink" title="②引入依赖"></a><strong>②引入依赖</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3、创建MyBatis的核心配置文件"><a href="#2-3、创建MyBatis的核心配置文件" class="headerlink" title="2.3、创建MyBatis的核心配置文件"></a><strong>2.3、创建MyBatis的核心配置文件</strong></h3><p>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring 之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。</p><p>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</p><p>核心配置文件存放的位置是src&#x2F;main&#x2F;resources目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接数据库的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入mybatis的映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4、创建mapper接口"><a href="#2-4、创建mapper接口" class="headerlink" title="2.4、创建mapper接口"></a><strong>2.4、创建mapper接口</strong></h3><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要 提供实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">//添加用户</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5、创建MyBatis的映射文件"><a href="#2-5、创建MyBatis的映射文件" class="headerlink" title="2.5、创建MyBatis的映射文件"></a><strong>2.5、创建MyBatis的映射文件</strong></h3><p>相关概念：<strong>ORM</strong>（<strong>O</strong>bject <strong>R</strong>elationship <strong>M</strong>apping）对象关系映射。</p><ul><li>对象：Java的实体类对象 </li><li>关系：关系型数据库 </li><li>映射：二者之间的对应关系</li></ul><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段&#x2F;列</td></tr><tr><td>对象</td><td>记录&#x2F;行</td></tr></tbody></table><h4 id="1、映射文件的命名规则："><a href="#1、映射文件的命名规则：" class="headerlink" title="1、映射文件的命名规则："></a>1、映射文件的命名规则：</h4><p>表所对应的实体类的类名+Mapper.xml</p><p>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</p><p>因此一个映射文件对应一个实体类，对应一张表的操作</p><p>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</p><p>MyBatis映射文件存放的位置是src&#x2F;main&#x2F;resources&#x2F;mappers目录下</p><h4 id="2、-MyBatis中可以面向接口操作数据，要保证两个一致："><a href="#2、-MyBatis中可以面向接口操作数据，要保证两个一致：" class="headerlink" title="2、 MyBatis中可以面向接口操作数据，要保证两个一致："></a>2、 MyBatis中可以面向接口操作数据，要保证两个一致：</h4><ul><li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</li></ul><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220806124304029.png" alt="image-20220806124304029"></p><ul><li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li></ul><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220806124619686.png" alt="image-20220806124619686"></p><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220806124650416.png" alt="image-20220806124650416"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zzuli.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user values (null, &#x27;admin&#x27;, &#x27;123456&#x27;, &#x27;23&#x27;, &#x27;男&#x27;, &#x27;pony@qq.com&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220806125215547.png" alt="image-20220806125215547"></p><h3 id="2-6、通过junit测试功能"><a href="#2-6、通过junit测试功能" class="headerlink" title="2.6、通过junit测试功能"></a><strong>2.6、通过junit测试功能</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取核心配置文件的输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获取SqlSessionFactoryBuilder</span></span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="comment">//获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">    <span class="comment">//获取 sql 的会话对象 SqlSession，是 MyBatis 提供的操作数据库的对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//获取UserMapper的代理实现类对象</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">//调用mapper接口方法，实现添加功能</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertUser();</span><br><span class="line">    System.out.println(<span class="string">&quot;结果：&quot;</span> + result);</span><br><span class="line">    <span class="comment">//没有提交事务，默认是回滚的，所以数据库数据没变，要手动提交</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//关闭会话</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SqlSession：代表Java程序和<strong>数据库</strong>之间的<strong>会话</strong>。（HttpSession是Java程序和浏览器之间的 会话）</p><p>SqlSessionFactory：是“生产”SqlSession的“工厂”。 工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的 相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</p><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220806132501797.png" alt="image-20220806132501797"></p><h3 id="2-7、加入log4j日志功能"><a href="#2-7、加入log4j日志功能" class="headerlink" title="2.7、加入log4j日志功能"></a><strong>2.7、加入log4j日志功能</strong></h3><h4 id="①加入依赖"><a href="#①加入依赖" class="headerlink" title="①加入依赖"></a><strong>①加入依赖</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②加入log4j的配置文件"><a href="#②加入log4j的配置文件" class="headerlink" title="②加入log4j的配置文件"></a><strong>②加入log4j的配置文件</strong></h4><p>log4j的配置文件名为log4j.xml，存放的位置是src&#x2F;main&#x2F;resources目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;%m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="日志的级别"><a href="#日志的级别" class="headerlink" title="日志的级别"></a><strong>日志的级别</strong></h4><p>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)</p><p>从左到右打印的内容越来越详细</p><p>设置 WARN(警告)，就会打印 FATAL(致命) ERROR(错误) WARN(警告) 日志信息</p><h3 id="2-8-查询测试"><a href="#2-8-查询测试" class="headerlink" title="2.8 查询测试"></a>2.8 查询测试</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  resultType：设置结果类型，即查询的数据要转化为的 JAVA 类型  </span></span><br><span class="line"><span class="comment">      resultMap：自定义映射，处理一对多或多对一的映射关系</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zzuli.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where id = 3</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220806141840733.png" alt="image-20220806141840733"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getAllUser();--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--查询结果再转化实体类，再放到集合，所以这里还是实体类类型  resultType=&quot;com.zzuli.mybatis.pojo.User&quot;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zzuli.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、核心配置文件详解"><a href="#3、核心配置文件详解" class="headerlink" title="3、核心配置文件详解"></a><strong>3、核心配置文件详解</strong></h2><p>核心配置文件中的标签必须按照固定的顺序：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  mybatis 中的标签必须使用指定的顺序去配置</span></span><br><span class="line"><span class="comment">          The content of element type &quot;configuration&quot; must match &quot;(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)&quot;.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引用properties文件，使用 $&#123;key&#125; 的方式访问 value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  为类设置类型别名  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            alias=&quot;user&quot; 如果不设置，默认就是类名不区分大小写</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.zzuli.mybatis.pojo.User&quot; alias=&quot;user&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过包设置类型别名，指定包下都是默认的别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zzuli.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接数据库的环境--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environments: 配置连接数据库环境</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        default: 设置默认使用环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            environment: 配置一个具体连接数据库环境</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">            id: 设置环境唯一标识，不能重复</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                transactionManager：设置事务管理器</span></span><br><span class="line"><span class="comment">                属性</span></span><br><span class="line"><span class="comment">                type：设置事务管理方式</span></span><br><span class="line"><span class="comment">                属性值</span></span><br><span class="line"><span class="comment">                JDBC：表示使用 JDBC 原生的事务管理方式</span></span><br><span class="line"><span class="comment">                MANAGED：被管理，例如Spring</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                dataSource：设置数据源</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                type：设置数据源的类型</span></span><br><span class="line"><span class="comment">                属性值：</span></span><br><span class="line"><span class="comment">                POOLED；表示使用数据库连接池</span></span><br><span class="line"><span class="comment">                UNPOOLED：表示不使用数据库连接池</span></span><br><span class="line"><span class="comment">                JNDI：表示使用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入mybatis的映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">        以包的形式引入映射文件，但必须满足两个条件    </span></span><br><span class="line"><span class="comment">        1、mapper接口和映射文件所的包必须一致</span></span><br><span class="line"><span class="comment">        2、mapper接口的名字和映射文件的名字必须一致</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zzuli.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 resource 下建包时，要com&#x2F;zzuli.mybatis</p><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220806175805646.png" alt="image-20220806175805646"></p><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220806180011492.png" alt="image-20220806180011492"></p><p>创建配置文件模板</p><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220806181756122.png" alt="image-20220806181756122"></p><h2 id="4、MyBatis的增删改查"><a href="#4、MyBatis的增删改查" class="headerlink" title="4、MyBatis的增删改查"></a><strong>4、MyBatis的增删改查</strong></h2><p><strong>4.1、新增</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">insert into t\_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4.2、删除</strong></p><!--int deleteUser();--><delete id="deleteUser"><p>delete from t_user where id &#x3D; 7</p></delete><p><strong>4.3、修改</strong></p><!--int updateUser();--><update id="updateUser"><p>update t_user set username&#x3D;’ybc’,password&#x3D;’123’ where id &#x3D; 6</p></update><p><strong>4.4、查询一个实体类对象</strong></p><!--User getUserById();--><select id="getUserById" resultType="com.atguigu.mybatis.bean.User"><p>select * from t_user where id &#x3D; 2</p></select><p><strong>4.5、查询list集合</strong></p><!--List<User> getUserList();--><select id="getUserList" resultType="com.atguigu.mybatis.bean.User"><p>select * from t_user</p></select><p>注意：</p><p>1、查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射</p><p>关系</p><p>resultType：自动映射，用于属性名和表中字段名一致的情况</p><p>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</p><h2 id="5、MyBatis获取参数值的两种方式"><a href="#5、MyBatis获取参数值的两种方式" class="headerlink" title="5、MyBatis获取参数值的两种方式"></a><strong>5、MyBatis获取参数值的两种方式</strong></h2><p>MyBatis获取参数值的两种方式：**${}<strong>和</strong>#{}**</p><p>${}的本质就是字符串拼接，#{}的本质就是占位符赋值</p><p>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单 引</p><p>号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时， 可以自</p><p>动添加单引号</p><h4 id="5-1、单个字面量类型的参数"><a href="#5-1、单个字面量类型的参数" class="headerlink" title="5.1、单个字面量类型的参数"></a><strong>5.1、单个字面量类型的参数</strong></h4><p>若mapper接口中的方法参数为单个的字面量类型</p><p>此时可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号</p><p><strong>5.2、多个字面量类型的参数</strong></p><p>若mapper接口中的方法参数为多个时</p><p>此时MyBatis会自动将这些参数放在一个map集合中，以arg0,arg1…为键，以参数为值；以</p><p>param1,param2…为键，以参数为值；因此只需要通过${}和#{}访问map集合的键就可以获取相 对应的</p><p>值，注意${}需要手动加单引号</p><p><strong>5.3、map集合类型的参数</strong></p><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在<br>map中</p><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><p><strong>5.4、实体类类型的参数</strong></p><p>若mapper接口中的方法参数为实体类对象时</p><p>此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</p><p><strong>5.5、使用@Param标识参数</strong></p><p>可以通过@Param注解标识mapper接口中的方法参数</p><p>此时，会将这些参数放在map集合中，以@Param注解的value属性值为键，以参数为值；以</p><p>param1,param2…为键，以参数为值；只需要通过${}和#{}访问map集合的键就可以获取相对应 的值，</p><p>注意${}需要手动加单引号</p><h2 id="6、MyBatis的各种查询功能"><a href="#6、MyBatis的各种查询功能" class="headerlink" title="6、MyBatis的各种查询功能"></a><strong>6、MyBatis的各种查询功能</strong></h2><h4 id="6-1、查询一个实体类对象"><a href="#6-1、查询一个实体类对象" class="headerlink" title="6.1、查询一个实体类对象"></a><strong>6.1、查询一个实体类对象</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 根据用户名查询用户信息</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">User <span class="title function_">getUserByName</span><span class="params">(String Username)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByName(String Username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username = #&#123;username&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#&#123;username&#125; 里的值是可以人一写的，但为了有意义就传什么，写什么--&gt;</span></span><br><span class="line">    select * from t_user where username = &#x27;$&#123;username&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-2、查询一个list集合"><a href="#6-2、查询一个list集合" class="headerlink" title="6.2、查询一个list集合"></a><strong>6.2、查询一个list集合</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有的用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getAllUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当查询的数据为多条时，不能使用实体类作为返回值，否则会抛出异常 TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</p><h4 id="6-3、查询单个数据"><a href="#6-3、查询单个数据" class="headerlink" title="6.3、查询单个数据"></a><strong>6.3、查询单个数据</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询总记录数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> Integer <span class="title function_">getCountUser</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Integer getCountUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCountUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">    select count(*) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resultType&#x3D;”java.lang.Integer” 是类型别名，不区分大小写，INteger， int</p><h4 id="6-4、查询一条数据为map集合"><a href="#6-4、查询一条数据为map集合" class="headerlink" title="6.4、查询一条数据为map集合"></a><strong>6.4、查询一条数据为map集合</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 id 用户信息为 map 集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> Map&lt;String, Object&gt; <span class="title function_">getUserByIdToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserByIdToMap(@Param(&quot;id&quot;) Integer id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByIdToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-5、查询多条数据为map集合"><a href="#6-5、查询多条数据为map集合" class="headerlink" title="6.5、查询多条数据为map集合"></a><strong>6.5、查询多条数据为map集合</strong></h4><h5 id="①方式一"><a href="#①方式一" class="headerlink" title="①方式一"></a><strong>①方式一</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为一个 Map 集合</span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此</span></span><br><span class="line"><span class="comment"> * 时可以将这些map放在一个list集合中获取</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="②方式二"><a href="#②方式二" class="headerlink" title="②方式二"></a><strong>②方式二</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并</span></span><br><span class="line"><span class="comment">且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的</span></span><br><span class="line"><span class="comment">map集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220806232840812.png" alt="image-20220806232840812"></p><h2 id="7、特殊SQL的执行"><a href="#7、特殊SQL的执行" class="headerlink" title="7、特殊SQL的执行"></a><strong>7、特殊SQL的执行</strong></h2><h4 id="7-1、模糊查询"><a href="#7-1、模糊查询" class="headerlink" title="7.1、模糊查询"></a><strong>7.1、模糊查询</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模糊查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mohu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;mohu&quot;) String mohu);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--字符串拼接:concat--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;, #&#123;mohu&#125;, &#x27;%&#x27;)--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--最为常用--&gt;</span></span><br><span class="line">     select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-2、批量删除"><a href="#7-2、批量删除" class="headerlink" title="7.2、批量删除"></a><strong>7.2、批量删除</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteMoreUser</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--void deleteMoreUser(@Param(&quot;ids&quot;) String ids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreUser&quot;</span>&gt;</span></span><br><span class="line">    delete from t_user where id in($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-3、动态设置表名"><a href="#7-3、动态设置表名" class="headerlink" title="7.3、动态设置表名"></a><strong>7.3、动态设置表名</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态设置表名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-4、添加功能获取自增的主键"><a href="#7-4、添加功能获取自增的主键" class="headerlink" title="7.4、添加功能获取自增的主键"></a><strong>7.4、添加功能获取自增的主键</strong></h4><blockquote><p>场景模拟：</p><p>t_clazz(clazz_id,clazz_name)</p><p>t_student(student_id,student_name,clazz_id)</p><p>1、添加班级信息</p><p>2、获取新添加的班级的id</p><p>3、为班级分配学生，即将某学的班级id修改为新添加的班级的id</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过用户信息并获取自增的主键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user);--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  useGeneratedKeys：表示当前添加功能使用了自增的主键</span></span><br><span class="line"><span class="comment">      keyProperty：将添加的数据自增的主键，赋值给参数user的属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;email&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8、自定义映射resultMap"><a href="#8、自定义映射resultMap" class="headerlink" title="8、自定义映射resultMap"></a><strong>8、自定义映射resultMap</strong></h2><h4 id="8-1、resultMap处理字段和属性的映射关系"><a href="#8-1、resultMap处理字段和属性的映射关系" class="headerlink" title="8.1、resultMap处理字段和属性的映射关系"></a><strong>8.1、resultMap处理字段和属性的映射关系</strong></h4><p>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将下划线映射为驼峰，解决字段名和属性名不一致的情况--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Emp getEmpByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    resultMap：设置自定义的映射关系</span></span><br><span class="line"><span class="comment">    id：唯一标识</span></span><br><span class="line"><span class="comment">    type；处理映射关系的实体类的类型</span></span><br><span class="line"><span class="comment">    常用的标签</span></span><br><span class="line"><span class="comment">    id：处理主键和实体类中属性的映射关系</span></span><br><span class="line"><span class="comment">    result：处理主键和实体类中属性的映射关系</span></span><br><span class="line"><span class="comment">        column：设置映射关系中的字段名，必须是 sql 查询出的某个字段</span></span><br><span class="line"><span class="comment">        property：设置映射关系中的属性的属性名，必须是处理的实体类类型中的属性名</span></span><br><span class="line"><span class="comment">    association：设置多对一的映射关系</span></span><br><span class="line"><span class="comment">    collection：设置一对多的映射关系</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEmpId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where emp_id = #&#123;empId&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  自定义映射  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEmpDoId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--字段名和属性名不一致，为字段名起别名和属性名保持一致--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select emp_id empId, emp_name empName, age, gender, dept_id deptId from t_emp where emp_id = #&#123;empId&#125;;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当字段名符合Mysql的要求使用下划线，而属性符合java的要求使用驼峰</span></span><br><span class="line"><span class="comment">        例：字段名 emp_id 属性名 empId</span></span><br><span class="line"><span class="comment">        此时可以在mybatis的核心配置文件中设置一个全局配置，可以自动将下划线映射为驼峰</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_emp where emp_id = #&#123;empId&#125;;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性<br>名符合Java的规则（使用驼峰）</p><p>此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系</p><p>a&gt;可以通过为字段起别名的方式，保证和实体类中的属性名保持一致</p><p>b&gt;可以在MyBatis的核心配置文件中设置一个全局配置信息mapUnderscoreToCamelCase，可<br>以在查询表中数据时，自动将_类型的字段名转换为驼峰</p><p>例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为</p><p>userName</p><h4 id="8-2、多对一映射处理"><a href="#8-2、多对一映射处理" class="headerlink" title="8.2、多对一映射处理"></a><strong>8.2、多对一映射处理</strong></h4><p>场景模拟：</p><p>查询员工信息以及员工所对应的部门信息</p><h5 id="8-2-1、级联方式处理映射关系"><a href="#8-2-1、级联方式处理映射关系" class="headerlink" title="8.2.1、级联方式处理映射关系"></a><strong>8.2.1、级联方式处理映射关系</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByEmpId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMap&quot;</span>&gt;</span></span><br><span class="line">    select t_emp.*, t_dept.*</span><br><span class="line">    from t_emp</span><br><span class="line">    left JOIN t_dept on t_emp.dept_id = t_dept.dept_id</span><br><span class="line">    where t_emp.emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--级联处理多对一关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="8-2-2、使用association处理映射关系"><a href="#8-2-2、使用association处理映射关系" class="headerlink" title="8.2.2、使用association处理映射关系"></a><strong>8.2.2、使用association处理映射关系</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByEmpId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMap&quot;</span>&gt;</span></span><br><span class="line">    select t_emp.*, t_dept.*</span><br><span class="line">    from t_emp</span><br><span class="line">    left JOIN t_dept on t_emp.dept_id = t_dept.dept_id</span><br><span class="line">    where t_emp.emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  association：处理多对一的映射关系（处理实体类的属性）</span></span><br><span class="line"><span class="comment">      property：设置需要处理映射关系的属性的属性名</span></span><br><span class="line"><span class="comment">      javaType：设置要处理的属性的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="8-2-3、分步查询"><a href="#8-2-3、分步查询" class="headerlink" title="8.2.3、分步查询"></a><strong>8.2.3、分步查询</strong></h5><h6 id="①查询员工信息"><a href="#①查询员工信息" class="headerlink" title="①查询员工信息"></a><strong>①查询员工信息</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布查询员工信息以及部门信息 的 第一步</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> empId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;empId&quot;)</span> Integer empId)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   property；设置需要处理映射关系的属性的属性名</span></span><br><span class="line"><span class="comment">           select：设置分步查询sql的唯一标识</span></span><br><span class="line"><span class="comment">           column：将查询出的某个字段作为分步查询的sql的条件</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;com.zzuli.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>②根据员工所对应的部门id查询部门信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分布查询员工信息以及部门信息 的 第二步</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deptId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  Emp getEmpAndDeptByStepTwo(@Param(&quot;deptId&quot;) Integer deptId);  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept where dept_id = #&#123;deptId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-3、一对多映射处理"><a href="#8-3、一对多映射处理" class="headerlink" title="8.3、一对多映射处理"></a><strong>8.3、一对多映射处理</strong></h4><h5 id="8-3-1、collection"><a href="#8-3-1、collection" class="headerlink" title="8.3.1、collection"></a><strong>8.3.1、collection</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询 部门信息 以及 员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmpByDeptId</span><span class="params">(<span class="meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理一对多关系</span></span><br><span class="line"><span class="comment">    1.collection：</span></span><br><span class="line"><span class="comment">        ofType：设置集合类型的属性中存储的数据的类型</span></span><br><span class="line"><span class="comment">    2.分布查询</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  Dept getDeptAndEmpByDeptId(@Param(&quot;deptId&quot;) Integer deptId);  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByDeptId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">    select t_dept.*, t_emp.*</span><br><span class="line">    from t_dept</span><br><span class="line">    join t_emp on t_dept.dept_id = t_emp.dept_id</span><br><span class="line">    where t_emp.emp_id = #&#123;deptId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="8-3-2、分步查询"><a href="#8-3-2、分步查询" class="headerlink" title="8.3.2、分步查询"></a><strong>8.3.2、分步查询</strong></h5><p><strong>①查询部门信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布查询 部门信息 以及 员工信息 第一步</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  Dept getDeptAndEmpByStepOne(@Param(&quot;deptId&quot;) Integer deptId);  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptAndEmpResultMapByStep&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept where dept_id = #&#123;deptId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptAndEmpResultMapByStep&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.zzuli.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>②根据部门id查询部门中的所有员工</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布查询 部门信息 以及 员工信息 第二步</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where dept_id = #&#123;deptId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>分步查询的优点：可以实现延迟加载</p><p>但是必须在核心配置文件中设置全局配置信息：</p><p>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载</p><p>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属 性会按需加载</p><p>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和<br>collection中的fetchType属性设置当前的分步查询是否使用延迟加载， fetchType&#x3D;”lazy(延迟加<br>载)|eager(立即加载)”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">select</span>=<span class="string">&quot;com.zzuli.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="9、动态SQL"><a href="#9、动态SQL" class="headerlink" title="9、动态SQL"></a><strong>9、动态SQL</strong></h2><p>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了<br>解决 拼接SQL语句字符串时的痛点问题。</p><h3 id="9-1、if"><a href="#9-1、if" class="headerlink" title="9.1、if"></a><strong>9.1、if</strong></h3><p>if标签可通过test属性的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之 标签中的内容不会执行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--防止sql语句出错，可以在where后加一个恒成立的条件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp where 1=1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName !=null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and emp_name = #&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age !=null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender !=null and gender !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and gender = #&#123;gender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-2、where"><a href="#9-2、where" class="headerlink" title="9.2、where"></a><strong>9.2、where</strong></h3><p>where和if一般结合使用：</p><p>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字</p><p>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的<br>and去掉</p><p>注意：where标签不能去掉条件最后多余的and</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select * from t_emp where</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName !=null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        emp_name = #&#123;empName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age !=null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and age = #&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender !=null and gender !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and gender = #&#123;gender&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-3、trim"><a href="#9-3、trim" class="headerlink" title="9.3、trim"></a><strong>9.3、trim</strong></h3><p>trim用于去掉或添加标签中的内容</p><p>常用属性：</p><p>prefix：在trim标签中的内容的前面添加某些内容</p><p>prefixOverrides：在trim标签中的内容的前面去掉某些内容</p><p>suffix：在trim标签中的内容的后面添加某些内容</p><p>suffixOverrides：在trim标签中的内容的后面去掉某些内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName !=null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            emp_name = #&#123;empName&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age !=null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender !=null and gender !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            gender = #&#123;gender&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-4、choose、when、otherwise"><a href="#9-4、choose、when、otherwise" class="headerlink" title="9.4、choose、when、otherwise"></a><strong>9.4、choose、when、otherwise</strong></h3><p>choose、when、 otherwise相当于if…else if..else</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  List&lt;Emp&gt; getEmpByChoose(Emp emp);  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                emp_name = #&#123;empName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                age = #&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                gender = #&#123;gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-5、foreach"><a href="#9-5、foreach" class="headerlink" title="9.5、foreach"></a><strong>9.5、foreach</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertMoreEmp(List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreEmp&quot;</span>&gt;</span></span><br><span class="line">    insert into t_emp values</span><br><span class="line">    <span class="comment">&lt;!--separator=&quot;,&quot; : 分隔符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.gender&#125;,null)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreEmp&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        delete from t_emp where emp_id in--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;foreach collection=&quot;empIds&quot; item=&quot;empId&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            #&#123;empId&#125;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/foreach&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        delete from t_emp where</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;empId&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            emp_id = #&#123;empId&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-6、SQL片段"><a href="#9-6、SQL片段" class="headerlink" title="9.6、SQL片段"></a><strong>9.6、SQL片段</strong></h3><p>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span></span><br><span class="line">    emp_id,emp_name,age,gender,dept_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br></pre></td></tr></table></figure><h2 id="10、MyBatis的缓存"><a href="#10、MyBatis的缓存" class="headerlink" title="10、MyBatis的缓存"></a><strong>10、MyBatis的缓存</strong></h2><h3 id="10-1、MyBatis的一级缓存"><a href="#10-1、MyBatis的一级缓存" class="headerlink" title="10.1、MyBatis的一级缓存"></a><strong>10.1、MyBatis的一级缓存</strong></h3><p>默认是开启</p><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就 会从缓存中直接获取，不会从数据库重新访问</p><p>使一级缓存失效的四种情况：</p><p>（1）不同的SqlSession对应不同的一级缓存</p><p>（2）同一个SqlSession但是查询条件不同</p><p>（3）同一个SqlSession两次查询期间执行了任何一次增删改操作（回清空缓存）</p><p>（4）同一个SqlSession两次查询期间手动清空了缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.clearCache();</span><br></pre></td></tr></table></figure><h3 id="10-2、MyBatis的二级缓存"><a href="#10-2、MyBatis的二级缓存" class="headerlink" title="10.2、MyBatis的二级缓存"></a><strong>10.2、MyBatis的二级缓存</strong></h3><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被 缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p><p>二级缓存开启的条件：</p><p>a&gt;在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置</p><p>b&gt;在映射文件中设置标签<cache/></p><p>c&gt;二级缓存必须在SqlSession关闭或提交之后有效（默认保存在一级缓存）</p><p>d&gt;查询的数据所转换的实体类类型必须实现序列化的接口</p><p>使二级缓存失效的情况：</p><p>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSessionFactory.clearCache(); <span class="comment">//只会使一级缓存失效二级不会</span></span><br></pre></td></tr></table></figure><h3 id="10-3、二级缓存的相关配置"><a href="#10-3、二级缓存的相关配置" class="headerlink" title="10.3、二级缓存的相关配置"></a><strong>10.3、二级缓存的相关配置</strong></h3><p>在mapper配置文件中添加的cache标签可以设置一些属性：</p><p>①eviction属性：缓存回收策略，默认的是 LRU。</p><p>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。</p><p>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。</p><p>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</p><p>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</p><p>②flushInterval属性：刷新间隔，单位毫秒</p><p>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</p><p>③size属性：引用数目，正整数</p><p>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</p><p>④readOnly属性：只读， true&#x2F;false</p><p>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了 很重 要的性能优势。</p><p>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是<br>false。</p><h3 id="10-4、MyBatis缓存查询的顺序"><a href="#10-4、MyBatis缓存查询的顺序" class="headerlink" title="10.4、MyBatis缓存查询的顺序"></a><strong>10.4、MyBatis缓存查询的顺序</strong></h3><p>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。</p><p>如果二级缓存没有命中，再查询一级缓存</p><p>如果一级缓存也没有命中，则查询数据库</p><p>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</p><h3 id="10-5、整合第三方缓存EHCache"><a href="#10-5、整合第三方缓存EHCache" class="headerlink" title="10.5、整合第三方缓存EHCache"></a><strong>10.5、整合第三方缓存EHCache</strong></h3><p>对于 mybatis 二级缓存 可以使用第三方的缓存</p><h4 id="10-5-1、添加依赖"><a href="#10-5-1、添加依赖" class="headerlink" title="10.5.1、添加依赖"></a><strong>10.5.1、添加依赖</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-5-2、各jar包功能"><a href="#10-5-2、各jar包功能" class="headerlink" title="10.5.2、各jar包功能"></a><strong>10.5.2、各jar包功能</strong></h4><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><h4 id="10-5-3、创建EHCache的配置文件ehcache-xml"><a href="#10-5-3、创建EHCache的配置文件ehcache-xml" class="headerlink" title="10.5.3、创建EHCache的配置文件ehcache.xml"></a><strong>10.5.3、创建EHCache的配置文件ehcache.xml</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-5-4、设置二级缓存的类型"><a href="#10-5-4、设置二级缓存的类型" class="headerlink" title="10.5.4、设置二级缓存的类型"></a><strong>10.5.4、设置二级缓存的类型</strong></h4><cache type="org.mybatis.caches.ehcache.EhcacheCache"/><h4 id="10-5-5、加入logback日志"><a href="#10-5-5、加入logback日志" class="headerlink" title="10.5.5、加入logback日志"></a><strong>10.5.5、加入logback日志</strong></h4><p>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日<br>志。 创建logback的配置文件logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按照顺序分别是： 时间、日志级别、线程名称、打印日志的类、日志主体内容、换行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger]</span><br><span class="line">[%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是： DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-5-6、EHCache配置文件说明"><a href="#10-5-6、EHCache配置文件说明" class="headerlink" title="10.5.6、EHCache配置文件说明"></a><strong>10.5.6、EHCache配置文件说明</strong></h4><p><strong>是</strong></p><table><thead><tr><th align="left"></th><th align="left"><strong>属性名</strong></th><th align="left"></th><th align="left"><p><strong>否</strong></p><p><strong>必</strong></p><p><strong>须</strong></p></th><th align="left"></th><th align="left"><strong>作用</strong></th></tr></thead><tbody><tr><td align="left">maxElementsInMemory 是 在内存中缓存的element的最大数目</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="left"></th><th align="left">maxElementsOnDisk 是</th><th align="left"></th><th align="left"><p>在磁盘上缓存的element的最大数目，若是0表示无</p><p>穷大</p></th></tr></thead><tbody><tr><td align="left">设定缓存的elements是否永远不过期。 如果为</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="left"></th><th align="left">eternal 是</th><th align="left"></th><th align="left"><p>true，则缓存的数据始终有效， 如果为false那么还</p><p>要根据timeToIdleSeconds、timeToLiveSeconds</p><p>判断</p></th></tr></thead><tbody><tr><td align="left"></td><td align="left">overflowToDisk 是</td><td align="left"></td><td align="left"><p>设定当内存缓存溢出的时候是否将过期的element</p><p>缓存到磁盘上</p></td></tr><tr><td align="left"><code> </code>当缓存在EhCache中的数据前后两次访问的时间超</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">timeToIdleSeconds 否 过timeToIdleSeconds的属性取值时， 这些数据便</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">会删除，默认值是0,也就是可闲置时间无穷大</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="left"></th><th align="left">timeToLiveSeconds 否</th><th align="left"></th><th align="left"><p>缓存element的有效生命期，默认是0.,也就是</p><p>element存活时间无穷大</p></th></tr></thead><tbody><tr><td align="left"></td><td align="left">diskSpoolBufferSizeMB 否</td><td align="left"></td><td align="left"><p>DiskStore(磁盘缓存)的缓存区大小。默认是</p><p>30MB。每个Cache都应该有自己的一个缓冲区</p></td></tr><tr><td align="left"></td><td align="left">diskPersistent 否</td><td align="left"></td><td align="left"><p>在VM重启的时候是否启用磁盘保存EhCache中的数</p><p>据，默认是false。</p></td></tr><tr><td align="left"></td><td align="left">diskExpiryThreadIntervalSeconds 否</td><td align="left"></td><td align="left"><p>磁盘缓存的清理线程运行间隔，默认是120秒。每</p><p>个120s， 相应的线程会进行一次EhCache中数据的</p><p>清理工作</p></td></tr><tr><td align="left"></td><td align="left">memoryStoreEvictionPolicy 否</td><td align="left"></td><td align="left"><p>当内存缓存达到最大，有新的element加入的时</p><p>候， 移除缓存中element的策略。 默认是LRU （最</p><p>近最少使用），可选的有LFU （最不常使用）和</p><p>FIFO （先进先出）</p></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h3 id="11、MyBatis的逆向工程"><a href="#11、MyBatis的逆向工程" class="headerlink" title="11、MyBatis的逆向工程"></a><strong>11、MyBatis的逆向工程</strong></h3><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。 Hibernate是支持正向工 程的。</p><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：</p><p>Java实体类 Mapper接口 Mapper映射文件</p><h4 id="11-1、创建逆向工程的步骤"><a href="#11-1、创建逆向工程的步骤" class="headerlink" title="11.1、创建逆向工程的步骤"></a><strong>11.1、创建逆向工程的步骤</strong></h4><h5 id="①添加依赖和插件"><a href="#①添加依赖和插件" class="headerlink" title="①添加依赖和插件"></a><strong>①添加依赖和插件</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="②创建MyBatis的核心配置文件"><a href="#②创建MyBatis的核心配置文件" class="headerlink" title="②创建MyBatis的核心配置文件"></a><strong>②创建MyBatis的核心配置文件</strong></h5><h5 id="③创建逆向工程的配置文件"><a href="#③创建逆向工程的配置文件" class="headerlink" title="③创建逆向工程的配置文件"></a><strong>③创建逆向工程的配置文件</strong></h5><p>文件名必须是：generatorConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config\_1\_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">        MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">        MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.zzuli.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.zzuli.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.zzuli.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="④执行MBG插件的generate目标"><a href="#④执行MBG插件的generate目标" class="headerlink" title="④执行MBG插件的generate目标"></a><strong>④执行MBG插件的generate目标</strong></h5><p>双击两下插件，即可生成</p><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220809182433231.png" alt="image-20220809182433231"></p><h5 id="⑤效果"><a href="#⑤效果" class="headerlink" title="⑤效果"></a><strong>⑤效果</strong></h5><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">debug, stdout, R</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Pattern to output the caller&#x27;s file name and line number.</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] (%F:%L) - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log4j.appender.R</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.R.File</span>=<span class="string">example.log</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log4j.appender.R.MaxFileSize</span>=<span class="string">100KB</span></span><br><span class="line"><span class="comment"># Keep one backup file</span></span><br><span class="line"><span class="attr">log4j.appender.R.MaxBackupIndex</span>=<span class="string">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log4j.appender.R.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.R.layout.ConversionPattern</span>=<span class="string">%p %t %c - %m%n</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    <span class="type">EmpExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line">    EmpExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> example.createCriteria();<span class="comment">//创建条件对象</span></span><br><span class="line">    EmpExample.<span class="type">Criteria</span> <span class="variable">to</span> <span class="operator">=</span> criteria.andGenderEqualTo(<span class="string">&quot;男&quot;</span>);<span class="comment">//性别等于谁</span></span><br><span class="line">    List&lt;Emp&gt; emp = mapper.selectByExample(example);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>11.2、QBC查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="comment">//查询所有数据</span></span><br><span class="line">/\*List&lt;Emp&gt; list = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">list.forEach(emp -&gt; System.out.println(emp));\*/</span><br><span class="line"><span class="comment">//根据条件查询</span></span><br><span class="line">/\*<span class="type">EmpExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line">example.createCriteria().andEmpNameEqualTo(<span class="string">&quot;张</span></span><br><span class="line"><span class="string">三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="number">20</span>);</span><br><span class="line">example.or().andDidIsNotNull();</span><br><span class="line">List&lt;Emp&gt; list = mapper.selectByExample(example);</span><br><span class="line">list.forEach(emp -&gt; System.out.println(emp));\*/</span><br><span class="line">mapper.updateByPrimaryKeySelective(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">Emp</span>(<span class="number">1</span>,<span class="string">&quot;admin&quot;</span>,<span class="number">22</span>,<span class="literal">null</span>,<span class="string">&quot;456@qq.com&quot;</span>,<span class="number">3</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12、分页插件"><a href="#12、分页插件" class="headerlink" title="12、分页插件"></a><strong>12、分页插件</strong></h3><p>limit index,pageSize</p><p>pageSize：每页显示的条数</p><p>pageNum：当前页的页码</p><p>index：当前页的起始索引，index&#x3D;(pageNum-1)*pageSize</p><p>count：总记录数</p><p>totalPage：总页数</p><p>totalPage &#x3D; count &#x2F; pageSize;</p><p>if(count % pageSize !&#x3D; 0){</p><p>totalPage +&#x3D; 1;</p><p>}</p><p>pageSize&#x3D;4，pageNum&#x3D;1，index&#x3D;0 limit 0,4</p><p>pageSize&#x3D;4，pageNum&#x3D;3，index&#x3D;8 limit 8,4</p><p>pageSize&#x3D;4，pageNum&#x3D;6，index&#x3D;20 limit 8,4</p><p><a>首页</a> <a>上一页</a> <a>1</a> <a>2</a>  <a>3</a>  <a>下一页</a> <a>末页</a></p><h4 id="12-1、分页插件的使用步骤"><a href="#12-1、分页插件的使用步骤" class="headerlink" title="12.1、分页插件的使用步骤"></a><strong>12.1、分页插件的使用步骤</strong></h4><h5 id="①添加依赖"><a href="#①添加依赖" class="headerlink" title="①添加依赖"></a><strong>①添加依赖</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="②配置分页插件"><a href="#②配置分页插件" class="headerlink" title="②配置分页插件"></a><strong>②配置分页插件</strong></h5><p>在MyBatis的核心配置文件中配置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="12-2、分页插件的使用"><a href="#12-2、分页插件的使用" class="headerlink" title="12.2、分页插件的使用"></a><strong>12.2、分页插件的使用</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    <span class="comment">//查询之前开启分页功能</span></span><br><span class="line">    Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    List&lt;Emp&gt; list = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">    <span class="comment">//在查询数据之后，可以获取分页相关数据</span></span><br><span class="line">    System.out.println(page);</span><br><span class="line">    PageInfo&lt;Emp&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(list, <span class="number">5</span>);</span><br><span class="line">    System.out.println(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a&gt;在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能</p><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p><p>b&gt;在查询获取list集合之后，使用PageInfo<T> pageInfo &#x3D; new PageInfo&lt;&gt;(List<T> list, int<br>navigatePages)获取分页相关数据</p><p>list：分页之后的数据</p><p>navigatePages：导航分页的页码数</p><p>c&gt;分页相关数据</p><p>PageInfo{</p><p>pageNum&#x3D;8, pageSize&#x3D;4, size&#x3D;2, startRow&#x3D;29, endRow&#x3D;30, total&#x3D;30, pages&#x3D;8,</p><p>list&#x3D;Page{count&#x3D;true, pageNum&#x3D;8, pageSize&#x3D;4, startRow&#x3D;28, endRow&#x3D;32, total&#x3D;30,</p><p>pages&#x3D;8, reasonable&#x3D;false, pageSizeZero&#x3D;false},</p><p>prePage&#x3D;7, nextPage&#x3D;0, isFirstPage&#x3D;false, isLastPage&#x3D;true, hasPreviousPage&#x3D;true,</p><p>hasNextPage&#x3D;false, navigatePages&#x3D;5, navigateFirstPage4, navigateLastPage8,</p><p>navigatepageNums&#x3D;[4, 5, 6, 7, 8]</p><p>}</p><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p><p>size：当前页显示的真实条数</p><p>total：总记录数</p><p>pages：总页数</p><p>prePage：上一页的页码</p><p>nextPage：下一页的页码</p><p>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页</p><p>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页</p><p>navigatePages：导航分页的页码数</p><p>navigatepageNums：导航分页的页码，[1,2,3,4,5]</p><p><strong>二、Spring</strong></p><p><strong>1、Spring简介</strong></p><p><strong>1.1、Spring概述</strong></p><p>官网地址：<a href="https://spring.io/">https://spring.io/</a></p><p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用<br>Spring 框架来创建性能好、易于测试、可重用的代码。</p><p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首<br>次在 Apache 2.0 许可下发布。</p><p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应<br>用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO<br>编程模型来促进良好的编程实践。</p><p><strong>1.2、Spring家族</strong></p><p>项目列表：<a href="https://spring.io/projects">https://spring.io/projects</a></p><p><strong>1.3、Spring Framework</strong></p><p>Spring 基础框架，可以视为 Spring 基础设施，基本上任何其他 Spring 项目都是以 Spring Framework 为基础的。</p><p><strong>1.3.1、Spring Framework特性</strong></p><p>非侵入式：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常<br>小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会<br>破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序<br>时结构清晰、简洁优雅。</p><p>控制反转：IOC——Inversion of Control，翻转资源获取方向。把自己创建资源、向环境索取资源 变成环境将资源准备好，我们享受资源注入。</p><p>面向切面编程：AOP——Aspect Oriented Programming，在不修改源代码的基础上增强代码功 能。</p><p>容器：Spring IOC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化<br>的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发<br>效率。</p><p>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML<br>和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭<br>建超大型复杂应用系统。 声明式：很多以前需要编写代码才能实现的功能，现在只需要声明需求即可由框架代为实现。<br>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且<br>Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基<br>础上全部使用 Spring 来实现。</p><p><strong>1.3.2、Spring Framework五大功能模块</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.031.jpeg"><strong>功能模块 功能介绍</strong></p><p>Core Container 核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</p><p>AOP&amp;Aspects 面向切面编程</p><p>Testing 提供了对 junit 或 TestNG 测试框架的整合。</p><p>Data Access&#x2F;Integration 提供了对数据访问&#x2F;集成的功能。</p><p>Spring MVC 提供了面向Web应用程序的集成功能。</p><p><strong>2、IOC</strong></p><p><strong>2.1、IOC容器</strong></p><p><strong>2.1.1、IOC思想</strong></p><p>IOC：Inversion of Control，翻译过来是<strong>反转控制</strong>。</p><p><strong>①获取资源的传统方式</strong></p><p>自己做饭：买菜、洗菜、择菜、改刀、炒菜，全过程参与，费时费力，必须清楚了解资源创建整个过程<br>中的全部细节且熟练掌握。</p><p>在应用程序中的组件需要获取资源时，传统的方式是组件<strong>主动</strong>的从容器中获取所需要的资源，在这样的 模式下开发人员往往需要知道在具体容器中特定资源的获取方式，增加了学习成本，同时降低了开发效<br>率。</p><p><strong>②反转控制方式获取资源</strong></p><p>点外卖：下单、等、吃，省时省力，不必关心资源创建过程的所有细节。</p><p>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主<br>动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源<br>的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的<strong>被动</strong>形式。</p><p><strong>③DI</strong></p><p>DI：Dependency Injection，翻译过来是<strong>依赖注入</strong>。</p><p>DI 是 IOC 的另一种表述方式：即组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器<br>的资源注入。相对于IOC而言，这种表述更直接。</p><p>所以结论是：IOC 就是一种反转控制的思想， 而 DI 是对 IOC 的一种具体实现。</p><p><strong>2.1.2、IOC容器在Spring中的实现</strong></p><p>Spring 的 IOC 容器就是 IOC 思想的一个落地的产品实现。IOC 容器中管理的组件也叫做 bean。在创建<br>bean 之前，首先需要创建 IOC 容器。Spring 提供了 IOC 容器的两种实现方式：</p><p><strong>①BeanFactory</strong></p><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p><p><strong>②ApplicationContext</strong></p><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用<br>ApplicationContext 而不是底层的 BeanFactory。</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.032.jpeg"><strong>③ApplicationContext的主要实现类</strong></p><p><strong>类型名 简介</strong></p><table><thead><tr><th align="left"></th><th align="left">ClassPathXmlApplicationContext</th><th align="left"></th><th align="left"><p>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器</p><p>对象</p></th></tr></thead><tbody><tr><td align="left"></td><td align="left">FileSystemXmlApplicationContext</td><td align="left"></td><td align="left"><p>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容</p><p>器对象</p></td></tr><tr><td align="left"></td><td align="left">ConfigurableApplicationContext</td><td align="left"></td><td align="left"><p>ApplicationContext 的子接口，包含一些扩展方法</p><p>refresh() 和 close() ，让 ApplicationContext 具有启动、</p><p>关闭和刷新上下文的能力。</p></td></tr><tr><td align="left"></td><td align="left">WebApplicationContext</td><td align="left"></td><td align="left"><p>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对</p><p>象，并将对象引入存入 ServletContext 域中。</p></td></tr><tr><td align="left"><strong>2.2、基于XML管理bean</strong></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><p><strong>2.2.1、实验一：入门案例</strong></p><p><strong>①创建Maven Module</strong></p><p><strong>②引入依赖</strong></p><dependencies><!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --><dependency><p><groupId>org.springframework</groupId></p><p><artifactId>spring-context</artifactId></p><p><version>5.3.1</version></p></dependency><!-- junit测试 --><dependency><p><groupId>junit</groupId></p><p><artifactId>junit</artifactId></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.033.jpeg"><version>4.12</version></p><p><scope>test</scope></p></dependency></dependencies><p><strong>③创建类HelloWorld</strong></p><p>public class HelloWorld {</p><p>public void sayHello(){</p><p>System.out.println(“helloworld”);</p><p>}</p><p>}</p><p><strong>④创建Spring的配置文件</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.034.jpeg"><strong>⑤在Spring的配置文件中配置bean</strong></p><!--配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理通过bean标签配置IOC容器所管理的bean属性：id：设置bean的唯一标识class：设置bean所对应类型的全类名--><p><bean id="helloworld" class="com.atguigu.spring.bean.HelloWorld"></bean></p><p><strong>⑥创建测试类测试</strong></p><p>@Test</p><p>public void testHelloWorld(){</p><p>ApplicationContext ac &#x3D; new</p><p>ClassPathXmlApplicationContext(“applicationContext.xml”);</p><p>HelloWorld helloworld &#x3D; (HelloWorld) ac.getBean(“helloworld”);</p><p>helloworld.sayHello();</p><p>}</p><p><strong>⑦思路</strong></p><p><strong>⑧注意</strong></p><p>Spring 底层默认通过反射技术调用组件类的无参构造器来创建组件对象，这一点需要注意。如果在需要 无参构造器时，没有无参构造器，则会抛出下面的异常：</p><p>org.springframework.beans.factory.BeanCreationException: Error creating bean with name<br>‘helloworld’ defined in class path resource [applicationContext.xml]: Instantiation of bean<br>failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed<br>to instantiate [com.atguigu.spring.bean.HelloWorld]: No default constructor found; nested<br>exception is java.lang.NoSuchMethodException: com.atguigu.spring.bean.HelloWorld.<init><br>()</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.035.jpeg"><strong>2.2.2、实验二：获取bean</strong></p><p><strong>①方式一：根据id获取</strong></p><p>由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象。 上个实验中我们使用的就是这种方式。</p><p><strong>②方式二：根据类型获取</strong></p><p>@Test</p><p>public void testHelloWorld(){</p><p>ApplicationContext ac &#x3D; new</p><p>ClassPathXmlApplicationContext(“applicationContext.xml”);</p><p>HelloWorld bean &#x3D; ac.getBean(HelloWorld.class);</p><p>bean.sayHello();</p><p>}</p><p><strong>③方式三：根据id和类型</strong></p><p>@Test</p><p>public void testHelloWorld(){</p><p>ApplicationContext ac &#x3D; new</p><p>ClassPathXmlApplicationContext(“applicationContext.xml”);</p><p>HelloWorld bean &#x3D; ac.getBean(“helloworld”, HelloWorld.class);</p><p>bean.sayHello();</p><p>}</p><p><strong>④注意</strong></p><p>当根据类型获取bean时，要求IOC容器中指定类型的bean有且只能有一个</p><p>当IOC容器中一共配置了两个：</p><p><bean id="helloworldOne" class="com.atguigu.spring.bean.HelloWorld"></bean></p><p><bean id="helloworldTwo" class="com.atguigu.spring.bean.HelloWorld"></bean></p><p>根据类型获取时会抛出异常：</p><p>org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean<br>of type ‘com.atguigu.spring.bean.HelloWorld’ available: expected single matching bean but<br>found 2: helloworldOne,helloworldTwo</p><p><strong>⑤扩展</strong></p><p>如果组件类实现了接口，根据接口类型可以获取 bean 吗？</p><p>可以，前提是bean唯一</p><p>如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？</p><p>不行，因为bean不唯一</p><p><strong>⑥结论</strong></p><p>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 <strong>instanceof</strong> 指定的类<br>型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。</p><p><strong>2.2.3、实验三：依赖注入之setter注入</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.036.jpeg"><strong>①创建学生类Student</strong></p><p>public class Student {</p><p>private Integer id;</p><p>private String name;</p><p>private Integer age;</p><p>private String sex;</p><p>public Student() {</p><p>}</p><p>public Integer getId() {</p><p>return id;</p><p>}</p><p>public void setId(Integer id) {</p><p>this.id &#x3D; id;</p><p>}</p><p>public String getName() {</p><p>return name;</p><p>}</p><p>public void setName(String name) {</p><p>this.name &#x3D; name;</p><p>}</p><p>public Integer getAge() {</p><p>return age;</p><p>}</p><p>public void setAge(Integer age) {</p><p>this.age &#x3D; age;</p><p>}</p><p>public String getSex() {</p><p>return sex;</p><p>}</p><p>public void setSex(String sex) {</p><p>this.sex &#x3D; sex;</p><p>}</p><p>@Override</p><p>public String toString() {</p><p>return “Student{“ +</p><p>“id&#x3D;” + id +</p><p>“, name&#x3D;’” + name + ‘&#39;‘ +</p><p>“, age&#x3D;” + age +</p><p>“, sex&#x3D;’” + sex + ‘&#39;‘ +</p><p>‘}’;</p><p>}</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.037.jpeg">}</p><p><strong>②配置bean时为属性赋值</strong></p><bean id="studentOne" class="com.atguigu.spring.bean.Student"><!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --><!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关）--><!-- value属性：指定属性值 --><p><property name="id" value="1001"></property></p><p><property name="name" value="张三"></property></p><p><property name="age" value="23"></property></p><p><property name="sex" value="男"></property></p></bean><p><strong>③测试</strong></p><p>@Test</p><p>public void testDIBySet(){</p><p>ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“spring-di.xml”);</p><p>Student studentOne &#x3D; ac.getBean(“studentOne”, Student.class);</p><p>System.out.println(studentOne);</p><p>}</p><p><strong>2.2.4、实验四：依赖注入之构造器注入</strong></p><p><strong>①在Student类中添加有参构造</strong></p><p>public Student(Integer id, String name, Integer age, String sex) {</p><p>this.id &#x3D; id;</p><p>this.name &#x3D; name;</p><p>this.age &#x3D; age;</p><p>this.sex &#x3D; sex;</p><p>}</p><p><strong>②配置bean</strong></p><bean id="studentTwo" class="com.atguigu.spring.bean.Student"><p><constructor-arg value="1002"></constructor-arg></p><p><constructor-arg value="李四"></constructor-arg></p><p><constructor-arg value="33"></constructor-arg></p><p><constructor-arg value="女"></constructor-arg></p></bean><p>注意：</p><p>constructor-arg标签还有两个属性可以进一步描述构造器参数：</p><p>index属性：指定参数所在位置的索引（从0开始）<br>name属性：指定参数名</p><p><strong>③测试</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.038.jpeg">@Test</p><p>public void testDIBySet(){</p><p>ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“spring-di.xml”);</p><p>Student studentOne &#x3D; ac.getBean(“studentTwo”, Student.class);</p><p>System.out.println(studentOne);</p><p>}</p><p><strong>2.2.5、实验五：特殊值处理</strong></p><p><strong>①字面量赋值</strong></p><p>什么是字面量？</p><p>int a &#x3D; 10;</p><p>声明一个变量a，初始化为10，此时a就不代表字母a了，而是作为一个变量的名字。当我们引用a<br>的时候，我们实际上拿到的值是10。</p><p>而如果a是带引号的：’a’，那么它现在不是一个变量，它就是代表a这个字母本身，这就是字面 量。所以字面量没有引申含义，就是我们看到的这个数据本身。</p><!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 --><property name="name" value="张三"/><p><strong>②null值</strong></p><property name="name"><null /></property><p>注意：</p><p><property name="name" value="null"></property></p><p>以上写法，为name所赋的值是字符串null</p><p><strong>③xml实体</strong></p><!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --><!-- 解决方案一：使用XML实体来代替 --><property name="expression" value="a &lt; b"/><p><strong>④CDATA节</strong></p><property name="expression"><!-- 解决方案二：使用CDATA节 --><!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --><!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --><!-- 所以CDATA节中写什么符号都随意 --><p><value><![CDATA[a < b]]></value></p></property><p><strong>2.2.6、实验六：为类类型属性赋值</strong></p><p><strong>①创建班级类Clazz</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.039.jpeg">public class Clazz {</p><p>private Integer clazzId;</p><p>private String clazzName;</p><p>public Integer getClazzId() {</p><p>return clazzId;</p><p>}</p><p>public void setClazzId(Integer clazzId) {</p><p>this.clazzId &#x3D; clazzId;</p><p>}</p><p>public String getClazzName() {</p><p>return clazzName;</p><p>}</p><p>public void setClazzName(String clazzName) {</p><p>this.clazzName &#x3D; clazzName;</p><p>}</p><p>@Override</p><p>public String toString() {</p><p>return “Clazz{“ +</p><p>“clazzId&#x3D;” + clazzId +</p><p>“, clazzName&#x3D;’” + clazzName + ‘&#39;‘ +</p><p>‘}’;</p><p>}</p><p>public Clazz() {</p><p>}</p><p>public Clazz(Integer clazzId, String clazzName) {</p><p>this.clazzId &#x3D; clazzId;</p><p>this.clazzName &#x3D; clazzName;</p><p>}</p><p>}</p><p><strong>②修改Student类</strong></p><p>在Student类中添加以下代码：</p><p>private Clazz clazz;</p><p>public Clazz getClazz() {</p><p>return clazz;</p><p>}</p><p>public void setClazz(Clazz clazz) {</p><p>this.clazz &#x3D; clazz;</p><p>}</p><p><strong>③方式一：引用外部已声明的bean</strong></p><p>配置Clazz类型的bean：</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.040.jpeg"><bean id="clazzOne" class="com.atguigu.spring.bean.Clazz"></p><p><property name="clazzId" value="1111"></property></p><p><property name="clazzName" value="财源滚滚班"></property></p></bean><p>为Student中的clazz属性赋值：</p><bean id="studentFour" class="com.atguigu.spring.bean.Student"><p><property name="id" value="1004"></property></p><p><property name="name" value="赵六"></property></p><p><property name="age" value="26"></property></p><p><property name="sex" value="女"></property></p><!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --><p><property name="clazz" ref="clazzOne"></property></p></bean><p>错误演示：</p><bean id="studentFour" class="com.atguigu.spring.bean.Student"><p><property name="id" value="1004"></property></p><p><property name="name" value="赵六"></property></p><p><property name="age" value="26"></property></p><p><property name="sex" value="女"></property></p><p><property name="clazz" value="clazzOne"></property></p></bean><p>如果错把ref属性写成了value属性，会抛出异常： Caused by: java.lang.IllegalStateException:<br>Cannot convert value of type ‘java.lang.String’ to required type<br>‘com.atguigu.spring.bean.Clazz’ for property ‘clazz’: no matching editors or conversion<br>strategy found</p><p>意思是不能把String类型转换成我们要的Clazz类型，说明我们使用value属性时，Spring只把这个<br>属性看做一个普通的字符串，不会认为这是一个bean的id，更不会根据它去找到bean来赋值</p><p><strong>④方式二：内部bean</strong></p><bean id="studentFour" class="com.atguigu.spring.bean.Student"><p><property name="id" value="1004"></property></p><p><property name="name" value="赵六"></property></p><p><property name="age" value="26"></property></p><p><property name="sex" value="女"></property></p><property name="clazz"><!-- 在一个bean中再声明一个bean就是内部bean --><!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --><bean id="clazzInner" class="com.atguigu.spring.bean.Clazz"><p><property name="clazzId" value="2222"></property></p><p><property name="clazzName" value="远大前程班"></property></p></bean></property></bean><p><strong>③方式三：级联属性赋值</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.041.jpeg"><bean id="studentFour" class="com.atguigu.spring.bean.Student"></p><p><property name="id" value="1004"></property></p><p><property name="name" value="赵六"></property></p><p><property name="age" value="26"></property></p><p><property name="sex" value="女"></property></p><!-- 一定先引用某个bean为属性赋值，才可以使用级联方式更新属性 --><p><property name="clazz" ref="clazzOne"></property></p><p><property name="clazz.clazzId" value="3333"></property></p><p><property name="clazz.clazzName" value="最强王者班"></property></p></bean><p><strong>2.2.7、实验七：为数组类型属性赋值</strong></p><p><strong>①修改Student类</strong></p><p>在Student类中添加以下代码：</p><p>private String[] hobbies;</p><p>public String[] getHobbies() {</p><p>return hobbies;</p><p>}</p><p>public void setHobbies(String[] hobbies) {</p><p>this.hobbies &#x3D; hobbies;</p><p>}</p><p><strong>②配置bean</strong></p><bean id="studentFour" class="com.atguigu.spring.bean.Student"><p><property name="id" value="1004"></property></p><p><property name="name" value="赵六"></property></p><p><property name="age" value="26"></property></p><p><property name="sex" value="女"></property></p><!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --><p><property name="clazz" ref="clazzOne"></property></p><property name="hobbies"><array><p><value>抽烟</value></p><p><value>喝酒</value></p><p><value>烫头</value></p></array></property></bean><p><strong>2.2.8、实验八：为集合类型属性赋值</strong></p><p><strong>①为List集合类型属性赋值</strong></p><p>在Clazz类中添加以下代码：</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.042.jpeg">private List<Student> students;</p><p>public List<Student> getStudents() {</p><p>return students;</p><p>}</p><p>public void setStudents(List<Student> students) {</p><p>this.students &#x3D; students;</p><p>}</p><p>配置bean：</p><bean id="clazzTwo" class="com.atguigu.spring.bean.Clazz"><p><property name="clazzId" value="4444"></property></p><p><property name="clazzName" value="Javaee0222"></property></p><property name="students"><list><p><ref bean="studentOne"></ref></p><p><ref bean="studentTwo"></ref></p><p><ref bean="studentThree"></ref></p></list></property></bean><p>若为Set集合类型属性赋值，只需要将其中的list标签改为set标签即可</p><p><strong>②为Map集合类型属性赋值</strong></p><p>创建教师类Teacher：</p><p>public class Teacher {</p><p>private Integer teacherId;</p><p>private String teacherName;</p><p>public Integer getTeacherId() {</p><p>return teacherId;</p><p>}</p><p>public void setTeacherId(Integer teacherId) {</p><p>this.teacherId &#x3D; teacherId;</p><p>}</p><p>public String getTeacherName() {</p><p>return teacherName;</p><p>}</p><p>public void setTeacherName(String teacherName) {</p><p>this.teacherName &#x3D; teacherName;</p><p>}</p><p>public Teacher(Integer teacherId, String teacherName) {</p><p>this.teacherId &#x3D; teacherId;</p><p>this.teacherName &#x3D; teacherName;</p><p>}</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.043.jpeg">public Teacher() {</p><p>}</p><p>@Override</p><p>public String toString() {</p><p>return “Teacher{“ +</p><p>“teacherId&#x3D;” + teacherId +</p><p>“, teacherName&#x3D;’” + teacherName + ‘&#39;‘ +</p><p>‘}’;</p><p>}</p><p>}</p><p>在Student类中添加以下代码：</p><p>private Map&lt;String, Teacher&gt; teacherMap;</p><p>public Map&lt;String, Teacher&gt; getTeacherMap() {</p><p>return teacherMap;</p><p>}</p><p>public void setTeacherMap(Map&lt;String, Teacher&gt; teacherMap) {</p><p>this.teacherMap &#x3D; teacherMap;</p><p>}</p><p>配置bean：</p><bean id="teacherOne" class="com.atguigu.spring.bean.Teacher"><p><property name="teacherId" value="10010"></property></p><p><property name="teacherName" value="大宝"></property></p></bean><bean id="teacherTwo" class="com.atguigu.spring.bean.Teacher"><p><property name="teacherId" value="10086"></property></p><p><property name="teacherName" value="二宝"></property></p></bean><bean id="studentFour" class="com.atguigu.spring.bean.Student"><p><property name="id" value="1004"></property></p><p><property name="name" value="赵六"></property></p><p><property name="age" value="26"></property></p><p><property name="sex" value="女"></property></p><!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --><p><property name="clazz" ref="clazzOne"></property></p><property name="hobbies"><array><p><value>抽烟</value></p><p><value>喝酒</value></p><p><value>烫头</value></p></array></property><property name="teacherMap"><map><entry><key><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.044.jpeg"><value>10010</value></p></key><p><ref bean="teacherOne"></ref></p></entry><entry><key><p><value>10086</value></p></key><p><ref bean="teacherTwo"></ref></p></entry></map></property></bean><p><strong>③引用集合类型的bean</strong></p><!--list集合类型的bean--><p>&lt;util:list id&#x3D;”students”&gt;</p><p><ref bean="studentOne"></ref></p><p><ref bean="studentTwo"></ref></p><p><ref bean="studentThree"></ref></p><p></util:list></p><!--map集合类型的bean--><p>&lt;util:map id&#x3D;”teacherMap”&gt;</p><entry><key><p><value>10010</value></p></key><p><ref bean="teacherOne"></ref></p></entry><entry><key><p><value>10086</value></p></key><p><ref bean="teacherTwo"></ref></p></entry><p></util:map></p><bean id="clazzTwo" class="com.atguigu.spring.bean.Clazz"><p><property name="clazzId" value="4444"></property></p><p><property name="clazzName" value="Javaee0222"></property></p><p><property name="students" ref="students"></property></p></bean><bean id="studentFour" class="com.atguigu.spring.bean.Student"><p><property name="id" value="1004"></property></p><p><property name="name" value="赵六"></property></p><p><property name="age" value="26"></property></p><p><property name="sex" value="女"></property></p><!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --><p><property name="clazz" ref="clazzOne"></property></p><property name="hobbies"><array><p><value>抽烟</value></p><p><value>喝酒</value></p><p><value>烫头</value></p></array></property><p><property name="teacherMap" ref="teacherMap"></property></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.045.jpeg"></bean></p><p>使用util:list、util:map标签必须引入相应的命名空间，可以通过idea的提示功能选择</p><p><strong>2.2.9、实验九：p命名空间</strong></p><p>引入p命名空间后，可以通过以下方式为bean的各个属性赋值</p><p>&lt;bean id&#x3D;”studentSix” class&#x3D;”com.atguigu.spring.bean.Student”</p><p>p:id&#x3D;”1006” p:name&#x3D;”小明” p:clazz-ref&#x3D;”clazzOne” p:teacherMap-</p><p>ref&#x3D;”teacherMap”&gt;</bean></p><p><strong>2.2.10、实验十：引入外部属性文件</strong></p><p><strong>①加入依赖</strong></p><!-- MySQL驱动 --><dependency><p><groupId>mysql</groupId></p><p><artifactId>mysql-connector-java</artifactId></p><p><version>8.0.16</version></p></dependency><!-- 数据源 --><dependency><p><groupId>com.alibaba</groupId></p><p><artifactId>druid</artifactId></p><p><version>1.0.31</version></p></dependency><p><strong>②创建外部属性文件</strong></p><p>jdbc.user&#x3D;root</p><p>jdbc.password&#x3D;atguigu</p><p>jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm?serverTimezone&#x3D;UTC</p><p>jdbc.driver&#x3D;com.mysql.cj.jdbc.Driver</p><p><strong>③引入属性文件</strong></p><!-- 引入外部属性文件 --><p>&lt;context:property-placeholder location&#x3D;”classpath:jdbc.properties”&#x2F;&gt;</p><p><strong>④配置bean</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.046.jpeg"><bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource"></p><property name="url" value="${jdbc.url}"/><property name="driverClassName" value="${jdbc.driver}"/><property name="username" value="${jdbc.user}"/><property name="password" value="${jdbc.password}"/></bean><p><strong>⑤测试</strong></p><p>@Test</p><p>public void testDataSource() throws SQLException {</p><p>ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“spring-</p><p>datasource.xml”);</p><p>DataSource dataSource &#x3D; ac.getBean(DataSource.class);</p><p>Connection connection &#x3D; dataSource.getConnection();</p><p>System.out.println(connection);</p><p>}</p><p><strong>2.2.11、实验十一：bean的作用域</strong></p><p><strong>①概念</strong></p><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p><p><strong>取值 含义 创建对象的时机</strong></p><p>singleton（默认） 在IOC容器中，这个bean的对象始终为单实例 IOC容器初始化时</p><p>prototype 这个bean在IOC容器中有多个实例 获取bean时</p><p>如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p><p><strong>取值 含义</strong></p><p>request 在一个请求范围内有效</p><p>session 在一个会话范围内有效</p><p><strong>②创建类User</strong></p><p>public class User {</p><p>private Integer id;</p><p>private String username;</p><p>private String password;</p><p>private Integer age;</p><p>public User() {</p><p>}</p><p>public User(Integer id, String username, String password, Integer age) {</p><p>this.id &#x3D; id;</p><p>this.username &#x3D; username;</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.047.jpeg">this.password &#x3D; password;</p><p>this.age &#x3D; age;</p><p>}</p><p>public Integer getId() {</p><p>return id;</p><p>}</p><p>public void setId(Integer id) {</p><p>this.id &#x3D; id;</p><p>}</p><p>public String getUsername() {</p><p>return username;</p><p>}</p><p>public void setUsername(String username) {</p><p>this.username &#x3D; username;</p><p>}</p><p>public String getPassword() {</p><p>return password;</p><p>}</p><p>public void setPassword(String password) {</p><p>this.password &#x3D; password;</p><p>}</p><p>public Integer getAge() {</p><p>return age;</p><p>}</p><p>public void setAge(Integer age) {</p><p>this.age &#x3D; age;</p><p>}</p><p>@Override</p><p>public String toString() {</p><p>return “User{“ +</p><p>“id&#x3D;” + id +</p><p>“, username&#x3D;’” + username + ‘&#39;‘ +</p><p>“, password&#x3D;’” + password + ‘&#39;‘ +</p><p>“, age&#x3D;” + age +</p><p>‘}’;</p><p>}</p><p>}</p><p><strong>③配置bean</strong></p><!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --><!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --><p><bean class="com.atguigu.bean.User" scope="prototype"></bean></p><p><strong>④测试</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.048.jpeg">@Test</p><p>public void testBeanScope(){</p><p>ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“spring-</p><p>scope.xml”);</p><p>User user1 &#x3D; ac.getBean(User.class);</p><p>User user2 &#x3D; ac.getBean(User.class);</p><p>System.out.println(user1&#x3D;&#x3D;user2);</p><p>}</p><p><strong>2.2.12、实验十二：bean的生命周期</strong></p><p><strong>①具体的生命周期过程</strong></p><p>bean对象创建（调用无参构造器） 给bean对象设置属性</p><p>bean对象初始化之前操作（由bean的后置处理器负责）<br>bean对象初始化（需在配置bean时指定初始化方法）<br>bean对象初始化之后操作（由bean的后置处理器负责）<br>bean对象就绪可以使用</p><p>bean对象销毁（需在配置bean时指定销毁方法）<br>IOC容器关闭</p><p><strong>②修改类User</strong></p><p>public class User {</p><p>private Integer id;</p><p>private String username;</p><p>private String password;</p><p>private Integer age;</p><p>public User() {</p><p>System.out.println(“生命周期：1、创建对象”);</p><p>}</p><p>public User(Integer id, String username, String password, Integer age) {</p><p>this.id &#x3D; id;</p><p>this.username &#x3D; username;</p><p>this.password &#x3D; password;</p><p>this.age &#x3D; age;</p><p>}</p><p>public Integer getId() {</p><p>return id;</p><p>}</p><p>public void setId(Integer id) {</p><p>System.out.println(“生命周期：2、依赖注入”);</p><p>this.id &#x3D; id;</p><p>}</p><p>public String getUsername() {</p><p>return username;</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.049.jpeg">}</p><p>public void setUsername(String username) {</p><p>this.username &#x3D; username;</p><p>}</p><p>public String getPassword() {</p><p>return password;</p><p>}</p><p>public void setPassword(String password) {</p><p>this.password &#x3D; password;</p><p>}</p><p>public Integer getAge() {</p><p>return age;</p><p>}</p><p>public void setAge(Integer age) {</p><p>this.age &#x3D; age;</p><p>}</p><p>public void initMethod(){</p><p>System.out.println(“生命周期：3、初始化”);</p><p>}</p><p>public void destroyMethod(){</p><p>System.out.println(“生命周期：5、销毁”);</p><p>}</p><p>@Override</p><p>public String toString() {</p><p>return “User{“ +</p><p>“id&#x3D;” + id +</p><p>“, username&#x3D;’” + username + ‘&#39;‘ +</p><p>“, password&#x3D;’” + password + ‘&#39;‘ +</p><p>“, age&#x3D;” + age +</p><p>‘}’;</p><p>}</p><p>}</p><p>注意其中的initMethod()和destroyMethod()，可以通过配置bean指定为初始化和销毁的方法</p><p><strong>③配置bean</strong></p><!-- 使用init-method属性指定初始化方法 --><!-- 使用destroy-method属性指定销毁方法 --><p>&lt;bean class&#x3D;”com.atguigu.bean.User” scope&#x3D;”prototype” init-method&#x3D;”initMethod”</p><p>destroy-method&#x3D;”destroyMethod”&gt;</p><p><property name="id" value="1001"></property></p><p><property name="username" value="admin"></property></p><p><property name="password" value="123456"></property></p><p><property name="age" value="23"></property></p></bean><p><strong>④测试</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.050.jpeg">@Test</p><p>public void testLife(){</p><p>ClassPathXmlApplicationContext ac &#x3D; new</p><p>ClassPathXmlApplicationContext(“spring-lifecycle.xml”);</p><p>User bean &#x3D; ac.getBean(User.class);</p><p>System.out.println(“生命周期：4、通过IOC容器获取bean并使用”);</p><p>ac.close();</p><p>}</p><p><strong>⑤bean的后置处理器</strong></p><p>bean的后置处理器会在生命周期的初始化前后添加额外的操作，需要实现BeanPostProcessor接口，<br>且配置到IOC容器中，需要注意的是，bean后置处理器不是单独针对某一个bean生效，而是针对IOC容<br>器中所有bean都会执行</p><p>创建bean的后置处理器：</p><p>package com.atguigu.spring.process;</p><p>import org.springframework.beans.BeansException;</p><p>import org.springframework.beans.factory.config.BeanPostProcessor;</p><p>public class MyBeanProcessor implements BeanPostProcessor {</p><p>@Override</p><p>public Object postProcessBeforeInitialization(Object bean, String beanName)</p><p>throws BeansException {</p><p>System.out.println(“☆☆☆” + beanName + “ &#x3D; “ + bean);</p><p>return bean;</p><p>}</p><p>@Override</p><p>public Object postProcessAfterInitialization(Object bean, String beanName)</p><p>throws BeansException {</p><p>System.out.println(“★★★” + beanName + “ &#x3D; “ + bean);</p><p>return bean;</p><p>}</p><p>}</p><p>在IOC容器中配置后置处理器：</p><!-- bean的后置处理器要放入IOC容器才能生效 --><bean id="myBeanProcessor" class="com.atguigu.spring.process.MyBeanProcessor"/><p><strong>2.2.13、实验十三：FactoryBean</strong></p><p><strong>①简介</strong></p><p>FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个<br>FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是<br>getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都<br>屏蔽起来，只把最简洁的使用界面展示给我们。</p><p>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</p><p>&#x2F;*</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.009.jpeg">* Copyright 2002-2020 the original author or authors.</p><p>*</p><p>* Licensed under the Apache License, Version 2.0 (the “License”);</p><p>* you may not use this file except in compliance with the License.</p><p>* You may obtain a copy of the License at</p><p>*</p><p>* <a href="https://www.apache.org/licenses/LICENSE-2.0">https://www.apache.org/licenses/LICENSE-2.0</a></p><p>*</p><p>* Unless required by applicable law or agreed to in writing, software</p><p>* distributed under the License is distributed on an “AS IS” BASIS,</p><p>* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</p><p>* See the License for the specific language governing permissions and</p><p>* limitations under the License.</p><p>*&#x2F;</p><p>package org.springframework.beans.factory;</p><p>import org.springframework.lang.Nullable;</p><p>&#x2F;**</p><p>* Interface to be implemented by objects used within a {@link BeanFactory}</p><p>which</p><p>* are themselves factories for individual objects. If a bean implements this</p><p>* interface, it is used as a factory for an object to expose, not directly as a</p><p>* bean instance that will be exposed itself.</p><p>*</p><p>* <p><b>NB: A bean that implements this interface cannot be used as a normal</p><p>bean.</b></p><p>* A FactoryBean is defined in a bean style, but the object exposed for bean</p><p>* references ({@link #getObject()}) is always the object that it creates.</p><p>*</p><p>* <p>FactoryBeans can support singletons and prototypes, and can either create</p><p>* objects lazily on demand or eagerly on startup. The {@link SmartFactoryBean}</p><p>* interface allows for exposing more fine-grained behavioral metadata.</p><p>*</p><p>* <p>This interface is heavily used within the framework itself, for example</p><p>for</p><p>* the AOP {@link org.springframework.aop.framework.ProxyFactoryBean} or the</p><p>* {@link org.springframework.jndi.JndiObjectFactoryBean}. It can be used for</p><p>* custom components as well; however, this is only common for infrastructure</p><p>code.</p><p>*</p><p>* <p><b>{@code FactoryBean} is a programmatic contract. Implementations are not</p><p>* supposed to rely on annotation-driven injection or other reflective</p><p>facilities.</b></p><p>* {@link #getObjectType()} {@link #getObject()} invocations may arrive early in</p><p>the</p><p>* bootstrap process, even ahead of any post-processor setup. If you need access</p><p>to</p><p>* other beans, implement {@link BeanFactoryAware} and obtain them</p><p>programmatically.</p><p>*</p><p>* <p><b>The container is only responsible for managing the lifecycle of the</p><p>FactoryBean</p><p>* instance, not the lifecycle of the objects created by the FactoryBean.</b></p><p>Therefore,</p><p><code> </code>* a destroy method on an exposed bean object (such as {@link<br>java.io.Closeable#close()}</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.009.jpeg">* will <i>not</i> be called automatically. Instead, a FactoryBean should</p><p>implement</p><p>* {@link DisposableBean} and delegate any such close call to the underlying</p><p>object.</p><p>*</p><p>* <p>Finally, FactoryBean objects participate in the containing BeanFactory’s</p><p>* synchronization of bean creation. There is usually no need for internal</p><p>* synchronization other than for purposes of lazy initialization within the</p><p>* FactoryBean itself (or the like).</p><p>*</p><p>* @author Rod Johnson</p><p>* @author Juergen Hoeller</p><p>* @since 08.03.2003</p><p>* @param <T> the bean type</p><p>* @see org.springframework.beans.factory.BeanFactory</p><p>* @see org.springframework.aop.framework.ProxyFactoryBean</p><p>* @see org.springframework.jndi.JndiObjectFactoryBean</p><p>*&#x2F;</p><p>public interface FactoryBean<T> {</p><p>&#x2F;**</p><p>* The name of an attribute that can be</p><p>* {@link org.springframework.core.AttributeAccessor#setAttribute set} on a</p><p>* {@link org.springframework.beans.factory.config.BeanDefinition} so that</p><p>* factory beans can signal their object type when it can’t be deduced from</p><p>* the factory bean class.</p><p>* @since 5.2</p><p>*&#x2F;</p><p>String OBJECT_TYPE_ATTRIBUTE &#x3D; “factoryBeanObjectType”;</p><p>&#x2F;**</p><p>* Return an instance (possibly shared or independent) of the object</p><p>* managed by this factory.</p><p>* <p>As with a {@link BeanFactory}, this allows support for both the</p><p>* Singleton and Prototype design pattern.</p><p>* <p>If this FactoryBean is not fully initialized yet at the time of</p><p>* the call (for example because it is involved in a circular reference),</p><p>* throw a corresponding {@link FactoryBeanNotInitializedException}.</p><p>* <p>As of Spring 2.0, FactoryBeans are allowed to return {@code null}</p><p>* objects. The factory will consider this as normal value to be used; it</p><p>* will not throw a FactoryBeanNotInitializedException in this case anymore.</p><p>* FactoryBean implementations are encouraged to throw</p><p>* FactoryBeanNotInitializedException themselves now, as appropriate.</p><p>* @return an instance of the bean (can be {@code null})</p><p>* @throws Exception in case of creation errors</p><p>* @see FactoryBeanNotInitializedException</p><p>*&#x2F;</p><p>@Nullable</p><p>T getObject() throws Exception;</p><p>&#x2F;**</p><p>* Return the type of object that this FactoryBean creates,</p><p>* or {@code null} if not known in advance.</p><p>* <p>This allows one to check for specific types of beans without</p><p>* instantiating objects, for example on autowiring.</p><p>* <p>In the case of implementations that are creating a singleton object,</p><p>* this method should try to avoid singleton creation as far as possible;</p><p>* it should rather estimate the type in advance.</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.051.jpeg">* For prototypes, returning a meaningful type here is advisable too.</p><p>* <p>This method can be called <i>before</i> this FactoryBean has</p><p>* been fully initialized. It must not rely on state created during</p><p>* initialization; of course, it can still use such state if available.</p><p>* <p><b>NOTE:</b> Autowiring will simply ignore FactoryBeans that return</p><p>* {@code null} here. Therefore it is highly recommended to implement</p><p>* this method properly, using the current state of the FactoryBean.</p><p>* @return the type of object that this FactoryBean creates,</p><p>* or {@code null} if not known at the time of the call</p><p>* @see ListableBeanFactory#getBeansOfType</p><p>*&#x2F;</p><p>@Nullable</p><p>Class&lt;?&gt; getObjectType();</p><p>&#x2F;**</p><p>* Is the object managed by this factory a singleton? That is,<br>* will {@link #getObject()} always return the same object<br>* (a reference that can be cached)?</p><p>* <p><b>NOTE:</b> If a FactoryBean indicates to hold a singleton object,<br>* the object returned from {@code getObject()} might get cached<br>* by the owning BeanFactory. Hence, do not return {@code true}<br>* unless the FactoryBean always exposes the same reference.<br>* <p>The singleton status of the FactoryBean itself will generally<br>* be provided by the owning BeanFactory; usually, it has to be<br>* defined as singleton there.</p><p>* <p><b>NOTE:</b> This method returning {@code false} does not<br>* necessarily indicate that returned objects are independent instances.<br>* An implementation of the extended {@link SmartFactoryBean} interface<br>* may explicitly indicate independent instances through its<br>* {@link SmartFactoryBean#isPrototype()} method. Plain {@link FactoryBean}<br>* implementations which do not implement this extended interface are<br>* simply assumed to always return independent instances if the<br>* {@code isSingleton()} implementation returns {@code false}.<br>* <p>The default implementation returns {@code true}, since a<br>* {@code FactoryBean} typically manages a singleton instance.<br>* @return whether the exposed object is a singleton</p><p>* @see #getObject()</p><p>* @see SmartFactoryBean#isPrototype()</p><p>*&#x2F;</p><p>default boolean isSingleton() {</p><p>return true;</p><p>}</p><p>}</p><p><strong>②创建类UserFactoryBean</strong></p><p>public class UserFactoryBean implements FactoryBean<User> {</p><p>@Override</p><p>public User getObject() throws Exception {</p><p>return new User();</p><p>}</p><p>@Override</p><p>public Class&lt;?&gt; getObjectType() {</p><p>return User.class;</p><p>}</p><p>}</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.052.jpeg"><strong>③配置bean</strong></p><p><bean id="user" class="com.atguigu.bean.UserFactoryBean"></bean></p><p><strong>④测试</strong></p><p>@Test</p><p>public void testUserFactoryBean(){</p><p>&#x2F;&#x2F;获取IOC容器</p><p>ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“spring-</p><p>factorybean.xml”);</p><p>User user &#x3D; (User) ac.getBean(“user”);</p><p>System.out.println(user);</p><p>}</p><p><strong>2.2.14、实验十四：基于xml的自动装配</strong></p><p>自动装配：</p><p>根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类 型属性赋值</p><p><strong>①场景模拟</strong></p><p>创建类UserController</p><p>public class UserController {</p><p>private UserService userService;</p><p>public void setUserService(UserService userService) {</p><p>this.userService &#x3D; userService;</p><p>}</p><p>public void saveUser(){</p><p>userService.saveUser();</p><p>}</p><p>}</p><p>创建接口UserService</p><p>public interface UserService {</p><p>void saveUser();</p><p>}</p><p>创建类UserServiceImpl实现接口UserService</p><p>public class UserServiceImpl implements UserService {</p><p>private UserDao userDao;</p><p>public void setUserDao(UserDao userDao) {</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.053.jpeg">this.userDao &#x3D; userDao;</p><p>}</p><p>@Override</p><p>public void saveUser() {</p><p>userDao.saveUser();</p><p>}</p><p>}</p><p>创建接口UserDao</p><p>public interface UserDao {</p><p>void saveUser();</p><p>}</p><p>创建类UserDaoImpl实现接口UserDao</p><p>public class UserDaoImpl implements UserDao {</p><p>@Override</p><p>public void saveUser() {</p><p>System.out.println(“保存成功”);</p><p>}</p><p>}</p><p><strong>②配置bean</strong></p><p>使用bean标签的autowire属性设置自动装配效果</p><p>自动装配方式：byType</p><p>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值</p><p>若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值 null</p><p>若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常 NoUniqueBeanDefinitionException</p><p>&lt;bean id&#x3D;”userController”</p><p>class&#x3D;”com.atguigu.autowire.xml.controller.UserController” autowire&#x3D;”byType”&gt;</p></bean><p>&lt;bean id&#x3D;”userService”</p><p>class&#x3D;”com.atguigu.autowire.xml.service.impl.UserServiceImpl” autowire&#x3D;”byType”&gt;</p></bean><p><bean id="userDao" class="com.atguigu.autowire.xml.dao.impl.UserDaoImpl"></bean></p><p>自动装配方式：byName</p><p>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.054.jpeg">&lt;bean id&#x3D;”userController”</p><p>class&#x3D;”com.atguigu.autowire.xml.controller.UserController” autowire&#x3D;”byName”&gt;</p></bean><p>&lt;bean id&#x3D;”userService”</p><p>class&#x3D;”com.atguigu.autowire.xml.service.impl.UserServiceImpl” autowire&#x3D;”byName”&gt;</p></bean><p>&lt;bean id&#x3D;”userServiceImpl”</p><p>class&#x3D;”com.atguigu.autowire.xml.service.impl.UserServiceImpl” autowire&#x3D;”byName”&gt;</p></bean><p><bean id="userDao" class="com.atguigu.autowire.xml.dao.impl.UserDaoImpl"></bean></p><bean id="userDaoImpl" class="com.atguigu.autowire.xml.dao.impl.UserDaoImpl"></bean><p><strong>③测试</strong></p><p>@Test</p><p>public void testAutoWireByXML(){</p><p>ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“autowire-</p><p>xml.xml”);</p><p>UserController userController &#x3D; ac.getBean(UserController.class);</p><p>userController.saveUser();</p><p>}</p><p><strong>2.3、基于注解管理bean</strong></p><p><strong>2.3.1、实验一：标记与扫描</strong></p><p><strong>①注解</strong></p><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测 到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p><p>本质上：所有一切的操作都是Java代码来完成的，XML和注解只是告诉框架中的Java代码如何执行。</p><p>举例：元旦联欢会要布置教室，蓝色的地方贴上元旦快乐四个字，红色的地方贴上拉花，黄色的地方贴<br>上气球。</p><p>班长做了所有标记，同学们来完成具体工作。墙上的标记相当于我们在代码中使用的注解，后面同学们<br>做的工作，相当于框架的具体操作。</p><p><strong>②扫描</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.055.jpeg">Spring 为了知道程序员在哪些地方标记了什么注解，就需要通过扫描的方式，来进行检测。然后根据注 解进行后续操作。</p><p><strong>③新建Maven Module</strong></p><dependencies><!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --><dependency><p><groupId>org.springframework</groupId></p><p><artifactId>spring-context</artifactId></p><p><version>5.3.1</version></p></dependency><!-- junit测试 --><dependency><p><groupId>junit</groupId></p><p><artifactId>junit</artifactId></p><p><version>4.12</version></p><p><scope>test</scope></p></dependency></dependencies><p><strong>④创建Spring配置文件</strong></p><p><strong>⑤标识组件的常用注解</strong></p><p>@Component：将类标识为普通组件 @Controller：将类标识为控制层组件 @Service：将类标<br>识为业务层组件 @Repository：将类标识为持久层组件</p><p>问：以上四个注解有什么关系和区别？</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.056.jpeg">通过查看源码我们得知，@Controller、@Service、@Repository这三个注解只是在@Component注解 的基础上起了三个新的名字。</p><p>对于Spring使用IOC容器管理这些组件来说没有区别。所以@Controller、@Service、@Repository这 三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。</p><p>注意：虽然它们本质上一样，但是为了代码的可读性，为了程序结构严谨我们肯定不能随便胡乱标记。</p><p><strong>⑥创建组件</strong></p><p>创建控制层组件</p><p>@Controller</p><p>public class UserController {</p><p>}</p><p>创建接口UserService</p><p>public interface UserService {</p><p>}</p><p>创建业务层组件UserServiceImpl</p><p>@Service</p><p>public class UserServiceImpl implements UserService {</p><p>}</p><p>创建接口UserDao</p><p>public interface UserDao {</p><p>}</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.057.jpeg">创建持久层组件UserDaoImpl</p><p>@Repository</p><p>public class UserDaoImpl implements UserDao {</p><p>}</p><p><strong>⑦扫描组件</strong></p><p>情况一：最基本的扫描方式</p><p>&lt;context:component-scan base-package&#x3D;”com.atguigu”&gt;</p><p></context:component-scan></p><p>情况二：指定要排除的组件</p><p>&lt;context:component-scan base-package&#x3D;”com.atguigu”&gt;</p><!-- context:exclude-filter标签：指定排除规则 --><!--type：设置排除或包含的依据type="annotation"，根据注解排除，expression中设置要排除的注解的全类名type="assignable"，根据类型排除，expression中设置要排除的类型的全类名--><p>&lt;context:exclude-filter type&#x3D;”annotation”</p><p>expression&#x3D;”org.springframework.stereotype.Controller”&#x2F;&gt;</p><!--<context:exclude-filter type="assignable"expression="com.atguigu.controller.UserController"/>--><p></context:component-scan></p><p>情况三：仅扫描指定组件</p><p>&lt;context:component-scan base-package&#x3D;”com.atguigu” use-default-filters&#x3D;”false”&gt;</p><!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --><!-- use-default-filters属性：取值false表示关闭默认扫描规则 --><!-- 此时必须设置use-default-filters="false"，因为默认规则即扫描指定包下所有类 --><!--type：设置排除或包含的依据type="annotation"，根据注解排除，expression中设置要排除的注解的全类名type="assignable"，根据类型排除，expression中设置要排除的类型的全类名--><p>&lt;context:include-filter type&#x3D;”annotation”</p><p>expression&#x3D;”org.springframework.stereotype.Controller”&#x2F;&gt;</p><!--<context:include-filter type="assignable"expression="com.atguigu.controller.UserController"/>--><p></context:component-scan></p><p><strong>⑧测试</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.058.jpeg">@Test</p><p>public void testAutowireByAnnotation(){</p><p>ApplicationContext ac &#x3D; new</p><p>ClassPathXmlApplicationContext(“applicationContext.xml”);</p><p>UserController userController &#x3D; ac.getBean(UserController.class);</p><p>System.out.println(userController);</p><p>UserService userService &#x3D; ac.getBean(UserService.class);</p><p>System.out.println(userService);</p><p>UserDao userDao &#x3D; ac.getBean(UserDao.class);</p><p>System.out.println(userDao);</p><p>}</p><p><strong>⑨组件所对应的bean的id</strong></p><p>在我们使用XML方式管理bean的时候，每个bean都有一个唯一标识，便于在其他地方引用。现在使用 注解后，每个组件仍然应该有一个唯一标识。</p><p>默认情况</p><p>类名首字母小写就是bean的id。例如：UserController类对应的bean的id就是userController。</p><p>自定义bean的id</p><p>可通过标识组件的注解的value属性设置自定义的bean的id</p><p>@Service(“userService”)&#x2F;&#x2F;默认为userServiceImpl public class UserServiceImpl implements UserService {}</p><p><strong>2.3.2、实验二：基于注解的自动装配</strong></p><p><strong>①场景模拟</strong></p><p>参考基于xml的自动装配</p><p>在UserController中声明UserService对象</p><p>在UserServiceImpl中声明UserDao对象</p><p><strong>②@Autowired注解</strong></p><p>在成员变量上直接标记@Autowired注解即可完成自动装配，不需要提供setXxx()方法。以后我们在项 目中的正式用法就是这样。</p><p>@Controller</p><p>public class UserController {</p><p>@Autowired</p><p>private UserService userService;</p><p>public void saveUser(){</p><p>userService.saveUser();</p><p>}</p><p>}</p><p>public interface UserService {</p><p>void saveUser();</p><p>}</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.059.jpeg">@Service</p><p>public class UserServiceImpl implements UserService {</p><p>@Autowired</p><p>private UserDao userDao;</p><p>@Override</p><p>public void saveUser() {</p><p>userDao.saveUser();</p><p>}</p><p>}</p><p>public interface UserDao {</p><p>void saveUser();</p><p>}</p><p>@Repository</p><p>public class UserDaoImpl implements UserDao {</p><p>@Override</p><p>public void saveUser() {</p><p>System.out.println(“保存成功”);</p><p>}</p><p>}</p><p><strong>③@Autowired注解其他细节</strong></p><p>@Autowired注解可以标记在构造器和set方法上</p><p>@Controller</p><p>public class UserController {</p><p>private UserService userService;</p><p>@Autowired</p><p>public UserController(UserService userService){</p><p>this.userService &#x3D; userService;</p><p>}</p><p>public void saveUser(){</p><p>userService.saveUser();</p><p>}</p><p>}</p><p>@Controller</p><p>public class UserController {</p><p>private UserService userService;</p><p>@Autowired</p><p>public void setUserService(UserService userService){</p><p>this.userService &#x3D; userService;</p><p>}</p><p>public void saveUser(){</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.060.jpeg">userService.saveUser();</p><p>}</p><p>}</p><p><strong>④@Autowired工作流程</strong></p><p>首先根据所需要的组件类型到IOC容器中查找</p><p>能够找到唯一的bean：直接执行装配</p><p>如果完全找不到匹配这个类型的bean：装配失败</p><p>和所需类型匹配的bean不止一个</p><p>没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行 匹配</p><p>能够找到：执行装配 找不到：装配失败</p><p>使用@Qualifier注解：根据@Qualifier注解中指定的名称作为bean的id进行匹配</p><p>能够找到：执行装配<br>找不到：装配失败</p><p>@Controller</p><p>public class UserController {</p><p>@Autowired</p><p>@Qualifier(“userServiceImpl”)</p><p>private UserService userService;</p><p>public void saveUser(){</p><p>userService.saveUser();</p><p>}</p><p>}</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.061.jpeg">@Autowired中有属性required，默认值为true，因此在自动装配无法找到相应的bean时，会装 配失败</p><p>可以将属性required的值设置为true，则表示能装就装，装不上就不装，此时自动装配的属性为 默认值</p><p>但是实际开发时，基本上所有需要装配组件的地方都是必须装配的，用不上这个属性。</p><p><strong>3、AOP</strong></p><p><strong>3.1、场景模拟</strong></p><p><strong>3.1.1、声明接口</strong></p><p>声明计算器接口Calculator，包含加减乘除的抽象方法</p><p>public interface Calculator {</p><p>int add(int i, int j);</p><p>int sub(int i, int j);</p><p>int mul(int i, int j);</p><p>int div(int i, int j);</p><p>}</p><p><strong>3.1.2、创建实现类</strong></p><p>public class CalculatorPureImpl implements Calculator {</p><p>@Override</p><p>public int add(int i, int j) {</p><p>int result &#x3D; i + j;</p><p>System.out.println(“方法内部 result &#x3D; “ + result);</p><p>return result;</p><p>}</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.062.jpeg">@Override</p><p>public int sub(int i, int j) {</p><p>int result &#x3D; i - j;</p><p>System.out.println(“方法内部 result &#x3D; “ + result);</p><p>return result;</p><p>}</p><p>@Override</p><p>public int mul(int i, int j) {</p><p>int result &#x3D; i * j;</p><p>System.out.println(“方法内部 result &#x3D; “ + result);</p><p>return result;</p><p>}</p><p>@Override</p><p>public int div(int i, int j) {</p><p>int result &#x3D; i &#x2F; j;</p><p>System.out.println(“方法内部 result &#x3D; “ + result);</p><p>return result;</p><p>}</p><p>}</p><p><strong>3.1.3、创建带日志功能的实现类</strong></p><p>public class CalculatorLogImpl implements Calculator {</p><p>@Override</p><p>public int add(int i, int j) {</p><p>System.out.println(“[日志] add 方法开始了，参数是：” + i + “,” + j);</p><p>int result &#x3D; i + j;</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.063.jpeg">System.out.println(“方法内部 result &#x3D; “ + result);</p><p>System.out.println(“[日志] add 方法结束了，结果是：” + result);</p><p>return result;</p><p>}</p><p>@Override</p><p>public int sub(int i, int j) {</p><p>System.out.println(“[日志] sub 方法开始了，参数是：” + i + “,” + j);</p><p>int result &#x3D; i - j;</p><p>System.out.println(“方法内部 result &#x3D; “ + result);</p><p>System.out.println(“[日志] sub 方法结束了，结果是：” + result);</p><p>return result;</p><p>}</p><p>@Override</p><p>public int mul(int i, int j) {</p><p>System.out.println(“[日志] mul 方法开始了，参数是：” + i + “,” + j);</p><p>int result &#x3D; i * j;</p><p>System.out.println(“方法内部 result &#x3D; “ + result);</p><p>System.out.println(“[日志] mul 方法结束了，结果是：” + result);</p><p>return result;</p><p>}</p><p>@Override</p><p>public int div(int i, int j) {</p><p>System.out.println(“[日志] div 方法开始了，参数是：” + i + “,” + j);</p><p>int result &#x3D; i &#x2F; j;</p><p>System.out.println(“方法内部 result &#x3D; “ + result);</p><p>System.out.println(“[日志] div 方法结束了，结果是：” + result);</p><p>return result;</p><p>}</p><p>}</p><p><strong>3.1.4、提出问题</strong></p><p><strong>①现有代码缺陷</strong></p><p>针对带日志功能的实现类，我们发现有如下缺陷：</p><p>对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力<br>附加功能分散在各个业务功能方法中，不利于统一维护</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.064.jpeg"><strong>②解决思路</strong></p><p>解决这两个问题，核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。</p><p><strong>③困难</strong></p><p>解决问题的困难：要抽取的代码在方法内部，靠以前把子类中的重复代码抽取到父类的方式没法解决。<br>所以需要引入新的技术。</p><p><strong>3.2、代理模式</strong></p><p><strong>3.2.1、概念</strong></p><p><strong>①介绍</strong></p><p>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标<br>方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑<br>的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调<br>用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p><p>使用代理后：</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.065.jpeg"><strong>②生活中的代理</strong></p><p>广告商找大明星拍广告需要经过经纪人<br>合作伙伴找大老板谈合作要约见面时间需要经过秘书<br>房产中介是买卖双方的代理</p><p><strong>③相关术语</strong></p><p>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。 目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</p><p><strong>3.2.2、静态代理</strong></p><p>创建静态代理类：</p><p>public class CalculatorStaticProxy implements Calculator {</p><p>&#x2F;&#x2F; 将被代理的目标对象声明为成员变量</p><p>private Calculator target;</p><p>public CalculatorStaticProxy(Calculator target) {</p><p>this.target &#x3D; target;</p><p>}</p><p>@Override</p><p>public int add(int i, int j) {</p><p>&#x2F;&#x2F; 附加功能由代理类中的代理方法来实现</p><p>System.out.println(“[日志] add 方法开始了，参数是：” + i + “,” + j);</p><p>&#x2F;&#x2F; 通过目标对象来实现核心业务逻辑</p><p>int addResult &#x3D; target.add(i, j);</p><p>System.out.println(“[日志] add 方法结束了，结果是：” + addResult);</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.066.jpeg">return addResult;</p><p>}</p><p>}</p><p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来<br>说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代<br>码，日志功能还是分散的，没有统一管理。</p><p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理<br>类来实现。这就需要使用动态代理技术了。</p><p><strong>3.2.3、动态代理</strong></p><p>生产代理对象的工厂类：</p><p>public class ProxyFactory {</p><p>private Object target;</p><p>public ProxyFactory(Object target) {</p><p>this.target &#x3D; target;</p><p>}</p><p>public Object getProxy(){</p><p>&#x2F;**</p><p>* newProxyInstance()：创建一个代理实例</p><p>* 其中有三个参数：</p><p>* 1、classLoader：加载动态生成的代理类的类加载器</p><p>* 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</p><p>* 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接</p><p>口中的抽象方法</p><p>*&#x2F;</p><p>ClassLoader classLoader &#x3D; target.getClass().getClassLoader();</p><p>Class&lt;?&gt;[] interfaces &#x3D; target.getClass().getInterfaces();</p><p>InvocationHandler invocationHandler &#x3D; new InvocationHandler() {</p><p>@Override</p><p>public Object invoke(Object proxy, Method method, Object[] args)</p><p>throws Throwable {</p><p>&#x2F;**</p><p>* proxy：代理对象</p><p>* method：代理对象需要实现的方法，即其中需要重写的方法</p><p>* args：method所对应方法的参数</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.067.jpeg">*&#x2F;</p><p>Object result &#x3D; null;</p><p>try {</p><p>System.out.println(“[动态代理][日志] “+method.getName()+”，参</p><p>数：”+ Arrays.toString(args));</p><p>result &#x3D; method.invoke(target, args);</p><p>System.out.println(“[动态代理][日志] “+method.getName()+”，结</p><p>果：”+ result);</p><p>} catch (Exception e) {</p><p>e.printStackTrace();</p><p>System.out.println(“[动态代理][日志] “+method.getName()+”，异</p><p>常：”+e.getMessage());</p><p>} finally {</p><p>System.out.println(“[动态代理][日志] “+method.getName()+”，方法</p><p>执行完毕”);</p><p>}</p><p>return result;</p><p>}</p><p>};</p><p>return Proxy.newProxyInstance(classLoader, interfaces,</p><p>invocationHandler);</p><p>}</p><p>}</p><p><strong>3.2.4、测试</strong></p><p>@Test</p><p>public void testDynamicProxy(){</p><p>ProxyFactory factory &#x3D; new ProxyFactory(new CalculatorLogImpl());</p><p>Calculator proxy &#x3D; (Calculator) factory.getProxy();</p><p>proxy.div(1,0);</p><p>&#x2F;&#x2F;proxy.div(1,1);</p><p>}</p><p><strong>3.3、AOP概念及相关术语</strong></p><p><strong>3.3.1、概述</strong></p><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面<br>向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况<br>下给程序动态统一添加额外功能的一种技术。</p><p><strong>3.3.2、相关术语</strong></p><p><strong>①横切关注点</strong></p><p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方<br>法进行多个不同方面的增强。</p><p>这个概念不是语法层面天然存在的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横<br>切关注点。</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.068.jpeg"><strong>②通知</strong></p><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</p><p>前置通知：在被代理的目标方法<strong>前</strong>执行 返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）<br>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）<br>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）<br>环绕通知：使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所<br>有位置</p><p><strong>③切面</strong></p><p>封装通知方法的类。</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.069.jpeg"><strong>④目标</strong></p><p>被代理的目标对象。</p><p><strong>⑤代理</strong></p><p>向目标对象应用通知之后创建的代理对象。</p><p><strong>⑥连接点</strong></p><p>这也是一个纯逻辑概念，不是语法定义的。</p><p>把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉 点就是连接点。</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.070.jpeg"><strong>⑦切入点</strong></p><p>定位连接点的方式。</p><p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。</p><p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。</p><p>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。</p><p>切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条 件。</p><p><strong>3.3.3、作用</strong></p><p>简化代码：把方法中固定位置的重复的代码<strong>抽取</strong>出来，让被抽取的方法更专注于自己的核心功能， 提高内聚性。</p><p>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被<strong>套用</strong>了切面逻辑的方法就 被切面给增强了。</p><p><strong>3.4、基于注解的AOP</strong></p><p><strong>3.4.1、技术说明</strong></p><p>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因<br>为这个技术要求<strong>代理对象和目标对象实现同样的接口</strong>（兄弟两个拜把子模式）。<br>cglib：通过<strong>继承被代理的目标类</strong>（认干爹模式）实现代理，所以不需要目标类实现接口。<br>AspectJ：本质上是静态代理，<strong>将代理逻辑“织入”被代理的目标类编译得到的字节码文件</strong>，所以最<br>终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</p><p><strong>3.4.2、准备工作</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.071.jpeg"><strong>①添加依赖</strong></p><p>在IOC所需依赖基础上再加入下面依赖即可：</p><!-- spring-aspects会帮我们传递过来aspectjweaver --><dependency><p><groupId>org.springframework</groupId></p><p><artifactId>spring-aspects</artifactId></p><p><version>5.3.1</version></p></dependency><p><strong>②准备被代理的目标资源</strong></p><p>接口：</p><p>public interface Calculator {</p><p>int add(int i, int j);</p><p>int sub(int i, int j);</p><p>int mul(int i, int j);</p><p>int div(int i, int j);</p><p>}</p><p>实现类：</p><p>@Component</p><p>public class CalculatorPureImpl implements Calculator {</p><p>@Override</p><p>public int add(int i, int j) {</p><p>int result &#x3D; i + j;</p><p>System.out.println(“方法内部 result &#x3D; “ + result);</p><p>return result;</p><p>}</p><p>@Override</p><p>public int sub(int i, int j) {</p><p>int result &#x3D; i - j;</p><p>System.out.println(“方法内部 result &#x3D; “ + result);</p><p>return result;</p><p>}</p><p>@Override</p><p>public int mul(int i, int j) {</p><p>int result &#x3D; i * j;</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.072.jpeg">System.out.println(“方法内部 result &#x3D; “ + result);</p><p>return result;</p><p>}</p><p>@Override</p><p>public int div(int i, int j) {</p><p>int result &#x3D; i &#x2F; j;</p><p>System.out.println(“方法内部 result &#x3D; “ + result);</p><p>return result;</p><p>}</p><p>}</p><p><strong>3.4.3、创建切面类并配置</strong></p><p>&#x2F;&#x2F; @Aspect表示这个类是一个切面类</p><p>@Aspect</p><p>&#x2F;&#x2F; @Component注解保证这个切面类能够放入IOC容器</p><p>@Component</p><p>public class LogAspect {</p><p>@Before(“execution(public int com.atguigu.aop.annotation.CalculatorImpl.*</p><p>(..))”)</p><p>public void beforeMethod(JoinPoint joinPoint){</p><p>String methodName &#x3D; joinPoint.getSignature().getName();</p><p>String args &#x3D; Arrays.toString(joinPoint.getArgs());</p><p>System.out.println(“Logger–&gt;前置通知，方法名：”+methodName+”，参</p><p>数：”+args);</p><p>}</p><p>@After(“execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))”)</p><p>public void afterMethod(JoinPoint joinPoint){</p><p>String methodName &#x3D; joinPoint.getSignature().getName();</p><p>System.out.println(“Logger–&gt;后置通知，方法名：”+methodName);</p><p>}</p><p>@AfterReturning(value &#x3D; “execution(*</p><p>com.atguigu.aop.annotation.CalculatorImpl.*(..))”, returning &#x3D; “result”)</p><p>public void afterReturningMethod(JoinPoint joinPoint, Object result){</p><p>String methodName &#x3D; joinPoint.getSignature().getName();</p><p>System.out.println(“Logger–&gt;返回通知，方法名：”+methodName+”，结</p><p>果：”+result);</p><p>}</p><p>@AfterThrowing(value &#x3D; “execution(*</p><p>com.atguigu.aop.annotation.CalculatorImpl.*(..))”, throwing &#x3D; “ex”)</p><p>public void afterThrowingMethod(JoinPoint joinPoint, Throwable ex){</p><p>String methodName &#x3D; joinPoint.getSignature().getName();</p><p>System.out.println(“Logger–&gt;异常通知，方法名：”+methodName+”，异常：”+ex);</p><p>}</p><p>@Around(“execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))”)</p><p>public Object aroundMethod(ProceedingJoinPoint joinPoint){</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.073.jpeg">String methodName &#x3D; joinPoint.getSignature().getName();</p><p>String args &#x3D; Arrays.toString(joinPoint.getArgs());</p><p>Object result &#x3D; null;</p><p>try {</p><p>System.out.println(“环绕通知–&gt;目标对象方法执行之前”);</p><p>&#x2F;&#x2F;目标对象（连接点）方法的执行</p><p>result &#x3D; joinPoint.proceed();</p><p>System.out.println(“环绕通知–&gt;目标对象方法返回值之后”);</p><p>} catch (Throwable throwable) {</p><p>throwable.printStackTrace();</p><p>System.out.println(“环绕通知–&gt;目标对象方法出现异常时”);</p><p>} finally {</p><p>System.out.println(“环绕通知–&gt;目标对象方法执行完毕”);</p><p>}</p><p>return result;</p><p>}</p><p>}</p><p>在Spring的配置文件中配置：</p><!--基于注解的AOP的实现：1、将目标对象和切面交给IOC容器管理（注解+扫描）2、开启AspectJ的自动代理，为目标对象自动生成代理3、将切面类通过注解@Aspect标识--><p>&lt;context:component-scan base-package&#x3D;”com.atguigu.aop.annotation”&gt;</p><p></context:component-scan></p><p>&lt;aop:aspectj-autoproxy &#x2F;&gt;</p><p><strong>3.4.4、各种通知</strong></p><p>前置通知：使用@Before注解标识，在被代理的目标方法<strong>前</strong>执行</p><p>返回通知：使用@AfterReturning注解标识，在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）<br>异常通知：使用@AfterThrowing注解标识，在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）<br>后置通知：使用@After注解标识，在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）<br>环绕通知：使用@Around注解标识，使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包<br>括上面四种通知对应的所有位置</p><p>各种通知的执行顺序：</p><p>Spring版本5.3.x以前：</p><p>前置通知 目标操作 后置通知 返回通知或异常通知</p><p>Spring版本5.3.x以后：</p><p>前置通知 目标操作 返回通知或异常通知<br>后置通知</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.074.jpeg"><strong>3.4.5、切入点表达式语法</strong></p><p><strong>①作用</strong></p><p><strong>②语法细节</strong></p><p>用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限</p><p>在包名的部分，一个“*”号只能代表包的层次结构中的一层，表示这一层是任意的。</p><p><code> </code>例如：*.Hello匹配com.Hello，不匹配com.atguigu.Hello<br>在包名的部分，使用“*..”表示包名任意、包的层次深度任意</p><p>在类名的部分，类名部分整体用*号代替，表示类名任意</p><p>在类名的部分，可以使用*号代替类名的一部分</p><p><code> </code>例如：*Service匹配所有名称以Service结尾的类或接口<br>在方法名部分，可以使用*号表示方法名任意</p><p>在方法名部分，可以使用*号代替方法名的一部分</p><p><code> </code>例如：*Operation匹配所有方法名以Operation结尾的方法<br>在方法参数列表部分，使用(..)表示参数列表任意</p><p>在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头</p><p>在方法参数列表部分，基本数据类型和对应的包装类型是不一样的</p><p>切入点表达式中使用 int 和实际方法中 Integer 是不匹配的 在方法返回值部分，如果想要明确指定一个返回值类型，那么必须同时写明权限修饰符</p><p>例如：execution(public int *..*Service.*(.., int)) 正确<br>例如：execution(* int *..*Service.*(.., int)) 错误</p><p><strong>3.4.6、重用切入点表达式</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.075.jpeg"><strong>①声明</strong></p><p>@Pointcut(“execution(* com.atguigu.aop.annotation.*.*(..))”)</p><p>public void pointCut(){}</p><p><strong>②在同一个切面中使用</strong></p><p>@Before(“pointCut()”)</p><p>public void beforeMethod(JoinPoint joinPoint){</p><p>String methodName &#x3D; joinPoint.getSignature().getName();</p><p>String args &#x3D; Arrays.toString(joinPoint.getArgs());</p><p>System.out.println(“Logger–&gt;前置通知，方法名：”+methodName+”，参数：”+args);</p><p>}</p><p><strong>③在不同切面中使用</strong></p><p>@Before(“com.atguigu.aop.CommonPointCut.pointCut()”)</p><p>public void beforeMethod(JoinPoint joinPoint){</p><p>String methodName &#x3D; joinPoint.getSignature().getName();</p><p>String args &#x3D; Arrays.toString(joinPoint.getArgs());</p><p>System.out.println(“Logger–&gt;前置通知，方法名：”+methodName+”，参数：”+args);</p><p>}</p><p><strong>3.4.7、获取通知的相关信息</strong></p><p><strong>①获取连接点信息</strong></p><p>获取连接点信息可以在通知方法的参数位置设置JoinPoint类型的形参</p><p>@Before(“execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))”)</p><p>public void beforeMethod(JoinPoint joinPoint){</p><p>&#x2F;&#x2F;获取连接点的签名信息</p><p>String methodName &#x3D; joinPoint.getSignature().getName();</p><p>&#x2F;&#x2F;获取目标方法到的实参信息</p><p>String args &#x3D; Arrays.toString(joinPoint.getArgs());</p><p>System.out.println(“Logger–&gt;前置通知，方法名：”+methodName+”，参数：”+args);</p><p>}</p><p><strong>②获取目标方法的返回值</strong></p><p>@AfterReturning中的属性returning，用来将通知方法的某个形参，接收目标方法的返回值</p><p>@AfterReturning(value &#x3D; “execution(* com.atguigu.aop.annotation.CalculatorImpl.*</p><p>(..))”, returning &#x3D; “result”)</p><p>public void afterReturningMethod(JoinPoint joinPoint, Object result){</p><p>String methodName &#x3D; joinPoint.getSignature().getName();</p><p>System.out.println(“Logger–&gt;返回通知，方法名：”+methodName+”，结果：”+result);</p><p>}</p><p><strong>③获取目标方法的异常</strong></p><p>@AfterThrowing中的属性throwing，用来将通知方法的某个形参，接收目标方法的异常</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.076.jpeg">@AfterThrowing(value &#x3D; “execution(* com.atguigu.aop.annotation.CalculatorImpl.*</p><p>(..))”, throwing &#x3D; “ex”)</p><p>public void afterThrowingMethod(JoinPoint joinPoint, Throwable ex){</p><p>String methodName &#x3D; joinPoint.getSignature().getName();</p><p>System.out.println(“Logger–&gt;异常通知，方法名：”+methodName+”，异常：”+ex);</p><p>}</p><p><strong>3.4.8、环绕通知</strong></p><p>@Around(“execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))”)</p><p>public Object aroundMethod(ProceedingJoinPoint joinPoint){</p><p>String methodName &#x3D; joinPoint.getSignature().getName();</p><p>String args &#x3D; Arrays.toString(joinPoint.getArgs());</p><p>Object result &#x3D; null;</p><p>try {</p><p>System.out.println(“环绕通知–&gt;目标对象方法执行之前”);</p><p>&#x2F;&#x2F;目标方法的执行，目标方法的返回值一定要返回给外界调用者</p><p>result &#x3D; joinPoint.proceed();</p><p>System.out.println(“环绕通知–&gt;目标对象方法返回值之后”);</p><p>} catch (Throwable throwable) {</p><p>throwable.printStackTrace();</p><p>System.out.println(“环绕通知–&gt;目标对象方法出现异常时”);</p><p>} finally {</p><p>System.out.println(“环绕通知–&gt;目标对象方法执行完毕”);</p><p>}</p><p>return result;</p><p>}</p><p><strong>3.4.9、切面的优先级</strong></p><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的<strong>内外嵌套</strong>顺序。</p><p>优先级高的切面：外面<br>优先级低的切面：里面</p><p>使用@Order注解可以控制切面的优先级：</p><p>@Order(较小的数)：优先级高<br>@Order(较大的数)：优先级低</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.077.jpeg"><strong>3.5、基于XML的AOP（了解）</strong></p><p><strong>3.5.1、准备工作</strong></p><p>参考基于注解的AOP环境</p><p><strong>3.5.2、实现</strong></p><p>&lt;context:component-scan base-package&#x3D;”com.atguigu.aop.xml”&gt;&lt;&#x2F;context:component-</p><p>scan&gt;</p><p><a href="aop:config">aop:config</a></p><!--配置切面类--><p>&lt;aop:aspect ref&#x3D;”loggerAspect”&gt;</p><p>&lt;aop:pointcut id&#x3D;”pointCut” expression&#x3D;”execution(*</p><p>com.atguigu.aop.xml.CalculatorImpl.*(..))”&#x2F;&gt;</p><p>&lt;aop:before method&#x3D;”beforeMethod” pointcut-ref&#x3D;”pointCut”&gt;</aop:before></p><p>&lt;aop:after method&#x3D;”afterMethod” pointcut-ref&#x3D;”pointCut”&gt;</aop:after></p><p>&lt;aop:after-returning method&#x3D;”afterReturningMethod” returning&#x3D;”result”</p><p>pointcut-ref&#x3D;”pointCut”&gt;</aop:after-returning></p><p>&lt;aop:after-throwing method&#x3D;”afterThrowingMethod” throwing&#x3D;”ex” pointcut-</p><p>ref&#x3D;”pointCut”&gt;</aop:after-throwing></p><p>&lt;aop:around method&#x3D;”aroundMethod” pointcut-ref&#x3D;”pointCut”&gt;</aop:around></p><p></aop:aspect></p><p>&lt;aop:aspect ref&#x3D;”validateAspect” order&#x3D;”1”&gt;</p><p>&lt;aop:before method&#x3D;”validateBeforeMethod” pointcut-ref&#x3D;”pointCut”&gt;</p><p></aop:before></p><p></aop:aspect></p><p></aop:config></p><p><strong>4、声明式事务</strong></p><p><strong>4.1、JdbcTemplate</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.078.jpeg"><strong>4.1.1、简介</strong></p><p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p><p><strong>4.1.2、准备工作</strong></p><p><strong>①加入依赖</strong></p><dependencies><!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --><dependency><p><groupId>org.springframework</groupId></p><p><artifactId>spring-context</artifactId></p><p><version>5.3.1</version></p></dependency><!-- Spring 持久化层支持jar包 --><!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --><!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --><dependency><p><groupId>org.springframework</groupId></p><p><artifactId>spring-orm</artifactId></p><p><version>5.3.1</version></p></dependency><!-- Spring 测试相关 --><dependency><p><groupId>org.springframework</groupId></p><p><artifactId>spring-test</artifactId></p><p><version>5.3.1</version></p></dependency><!-- junit测试 --><dependency><p><groupId>junit</groupId></p><p><artifactId>junit</artifactId></p><p><version>4.12</version></p><p><scope>test</scope></p></dependency><!-- MySQL驱动 --><dependency><p><groupId>mysql</groupId></p><p><artifactId>mysql-connector-java</artifactId></p><p><version>8.0.16</version></p></dependency><!-- 数据源 --><dependency><p><groupId>com.alibaba</groupId></p><p><artifactId>druid</artifactId></p><p><version>1.0.31</version></p></dependency></dependencies><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.079.jpeg"><strong>②创建jdbc.properties</strong></p><p>jdbc.user&#x3D;root</p><p>jdbc.password&#x3D;atguigu</p><p>jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm</p><p>jdbc.driver&#x3D;com.mysql.cj.jdbc.Driver</p><p><strong>③配置Spring的配置文件</strong></p><!-- 导入外部属性文件 --><p>&lt;context:property-placeholder location&#x3D;”classpath:jdbc.properties” &#x2F;&gt;</p><!-- 配置数据源 --><bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource"><property name="url" value="${atguigu.url}"/><property name="driverClassName" value="${atguigu.driver}"/><property name="username" value="${atguigu.username}"/><property name="password" value="${atguigu.password}"/></bean><!-- 配置 JdbcTemplate --><bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"><!-- 装配数据源 --><property name="dataSource" ref="druidDataSource"/></bean><p><strong>4.1.3、测试</strong></p><p><strong>①在测试类装配 JdbcTemplate</strong></p><p>@RunWith(SpringJUnit4ClassRunner.class)</p><p>@ContextConfiguration(“classpath:spring-jdbc.xml”)</p><p>public class JDBCTemplateTest {</p><p>@Autowired</p><p>private JdbcTemplate jdbcTemplate;</p><p>}</p><p><strong>②测试增删改功能</strong></p><p>@Test</p><p>&#x2F;&#x2F;测试增删改功能</p><p>public void testUpdate(){</p><p>String sql &#x3D; “insert into t_emp values(null,?,?,?)”;</p><p>int result &#x3D; jdbcTemplate.update(sql, “张三”, 23, “男”);</p><p>System.out.println(result);</p><p>}</p><p><strong>③查询一条数据为实体类对象</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.080.jpeg">@Test</p><p>&#x2F;&#x2F;查询一条数据为一个实体类对象</p><p>public void testSelectEmpById(){</p><p>String sql &#x3D; “select * from t_emp where id &#x3D; ?”;</p><p>Emp emp &#x3D; jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper&lt;&gt;</p><p>(Emp.class), 1);</p><p>System.out.println(emp);</p><p>}</p><p><strong>④查询多条数据为一个list集合</strong></p><p>@Test</p><p>&#x2F;&#x2F;查询多条数据为一个list集合</p><p>public void testSelectList(){</p><p>String sql &#x3D; “select * from t_emp”;</p><p>List<Emp> list &#x3D; jdbcTemplate.query(sql, new BeanPropertyRowMapper&lt;&gt;</p><p>(Emp.class));</p><p>list.forEach(emp -&gt; System.out.println(emp));</p><p>}</p><p><strong>⑤查询单行单列的值</strong></p><p>@Test</p><p>&#x2F;&#x2F;查询单行单列的值</p><p>public void selectCount(){</p><p>String sql &#x3D; “select count(id) from t_emp”;</p><p>Integer count &#x3D; jdbcTemplate.queryForObject(sql, Integer.class);</p><p>System.out.println(count);</p><p>}</p><p><strong>4.2、声明式事务概念</strong></p><p><strong>4.2.1、编程式事务</strong></p><p>事务功能的相关操作全部通过自己编写代码来实现：</p><p>Connection conn &#x3D; …;</p><p>try {</p><p>&#x2F;&#x2F; 开启事务：关闭事务的自动提交</p><p>conn.setAutoCommit(false);</p><p>&#x2F;&#x2F; 核心操作</p><p>&#x2F;&#x2F; 提交事务</p><p>conn.commit();</p><p>}catch(Exception e){</p><p>&#x2F;&#x2F; 回滚事务</p><p>conn.rollBack();</p><p>}finally{</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.081.jpeg">&#x2F;&#x2F; 释放数据库连接</p><p>conn.close();</p><p>}</p><p>编程式的实现方式存在缺陷：</p><p>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。 代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复<br>用。</p><p><strong>4.2.2、声明式事务</strong></p><p>既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出<br>来，进行相关的封装。</p><p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p><p>好处1：提高开发效率 好处2：消除了冗余的代码</p><p>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性 能等各个方面的优化</p><p>所以，我们可以总结下面两个概念：</p><p><strong>编程式</strong>：<strong>自己写代码</strong>实现功能 <strong>声明式</strong>：通过<strong>配置</strong>让<strong>框架</strong>实现功能</p><p><strong>4.3、基于注解的声明式事务</strong></p><p><strong>4.3.1、准备工作</strong></p><p><strong>①加入依赖</strong></p><dependencies><!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --><dependency><p><groupId>org.springframework</groupId></p><p><artifactId>spring-context</artifactId></p><p><version>5.3.1</version></p></dependency><!-- Spring 持久化层支持jar包 --><!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --><!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --><dependency><p><groupId>org.springframework</groupId></p><p><artifactId>spring-orm</artifactId></p><p><version>5.3.1</version></p></dependency><!-- Spring 测试相关 --><dependency><p><groupId>org.springframework</groupId></p><p><artifactId>spring-test</artifactId></p><p><version>5.3.1</version></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.082.jpeg"></dependency></p><!-- junit测试 --><dependency><p><groupId>junit</groupId></p><p><artifactId>junit</artifactId></p><p><version>4.12</version></p><p><scope>test</scope></p></dependency><!-- MySQL驱动 --><dependency><p><groupId>mysql</groupId></p><p><artifactId>mysql-connector-java</artifactId></p><p><version>8.0.16</version></p></dependency><!-- 数据源 --><dependency><p><groupId>com.alibaba</groupId></p><p><artifactId>druid</artifactId></p><p><version>1.0.31</version></p></dependency></dependencies><p><strong>②创建jdbc.properties</strong></p><p>jdbc.user&#x3D;root</p><p>jdbc.password&#x3D;atguigu</p><p>jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm?serverTimezone&#x3D;UTC</p><p>jdbc.driver&#x3D;com.mysql.cj.jdbc.Driver</p><p><strong>③配置Spring的配置文件</strong></p><!--扫描组件--><p>&lt;context:component-scan base-package&#x3D;”com.atguigu.spring.tx.annotation”&gt;</p><p></context:component-scan></p><!-- 导入外部属性文件 --><p>&lt;context:property-placeholder location&#x3D;”classpath:jdbc.properties” &#x2F;&gt;</p><!-- 配置数据源 --><bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource"><property name="url" value="${jdbc.url}"/><property name="driverClassName" value="${jdbc.driver}"/><property name="username" value="${jdbc.username}"/><property name="password" value="${jdbc.password}"/></bean><!-- 配置 JdbcTemplate --><bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"><!-- 装配数据源 --><property name="dataSource" ref="druidDataSource"/></bean><p><strong>④创建表</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.083.jpeg">CREATE TABLE <code>t\_book</code> (</p><p><code>book\_id</code> int(11) NOT NULL AUTO_INCREMENT COMMENT ‘主键’,</p><p><code>book\_name</code> varchar(20) DEFAULT NULL COMMENT ‘图书名称’,</p><p><code>price</code> int(11) DEFAULT NULL COMMENT ‘价格’,</p><p><code>stock</code> int(10) unsigned DEFAULT NULL COMMENT ‘库存（无符号）’,</p><p>PRIMARY KEY (<code>book\_id</code>)</p><p>) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;3 DEFAULT CHARSET&#x3D;utf8;</p><p>insert into <code>t\_book</code>(<code>book\_id</code>,<code>book\_name</code>,<code>price</code>,<code>stock</code>) values (1,’斗破苍</p><p>穹’,80,100),(2,’斗罗大陆’,50,100);</p><p>CREATE TABLE <code>t\_user</code> (</p><p><code>user\_id</code> int(11) NOT NULL AUTO_INCREMENT COMMENT ‘主键’,</p><p><code>username</code> varchar(20) DEFAULT NULL COMMENT ‘用户名’,</p><p><code>balance</code> int(10) unsigned DEFAULT NULL COMMENT ‘余额（无符号）’,</p><p>PRIMARY KEY (<code>user\_id</code>)</p><p>) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8;</p><p>insert into <code>t\_user</code>(<code>user\_id</code>,<code>username</code>,<code>balance</code>) values (1,’admin’,50);</p><p><strong>⑤创建组件</strong></p><p>创建BookController：</p><p>@Controller</p><p>public class BookController {</p><p>@Autowired</p><p>private BookService bookService;</p><p>public void buyBook(Integer bookId, Integer userId){</p><p>bookService.buyBook(bookId, userId);</p><p>}</p><p>}</p><p>创建接口BookService：</p><p>public interface BookService {</p><p>void buyBook(Integer bookId, Integer userId);</p><p>}</p><p>创建实现类BookServiceImpl：</p><p>@Service</p><p>public class BookServiceImpl implements BookService {</p><p>@Autowired</p><p>private BookDao bookDao;</p><p>@Override</p><p>public void buyBook(Integer bookId, Integer userId) {</p><p>&#x2F;&#x2F;查询图书的价格</p><p>Integer price &#x3D; bookDao.getPriceByBookId(bookId);</p><p>&#x2F;&#x2F;更新图书的库存</p><p>bookDao.updateStock(bookId);</p><p>&#x2F;&#x2F;更新用户的余额</p><p>bookDao.updateBalance(userId, price);</p><p>}</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.084.jpeg">}</p><p>创建接口BookDao：</p><p>public interface BookDao {</p><p>Integer getPriceByBookId(Integer bookId);</p><p>void updateStock(Integer bookId);</p><p>void updateBalance(Integer userId, Integer price);</p><p>}</p><p>创建实现类BookDaoImpl：</p><p>@Repository</p><p>public class BookDaoImpl implements BookDao {</p><p>@Autowired</p><p>private JdbcTemplate jdbcTemplate;</p><p>@Override</p><p>public Integer getPriceByBookId(Integer bookId) {</p><p>String sql &#x3D; “select price from t_book where book_id &#x3D; ?”;</p><p>return jdbcTemplate.queryForObject(sql, Integer.class, bookId);</p><p>}</p><p>@Override</p><p>public void updateStock(Integer bookId) {</p><p>String sql &#x3D; “update t_book set stock &#x3D; stock - 1 where book_id &#x3D; ?”;</p><p>jdbcTemplate.update(sql, bookId);</p><p>}</p><p>@Override</p><p>public void updateBalance(Integer userId, Integer price) {</p><p>String sql &#x3D; “update t_user set balance &#x3D; balance - ? where user_id &#x3D;</p><p>?”;</p><p>jdbcTemplate.update(sql, price, userId);</p><p>}</p><p>}</p><p><strong>4.3.2、测试无事务情况</strong></p><p><strong>①创建测试类</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.085.jpeg">@RunWith(SpringJUnit4ClassRunner.class)</p><p>@ContextConfiguration(“classpath:tx-annotation.xml”)</p><p>public class TxByAnnotationTest {</p><p>@Autowired</p><p>private BookController bookController;</p><p>@Test</p><p>public void testBuyBook(){</p><p>bookController.buyBook(1, 1);</p><p>}</p><p>}</p><p><strong>②模拟场景</strong></p><p>用户购买图书，先查询图书的价格，再更新图书的库存和用户的余额</p><p>假设用户id为1的用户，购买id为1的图书</p><p>用户余额为50，而图书价格为80</p><p>购买图书之后，用户的余额为-30，数据库中余额字段设置了无符号，因此无法将-30插入到余额字段</p><p>此时执行sql语句会抛出SQLException</p><p><strong>③观察结果</strong></p><p>因为没有添加事务，图书的库存更新了，但是用户的余额没有更新</p><p>显然这样的结果是错误的，购买图书是一个完整的功能，更新库存和更新余额要么都成功要么都失败</p><p><strong>4.3.3、加入事务</strong></p><p><strong>①添加事务配置</strong></p><p>在Spring的配置文件中添加配置：</p><p>&lt;bean id&#x3D;”transactionManager”</p><p>class&#x3D;”org.springframework.jdbc.datasource.DataSourceTransactionManager”&gt;</p><p><property name="dataSource" ref="dataSource"></property></p></bean><!--开启事务的注解驱动通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务--><!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就是这个默认值，则可以省略这个属性 --><p>&lt;tx:annotation-driven transaction-manager&#x3D;”transactionManager” &#x2F;&gt;</p><p>注意：导入的名称空间需要 <strong>tx 结尾</strong>的那个。</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.086.jpeg"><strong>②添加事务注解</strong></p><p>因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理</p><p>在BookServiceImpl的buybook()添加注解@Transactional</p><p><strong>③观察结果</strong></p><p>由于使用了Spring的声明式事务，更新库存和更新余额都没有执行</p><p><strong>4.3.4、@Transactional注解标识的位置</strong></p><p>@Transactional标识在方法上，咋只会影响该方法</p><p>@Transactional标识的类上，咋会影响类中所有的方法</p><p><strong>4.3.5、事务属性：只读</strong></p><p><strong>①介绍</strong></p><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这<br>样数据库就能够针对查询操作来进行优化。</p><p><strong>②使用方式</strong></p><p>@Transactional(readOnly &#x3D; true)</p><p>public void buyBook(Integer bookId, Integer userId) {</p><p>&#x2F;&#x2F;查询图书的价格</p><p>Integer price &#x3D; bookDao.getPriceByBookId(bookId);</p><p>&#x2F;&#x2F;更新图书的库存</p><p>bookDao.updateStock(bookId);</p><p>&#x2F;&#x2F;更新用户的余额</p><p>bookDao.updateBalance(userId, price);</p><p>&#x2F;&#x2F;System.out.println(1&#x2F;0);</p><p>}</p><p><strong>③注意</strong></p><p>对增删改操作设置只读会抛出下面异常：</p><p>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification<br>are not allowed</p><p><strong>4.3.6、事务属性：超时</strong></p><p><strong>①介绍</strong></p><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间 占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。</p><p>此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常<br>程序可以执行。</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.087.jpeg">概括来说就是一句话：超时回滚，释放资源。</p><p><strong>②使用方式</strong></p><p>@Transactional(timeout &#x3D; 3)</p><p>public void buyBook(Integer bookId, Integer userId) {</p><p>try {</p><p>TimeUnit.SECONDS.sleep(5);</p><p>} catch (InterruptedException e) {</p><p>e.printStackTrace();</p><p>}</p><p>&#x2F;&#x2F;查询图书的价格</p><p>Integer price &#x3D; bookDao.getPriceByBookId(bookId);</p><p>&#x2F;&#x2F;更新图书的库存</p><p>bookDao.updateStock(bookId);</p><p>&#x2F;&#x2F;更新用户的余额</p><p>bookDao.updateBalance(userId, price);</p><p>&#x2F;&#x2F;System.out.println(1&#x2F;0);</p><p>}</p><p><strong>③观察结果</strong></p><p>执行过程中抛出异常：</p><p>org.springframework.transaction.<strong>TransactionTimedOutException</strong>: Transaction timed out: deadline was Fri Jun 04 16:25:39 CST 2022</p><p><strong>4.3.7、事务属性：回滚策略</strong></p><p><strong>①介绍</strong></p><p>声明式事务默认只针对运行时异常回滚，编译时异常不回滚。</p><p>可以通过@Transactional中相关属性设置回滚策略</p><p>rollbackFor属性：需要设置一个Class类型的对象 rollbackForClassName属性：需要设置一个字符串类型的全类名<br>noRollbackFor属性：需要设置一个Class类型的对象<br>rollbackFor属性：需要设置一个字符串类型的全类名</p><p><strong>②使用方式</strong></p><p>@Transactional(noRollbackFor &#x3D; ArithmeticException.class)</p><p>&#x2F;&#x2F;@Transactional(noRollbackForClassName &#x3D; “java.lang.ArithmeticException”)</p><p>public void buyBook(Integer bookId, Integer userId) {</p><p>&#x2F;&#x2F;查询图书的价格</p><p>Integer price &#x3D; bookDao.getPriceByBookId(bookId);</p><p>&#x2F;&#x2F;更新图书的库存</p><p>bookDao.updateStock(bookId);</p><p>&#x2F;&#x2F;更新用户的余额</p><p>bookDao.updateBalance(userId, price);</p><p>System.out.println(1&#x2F;0);</p><p>}</p><p><strong>③观察结果</strong></p><p>虽然购买图书功能中出现了数学运算异常（ArithmeticException），但是我们设置的回滚策略是，当<br>出现ArithmeticException不发生回滚，因此购买图书的操作正常执行</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.088.jpeg"><strong>4.3.8、事务属性：事务隔离级别</strong></p><p><strong>①介绍</strong></p><p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事<br>务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同<br>的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p><p>隔离级别一共有四种：</p><p>读未提交：READ UNCOMMITTED</p><p>允许Transaction01读取Transaction02未提交的修改。</p><p>读已提交：READ COMMITTED、</p><p>要求Transaction01只能读取Transaction02已提交的修改。</p><p>可重复读：REPEATABLE READ</p><p>确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它 事务对这个字段进行更新。</p><p>串行化：SERIALIZABLE</p><p>确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它 事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p><p>各个隔离级别解决并发问题的能力见下表：</p><p><strong>隔离级别 脏读 不可重复读 幻读</strong></p><p>READ UNCOMMITTED 有 有 有</p><p>READ COMMITTED 无 有 有</p><p>REPEATABLE READ 无 无 有</p><p>SERIALIZABLE 无 无 无</p><p>各种数据库产品对事务隔离级别的支持程度：</p><p><strong>隔离级别 Oracle MySQL</strong></p><p>READ UNCOMMITTED × √</p><p>READ COMMITTED √(默认) √</p><p>REPEATABLE READ × √(默认)</p><p>SERIALIZABLE √ √</p><p><strong>②使用方式</strong></p><p>@Transactional(isolation &#x3D; Isolation.DEFAULT)&#x2F;&#x2F;使用数据库默认的隔离级别</p><p>@Transactional(isolation &#x3D; Isolation.READ_UNCOMMITTED)&#x2F;&#x2F;读未提交</p><p>@Transactional(isolation &#x3D; Isolation.READ_COMMITTED)&#x2F;&#x2F;读已提交</p><p>@Transactional(isolation &#x3D; Isolation.REPEATABLE_READ)&#x2F;&#x2F;可重复读</p><p>@Transactional(isolation &#x3D; Isolation.SERIALIZABLE)&#x2F;&#x2F;串行化</p><p><strong>4.3.9、事务属性：事务传播行为</strong></p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.089.jpeg"><strong>①介绍</strong></p><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中<br>运行，也可能开启一个新事务，并在自己的事务中运行。</p><p><strong>②测试</strong></p><p>创建接口CheckoutService：</p><p>public interface CheckoutService {</p><p>void checkout(Integer[] bookIds, Integer userId);</p><p>}</p><p>创建实现类CheckoutServiceImpl：</p><p>@Service</p><p>public class CheckoutServiceImpl implements CheckoutService {</p><p>@Autowired</p><p>private BookService bookService;</p><p>@Override</p><p>@Transactional</p><p>&#x2F;&#x2F;一次购买多本图书</p><p>public void checkout(Integer[] bookIds, Integer userId) {</p><p>for (Integer bookId : bookIds) {</p><p>bookService.buyBook(bookId, userId);</p><p>}</p><p>}</p><p>}</p><p>在BookController中添加方法：</p><p>@Autowired</p><p>private CheckoutService checkoutService;</p><p>public void checkout(Integer[] bookIds, Integer userId){</p><p>checkoutService.checkout(bookIds, userId);</p><p>}</p><p>在数据库中将用户的余额修改为100元</p><p><strong>③观察结果</strong></p><p>可以通过@Transactional中的propagation属性设置事务传播行为</p><p>修改BookServiceImpl中buyBook()上，注解@Transactional的propagation属性</p><p>@Transactional(propagation &#x3D; Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开<br>启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法buyBook()在checkout()中被调<br>用，checkout()上有事务注解，因此在此事务中执行。所购买的两本图书的价格为80和50，而用户的余<br>额为100，因此在购买第二本图书时余额不足失败，导致整个checkout()回滚，即只要有一本书买不<br>了，就都买不了</p><p>更多Java –大数据 – 前端 – UI&#x2F;UE - Android - 人工智能资料下载，可访问百度：尚硅谷官网(<a href="http://www.atguigu.com/">www.atguigu.com</a>)</p><p><img src="/SSM%E6%95%B4%E5%90%88.090.jpeg">@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启<br>的事务，都要开启新事务。同样的场景，每次购买图书都是在buyBook()的事务中执行，因此第一本图<br>书购买成功，事务结束，第二本图书购买失败，只在第二次的buyBook()中回滚，购买第一本图书不受<br>影响，即能买几本就买几本</p><p><strong>4.4、基于XML的声明式事务</strong></p><p><strong>4.3.1、场景模拟</strong></p><p>参考基于注解的声明式事务</p><p><strong>4.3.2、修改Spring配置文件</strong></p><p>将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：</p><p><a href="aop:config">aop:config</a></p><!-- 配置事务通知和切入点表达式 --><p>&lt;aop:advisor advice-ref&#x3D;”txAdvice” pointcut&#x3D;”execution(*</p><p>com.atguigu.spring.tx.xml.service.impl.*.*(..))”&gt;</aop:advisor></p><p></aop:config></p><!-- tx:advice标签：配置事务通知 --><!-- id属性：给事务通知标签设置唯一标识，便于引用 --><!-- transaction-manager属性：关联事务管理器 --><p>&lt;tx:advice id&#x3D;”txAdvice” transaction-manager&#x3D;”transactionManager”&gt;</p><p><a href="tx:attributes">tx:attributes</a></p><!-- tx:method标签：配置具体的事务方法 --><!-- name属性：指定方法名，可以使用星号代表多个字符 --><p>&lt;tx:method name&#x3D;”get*“ read-only&#x3D;”true”&#x2F;&gt;</p><p>&lt;tx:method name&#x3D;”query*“ read-only&#x3D;”true”&#x2F;&gt;</p><p>&lt;tx:method name&#x3D;”find*“ read-only&#x3D;”true”&#x2F;&gt;</p><!-- read-only属性：设置只读属性 --><!-- rollback-for属性：设置回滚的异常 --><!-- no-rollback-for属性：设置不回滚的异常 --><!-- isolation属性：设置事务的隔离级别 --><!-- timeout属性：设置事务的超时属性 --><!-- propagation属性：设置事务的传播行为 --><p>&lt;tx:method name&#x3D;”save*“ read-only&#x3D;”false” rollback-</p><p>for&#x3D;”java.lang.Exception” propagation&#x3D;”REQUIRES_NEW”&#x2F;&gt;</p><p>&lt;tx:method name&#x3D;”update*“ read-only&#x3D;”false” rollback-</p><p>for&#x3D;”java.lang.Exception” propagation&#x3D;”REQUIRES_NEW”&#x2F;&gt;</p><p>&lt;tx:method name&#x3D;”delete*“ read-only&#x3D;”false” rollback-</p><p>for&#x3D;”java.lang.Exception” propagation&#x3D;”REQUIRES_NEW”&#x2F;&gt;</p><p></tx:attributes></p><p></tx:advice></p><p>注意：基于xml实现的声明式事务，必须引入aspectJ的依赖</p><dependency><p><groupId>org.springframework</groupId></p><p><artifactId>spring-aspects</artifactId></p><p><version>5.3.1</version></p></dependency><h1 id="三、SpringMVC"><a href="#三、SpringMVC" class="headerlink" title="三、SpringMVC"></a><strong>三、SpringMVC</strong></h1><h2 id="1、SpringMVC简介"><a href="#1、SpringMVC简介" class="headerlink" title="1、SpringMVC简介"></a><strong>1、SpringMVC简介</strong></h2><h3 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a><strong>1.1、什么是MVC</strong></h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分为两类：</p><p>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</p><p>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</p><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据<br>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><p>MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller<br>调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果<br>找到相应的View视图，渲染数据后最终响应给浏览器</p><h3 id="1-2、什么是SpringMVC"><a href="#1-2、什么是SpringMVC" class="headerlink" title="1.2、什么是SpringMVC"></a><strong>1.2、什么是SpringMVC</strong></h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p><p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、<br>WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目<br>表述层开发的<strong>首选方案</strong>。</p><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台 servlet</p><h3 id="1-3、SpringMVC的特点"><a href="#1-3、SpringMVC的特点" class="headerlink" title="1.3、SpringMVC的特点"></a><strong>1.3、SpringMVC的特点</strong></h3><p><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</p><p><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一 处理</p><p>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案<br>代码清新简洁</strong>，大幅度提升开发效率</p><p>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可<br><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</p><h2 id="2、入门案例"><a href="#2、入门案例" class="headerlink" title="2、入门案例"></a><strong>2、入门案例</strong></h2><h3 id="2-1、开发环境-1"><a href="#2-1、开发环境-1" class="headerlink" title="2.1、开发环境"></a><strong>2.1、开发环境</strong></h3><p>IDE：idea 2019.2</p><p>构建工具：maven3.5.4</p><p>服务器：tomcat8.5</p><p>Spring版本：5.3.1</p><h3 id="2-2、创建maven工程-1"><a href="#2-2、创建maven工程-1" class="headerlink" title="2.2、创建maven工程"></a><strong>2.2、创建maven工程</strong></h3><h4 id="①添加web模块"><a href="#①添加web模块" class="headerlink" title="①添加web模块"></a><strong>①添加web模块</strong></h4><h4 id="②打包方式：war"><a href="#②打包方式：war" class="headerlink" title="②打包方式：war"></a><strong>②打包方式：war</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220810103511603.png" alt="image-20220810103511603"></p><p><strong>注意路径默认是错的，配置文件应该是在src\main\webapp下</strong></p><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220810103618954.png" alt="image-20220810103618954"></p><h4 id="③引入依赖"><a href="#③引入依赖" class="headerlink" title="③引入依赖"></a><strong>③引入依赖</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC：包括了Spring所用的jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠 传递性导入。</p><h3 id="2-3、配置web-xml"><a href="#2-3、配置web-xml" class="headerlink" title="2.3、配置web.xml"></a><strong>2.3、配置web.xml</strong></h3><p>注册SpringMVC的前端控制器DispatcherServlet</p><h4 id="①默认配置方式"><a href="#①默认配置方式" class="headerlink" title="①默认配置方式"></a><strong>①默认配置方式</strong></h4><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<servlet-name>-<br>servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-<br>servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器DispatcherServlet，对浏览器发送的请求统一进行处理</span></span><br><span class="line"><span class="comment">     SpringMVC 的配置文件默认的位置和名称</span></span><br><span class="line"><span class="comment">     位置：WEB-INF 下</span></span><br><span class="line"><span class="comment">     名称：&lt;servlet-name&gt;-servlet.xml，当前配置下的配置文件名为SpringMVC-servlet.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--我们要让所用的浏览器请求，都经过ispatcherServlet Servlet组件进行处理，所以这里要拦截浏览器所有的请求</span></span><br><span class="line"><span class="comment">        /：拦截所有请求但不包括.jsp 请求</span></span><br><span class="line"><span class="comment">        /*：拦截所有请求但包括.jsp 请求</span></span><br><span class="line"><span class="comment">        而 DispatcherServlet 是不能处理 jsp 请求的，Tomcat.xml 已经配置了，会有专门的组件处理 jsp 请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②扩展配置方式"><a href="#②扩展配置方式" class="headerlink" title="②扩展配置方式"></a><strong>②扩展配置方式</strong></h4><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置<br>SpringMVC前端控制器DispatcherServlet的初始化时间</p><!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --><servlet><p><servlet-name>springMVC</servlet-name></p><p><servlet-class>org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-</p><p>class&gt;</p><!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --><init-param><!-- contextConfigLocation为固定值 --><p><param-name>contextConfigLocation</param-name></p><!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --><p><param-value>classpath:springMVC.xml</param-value></p></init-param><!--作为框架的核心组件，在启动过程中有大量的初始化操作要做而这些操作放在第一次请求时才执行会严重影响访问速度因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时--><p><load-on-startup>1</load-on-startup></p></servlet><servlet-mapping><p><servlet-name>springMVC</servlet-name></p><!--设置springMVC的核心控制器所能处理的请求的请求路径/所匹配的请求可以是/login或.html或.js或.css方式的请求路径但是/不能匹配.jsp请求路径的请求--><p><url-pattern>&#x2F;</url-pattern></p></servlet-mapping><p>注：</p><p><url-pattern>标签中使用&#x2F;和&#x2F;*的区别：</p><p>&#x2F;所匹配的请求可以是&#x2F;login或.html或.js或.css方式的请求路径，但是&#x2F;不能匹配.jsp请求路径的请 求</p><p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p><p>&#x2F;*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用&#x2F;*的写 法</p><h3 id="2-4、创建请求控制器"><a href="#2-4、创建请求控制器" class="headerlink" title="2.4、创建请求控制器"></a><strong>2.4、创建请求控制器</strong></h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要<br>创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识<br>为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p><p>@Controller</p><p>public class HelloController {</p><p>}</p><h3 id="2-5、创建SpringMVC的配置文件"><a href="#2-5、创建SpringMVC的配置文件" class="headerlink" title="2.5、创建SpringMVC的配置文件"></a><strong>2.5、创建SpringMVC的配置文件</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zzuli.controller&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                                   <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                                   <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6、测试HelloWorld"><a href="#2-6、测试HelloWorld" class="headerlink" title="2.6、测试HelloWorld"></a><strong>2.6、测试HelloWorld</strong></h3><p>添加Tomcat</p><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220810115657289.png" alt="image-20220810115657289"></p><h4 id="①实现对首页的访问"><a href="#①实现对首页的访问" class="headerlink" title="①实现对首页的访问"></a><strong>①实现对首页的访问</strong></h4><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  <span class="doctag">@RequestMapping</span> 请求映射，把浏览器发送的请求映射到这个方法的执行</span></span><br><span class="line"><span class="comment">  *  &quot;/&quot; 由服务器解析的，解析后的内容就是 http://localhost:8080/SpringMVC/</span></span><br><span class="line"><span class="comment">  *  前面我们也配过 视图解析 所以将逻辑视图返回就好</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//设置视图名称</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②通过超链接跳转到指定页面"><a href="#②通过超链接跳转到指定页面" class="headerlink" title="②通过超链接跳转到指定页面"></a><strong>②通过超链接跳转到指定页面</strong></h4><p>在主页index.html中设置超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--/: 会由浏览器解析成绝对路径 http://localhost:8080 th:href=&quot;@&#123;/&#125;&quot;  会将上下文路径给加上--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>测试SpringMVC<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/hello&quot;</span>&gt;</span>测试绝对路径<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在请求控制器中创建处理请求的方法</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7、总结"><a href="#2-7、总结" class="headerlink" title="2.7、总结"></a><strong>2.7、总结</strong></h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器<br>DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，<br>将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的<br>控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会<br>被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视<br>图所对应页面</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC的前端控制器DispatcherServlet，对浏览器发送的请求统一进行处理</span></span><br><span class="line"><span class="comment">         SpringMVC 的配置文件默认的位置和名称</span></span><br><span class="line"><span class="comment">         位置：WEB-INF 下</span></span><br><span class="line"><span class="comment">         名称：&lt;servlet-name&gt;-servlet.xml，当前配置下的配置文件名为SpringMVC-servlet.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置servlet 初始化参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--类路径：放到 java 或 resource 都行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--防止在第一次访问时，初始化时间过长，所以要将初始化时间提前到服务器启动时--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--我们要让所用的浏览器请求，都经过ispatcherServlet Servlet组件进行处理，所以这里要拦截浏览器所有的请求</span></span><br><span class="line"><span class="comment">            /：拦截所有请求但不包括.jsp 请求</span></span><br><span class="line"><span class="comment">            /*：拦截所有请求但包括.jsp 请求</span></span><br><span class="line"><span class="comment">            而 DispatcherServlet 是不能处理 jsp 请求的，Tomcat.xml 已经配置了，会有专门的组件处理 jsp 请求</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、-RequestMapping注解"><a href="#3、-RequestMapping注解" class="headerlink" title="3、@RequestMapping注解"></a><strong>3、@RequestMapping注解</strong></h2><h3 id="3-1、-RequestMapping注解的功能"><a href="#3-1、-RequestMapping注解的功能" class="headerlink" title="3.1、@RequestMapping注解的功能"></a><strong>3.1、@RequestMapping注解的功能</strong></h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联 起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h3 id="3-2、-RequestMapping注解的位置"><a href="#3-2、-RequestMapping注解的位置" class="headerlink" title="3.2、@RequestMapping注解的位置"></a><strong>3.2、@RequestMapping注解的位置</strong></h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRequestMappingController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">protal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/SSM%E6%95%B4%E5%90%88.assets/image-20220810165511523.png" alt="image-20220810165511523"></p><h3 id="3-3、-RequestMapping注解的value属性"><a href="#3-3、-RequestMapping注解的value属性" class="headerlink" title="3.3、@RequestMapping注解的value属性"></a><strong>3.3、@RequestMapping注解的value属性</strong></h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够<strong>匹配多个请求地址</strong> 所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRequestMappingController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">protal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/hello&quot;, &quot;/abc&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、-RequestMapping注解的method属性"><a href="#3-4、-RequestMapping注解的method属性" class="headerlink" title="3.4、@RequestMapping注解的method属性"></a><strong>3.4、@RequestMapping注解的method属性</strong></h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配 多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错<br>405：Request method ‘POST’ not supported</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/hello&quot;, &quot;/abc&quot;&#125;, </span></span><br><span class="line"><span class="meta">                method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射–&gt;@GetMapping</p><p>处理post请求的映射–&gt;@PostMapping</p><p>处理put请求的映射–&gt;@PutMapping</p><p>处理delete请求的映射–&gt;@DeleteMapping</p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符<br>串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在<br>RESTful部分会讲到</p><h3 id="3-5、-RequestMapping注解的params属性（了解）"><a href="#3-5、-RequestMapping注解的params属性（了解）" class="headerlink" title="3.5、@RequestMapping注解的params属性（了解）"></a><strong>3.5、@RequestMapping注解的params属性（了解）</strong></h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数 和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value</p><p>“param!&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数但是param!&#x3D;value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/hello&quot;, &quot;/abc&quot;&#125;,</span></span><br><span class="line"><span class="meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;,</span></span><br><span class="line"><span class="meta">        params = &#123;&quot;username&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello?username=admin&#125;&quot;</span>&gt;</span>测试@requestMapping的params属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello(username=&#x27;admin&#x27;)&#125;&quot;</span>&gt;</span>测试@requestMapping的params属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时<br>页面回报错400：Parameter conditions “username, password!&#x3D;123456” not met for actual<br>request parameters: username&#x3D;{admin}, password&#x3D;{123456}</p><h3 id="3-6、-RequestMapping注解的headers属性（了解）"><a href="#3-6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="3.6、@RequestMapping注解的headers属性（了解）"></a><strong>3.6、@RequestMapping注解的headers属性（了解）</strong></h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信 息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header&#x3D;value</p><p>“header!&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header!&#x3D;value</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面<br>显示404错误，即资源未找到</p><h3 id="3-7、SpringMVC支持ant风格的路径"><a href="#3-7、SpringMVC支持ant风格的路径" class="headerlink" title="3.7、SpringMVC支持ant风格的路径"></a><strong>3.7、SpringMVC支持ant风格的路径</strong></h3><p>？：表示任意的单个字符（不包括？）</p><p>*：表示任意的0个或多个字符（不包括？和 &#x2F;）</p><p>**：表示任意层数的任意目录</p><p>注意：在使用**时，只能使用&#x2F;**&#x2F;xxx的方式</p><h3 id="3-8、SpringMVC支持路径中的占位符（重点）"><a href="#3-8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="3.8、SpringMVC支持路径中的占位符（重点）"></a><strong>3.8、SpringMVC支持路径中的占位符（重点）</strong></h3><p>原始方式：&#x2F;deleteUser?id&#x3D;1</p><p>rest方式：&#x2F;user&#x2F;delete&#x2F;1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服<br>务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在<br>通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test/rest/admin/1&#125;&quot;</span>&gt;</span>测试@requestMapping的占位符<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;test/rest/&#123;username&#125;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;username&quot;)</span> String username, <span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+ username + <span class="string">&quot;, id:&quot;</span> + id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、SpringMVC获取请求参数"><a href="#4、SpringMVC获取请求参数" class="headerlink" title="4、SpringMVC获取请求参数"></a><strong>4、SpringMVC获取请求参数</strong></h2><h3 id="4-1、通过ServletAPI获取"><a href="#4-1、通过ServletAPI获取" class="headerlink" title="4.1、通过ServletAPI获取"></a><strong>4.1、通过ServletAPI获取</strong></h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请 求的请求报文的对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/param/servletAPI&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密  码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/param/servletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getParamByServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username = &quot;</span> + username + <span class="string">&quot; , password = &quot;</span> + password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、通过控制器方法的形参获取请求参数"><a href="#4-2、通过控制器方法的形参获取请求参数" class="headerlink" title="4.2、通过控制器方法的形参获取请求参数"></a><strong>4.2、通过控制器方法的形参获取请求参数</strong></h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在 DispatcherServlet中就会将请求参数赋值给相应的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/param&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密  码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getParam</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username = &quot;</span> + username + <span class="string">&quot; , password = &quot;</span> + password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>名字不一致时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/param&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密  码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getParam</span><span class="params">(<span class="meta">@RequestParam(&quot;userName&quot;)</span> String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username = &quot;</span> + username + <span class="string">&quot; , password = &quot;</span> + password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串<br>数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p><h3 id="4-3、-RequestParam"><a href="#4-3、-RequestParam" class="headerlink" title="4.3、@RequestParam"></a><strong>4.3、@RequestParam</strong></h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系<br>@RequestParam注解一共有三个属性： value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为true</p><p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置<br>defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为<br>false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为<br>null</p><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值<br>为””时，则使用默认值为形参赋值</p><h3 id="4-4、-RequestHeader"><a href="#4-4、-RequestHeader" class="headerlink" title="4.4、@RequestHeader"></a><strong>4.4、@RequestHeader</strong></h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="4-5、-CookieValue"><a href="#4-5、-CookieValue" class="headerlink" title="4.5、@CookieValue"></a><strong>4.5、@CookieValue</strong></h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="4-6、通过POJO获取请求参数"><a href="#4-6、通过POJO获取请求参数" class="headerlink" title="4.6、通过POJO获取请求参数"></a><strong>4.6、通过POJO获取请求参数</strong></h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实<br>体类中的属性名一致，那么请求参数就会为此属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/param/pojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密  码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/param/pojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getParamByPojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7、解决获取请求参数的乱码问题"><a href="#4-7、解决获取请求参数的乱码问题" class="headerlink" title="4.7、解决获取请求参数的乱码问题"></a><strong>4.7、解决获取请求参数的乱码问题</strong></h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是<br>必须在web.xml中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodeingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--框架有默认的编码，需要自己设为utf-8--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        只设置encoding 只是设置请求的编码，</span></span><br><span class="line"><span class="comment">        forceEncoding，响应的编码，才能起效</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p><h2 id="5、域对象共享数据"><a href="#5、域对象共享数据" class="headerlink" title="5、域对象共享数据"></a><strong>5、域对象共享数据</strong></h2><h3 id="5-1、使用ServletAPI向request域对象共享数据"><a href="#5-1、使用ServletAPI向request域对象共享数据" class="headerlink" title="5.1、使用ServletAPI向request域对象共享数据"></a><strong>5.1、使用ServletAPI向request域对象共享数据</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2、使用ModelAndView向request域对象共享数据"><a href="#5-2、使用ModelAndView向request域对象共享数据" class="headerlink" title="5.2、使用ModelAndView向request域对象共享数据"></a><strong>5.2、使用ModelAndView向request域对象共享数据</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test/mav&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testMAV</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView 包含 model 和 view</span></span><br><span class="line"><span class="comment">     * model: 向请求域中共享数据</span></span><br><span class="line"><span class="comment">     * view: 向逻辑视图跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//向请求域中共享数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;testRequestScope&quot;</span>,<span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置逻辑视图</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3、使用Model向request域对象共享数据"><a href="#5-3、使用Model向request域对象共享数据" class="headerlink" title="5.3、使用Model向request域对象共享数据"></a><strong>5.3、使用Model向request域对象共享数据</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test/model&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4、使用map向request域对象共享数据"><a href="#5-4、使用map向request域对象共享数据" class="headerlink" title="5.4、使用map向request域对象共享数据"></a><strong>5.4、使用map向request域对象共享数据</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test/map&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;hello,map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5、使用ModelMap向request域对象共享数据"><a href="#5-5、使用ModelMap向request域对象共享数据" class="headerlink" title="5.5、使用ModelMap向request域对象共享数据"></a><strong>5.5、使用ModelMap向request域对象共享数据</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test/modelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;hello,modelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6、Model、ModelMap、Map的关系"><a href="#5-6、Model、ModelMap、Map的关系" class="headerlink" title="5.6、Model、ModelMap、Map的关系"></a><strong>5.6、Model、ModelMap、Map的关系</strong></h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><p>public interface Model{}</p><p>public class ModelMap extends LinkedHashMap&lt;String, Object&gt; {}</p><p>public class ExtendedModelMap extends ModelMap implements Model {}</p><p>public class BindingAwareModelMap extends ExtendedModelMap {}</p><h3 id="5-7、向session域共享数据"><a href="#5-7、向session域共享数据" class="headerlink" title="5.7、向session域共享数据"></a><strong>5.7、向session域共享数据</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test/session&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-8、向application域共享数据"><a href="#5-8、向application域共享数据" class="headerlink" title="5.8、向application域共享数据"></a><strong>5.8、向application域共享数据</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test/application&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    servletContext.setAttribute(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、SpringMVC的视图"><a href="#6、SpringMVC的视图" class="headerlink" title="6、SpringMVC的视图"></a><strong>6、SpringMVC的视图</strong></h2><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视<br>图解析器解析之后所得到的是ThymeleafView</p><h3 id="6-1、ThymeleafView"><a href="#6-1、ThymeleafView" class="headerlink" title="6.1、ThymeleafView"></a><strong>6.1、ThymeleafView</strong></h3><p>当控制器方法中所设置的视图名称<strong>没有任何前缀</strong>时，此时的视图名称会被SpringMVC配置文件中所配置 的视图解析器解析，视图名称拼接视图前缀和视图</p><p>后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestViewController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test/view/thymeleaf&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testThymeleafview</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2、转发视图"><a href="#6-2、转发视图" class="headerlink" title="6.2、转发视图"></a><strong>6.2、转发视图</strong></h3><p>SpringMVC中默认的转发视图是InternalResourceView<br>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视<br>图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部<br>分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:&#x2F;“，”forward:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test/view/forward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testInternalResourceView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/test/model&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3、重定向视图"><a href="#6-3、重定向视图" class="headerlink" title="6.3、重定向视图"></a><strong>6.3、重定向视图</strong></h3><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不<br>会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最<br>终路径通过重定向的方式实现跳转</p><p>例如”redirect:&#x2F;“，”redirect:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test/view/redirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testInternalRedirectView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/test/model&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以&#x2F;开头，若是则会自 动拼接上下文路径</p><h3 id="6-4、视图控制器view-controller"><a href="#6-4、视图控制器view-controller" class="headerlink" title="6.4、视图控制器view-controller"></a><strong>6.4、视图控制器view-controller</strong></h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-<br>controller标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    视图控制器：为当前的请求设置视图名称实现名称跳转</span></span><br><span class="line"><span class="comment">    诺设置视图控制器，则只有视图控制器的请求会被处理，其他的请求将全部404</span></span><br><span class="line"><span class="comment">    此时必须再配置一个标签&lt;mvc:annotation-driven/&gt;，开启mvc的注解驱动</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、RESTful"><a href="#7、RESTful" class="headerlink" title="7、RESTful"></a><strong>7、RESTful</strong></h2><h3 id="7-1、RESTful简介"><a href="#7-1、RESTful简介" class="headerlink" title="7.1、RESTful简介"></a><strong>7.1、RESTful简介</strong></h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><h4 id="①资源"><a href="#①资源" class="headerlink" title="①资源"></a><strong>①资源</strong></h4><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个<br>可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、<br>数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端<br>应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个<br>资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴<br>趣的客户端应用，可以通过资源的URI与其进行交互。</p><h4 id="②资源的表述"><a href="#②资源的表述" class="headerlink" title="②资源的表述"></a><strong>②资源的表述</strong></h4><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交<br>换）。资源的表述可以有多种格式，例如HTML&#x2F;XML&#x2F;JSON&#x2F;纯文本&#x2F;图片&#x2F;视频&#x2F;音频等等。资源的表述格<br>式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><h4 id="③状态转移"><a href="#③状态转移" class="headerlink" title="③状态转移"></a><strong>③状态转移</strong></h4><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资 源的表述，来间接实现操作资源的目的。</p><h3 id="7-2、RESTful的实现"><a href="#7-2、RESTful的实现" class="headerlink" title="7.2、RESTful的实现"></a><strong>7.2、RESTful的实现</strong></h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方<br>式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id&#x3D;1</td><td>user&#x2F;1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id&#x3D;1</td><td>user&#x2F;1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h3 id="7-3、HiddenHttpMethodFilter"><a href="#7-3、HiddenHttpMethodFilter" class="headerlink" title="7.3、HiddenHttpMethodFilter"></a><strong>7.3、HiddenHttpMethodFilter</strong></h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><p>a&gt;当前请求的请求方式必须为post</p><p>b&gt;当前请求必须传输请求参数_method</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改用户信息&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数<br>_method的值，因此请求参数_method的值才是最终的请求方式</p><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置处理请求方式的过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：</p><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和 HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：</p><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字 符集的</p><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p><p>String paramValue &#x3D; request.getParameter(this.methodParam);</p><h2 id="8、RESTful案例"><a href="#8、RESTful案例" class="headerlink" title="8、RESTful案例"></a><strong>8、RESTful案例</strong></h2><h3 id="8-1、准备工作"><a href="#8-1、准备工作" class="headerlink" title="8.1、准备工作"></a><strong>8.1、准备工作</strong></h3><p>和传统 CRUD 一样，实现对员工信息的增删改查。</p><p>搭建环境</p><p>准备实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//1 male, 0 female</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastName</span><span class="params">(String lastName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(Integer gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备dao模拟数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Employee&gt;();</span><br><span class="line">        employees.put(<span class="number">1001</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        employees.put(<span class="number">1002</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        employees.put(<span class="number">1003</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        employees.put(<span class="number">1004</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        employees.put(<span class="number">1005</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">            employee.setId(initId++);</span><br><span class="line">        &#125;</span><br><span class="line">        employees.put(employee.getId(), employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2、功能清单"><a href="#8-2、功能清单" class="headerlink" title="8.2、功能清单"></a><strong>8.2、功能清单</strong></h3><p><strong>功能          URL                    地址 请求方式</strong></p><p>访问首页√   &#x2F;                         GET</p><p>查询全部数据√ &#x2F;employee GET</p><p>删除√ &#x2F;employee&#x2F;2 DELETE</p><p>跳转到添加数据页面√ &#x2F;toAdd GET</p><p>执行保存√ &#x2F;employee POST</p><p>跳转到更新数据页面√ &#x2F;employee&#x2F;2 GET</p><p>执行更新√ &#x2F;employee PUT</p><h3 id="8-3、具体功能：访问首页"><a href="#8-3、具体功能：访问首页" class="headerlink" title="8.3、具体功能：访问首页"></a><strong>8.3、具体功能：访问首页</strong></h3><h4 id="①配置view-controller"><a href="#①配置view-controller" class="headerlink" title="①配置view-controller"></a><strong>①配置view-controller</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    视图控制器：为当前的请求设置视图名称实现名称跳转</span></span><br><span class="line"><span class="comment">    诺设置视图控制器，则只有视图控制器的请求会被处理，其他的请求将全部404</span></span><br><span class="line"><span class="comment">    此时必须再配置一个标签&lt;mvc:annotation-driven/&gt;，开启mvc的注解驱动</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②创建页面"><a href="#②创建页面" class="headerlink" title="②创建页面"></a>②创建页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span>&gt;</span>查询所有的用户信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/1&#125;&quot;</span>&gt;</span>根据id查询所有的用户信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加用户信息&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改用户信息&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/1&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除用户信息&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>查询所有的列表信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-4、具体功能：查询所有员工数据"><a href="#8-4、具体功能：查询所有员工数据" class="headerlink" title="8.4、具体功能：查询所有员工数据"></a><strong>8.4、具体功能：查询所有员工数据</strong></h3><h4 id="①控制器方法"><a href="#①控制器方法" class="headerlink" title="①控制器方法"></a><strong>①控制器方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAllEmployee</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; allEmp = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;allEmp&quot;</span>,allEmp);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②创建employee-list-html"><a href="#②创建employee-list-html" class="headerlink" title="②创建employee_list.html"></a>②创建employee_list.html</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/css/index_work.css&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>employee_list<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>options<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;allEmp&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-5、具体功能：删除"><a href="#8-5、具体功能：删除" class="headerlink" title="8.5、具体功能：删除"></a><strong>8.5、具体功能：删除</strong></h3><h4 id="①创建处理delete请求方式的表单"><a href="#①创建处理delete请求方式的表单" class="headerlink" title="①创建处理delete请求方式的表单"></a><strong>①创建处理delete请求方式的表单</strong></h4><h4 id="②删除超链接绑定点击事件"><a href="#②删除超链接绑定点击事件" class="headerlink" title="②删除超链接绑定点击事件"></a><strong>②删除超链接绑定点击事件</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>employee list<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/css/index_work.css&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>employee list<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>options（<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/to/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>）<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;allEmp&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee()&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">deleteEmployee</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取form表单</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;form&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将超链接的href属性值赋值给form表单的action属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//event.target表示当前触发事件的标签</span></span></span><br><span class="line"><span class="language-javascript">                form.<span class="property">action</span> = event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//表单提交</span></span></span><br><span class="line"><span class="language-javascript">                form.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//阻止超链接的默认行为</span></span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③控制器方法"><a href="#③控制器方法" class="headerlink" title="③控制器方法"></a><strong>③控制器方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6、具体功能：跳转到添加数据页面"><a href="#8-6、具体功能：跳转到添加数据页面" class="headerlink" title="8.6、具体功能：跳转到添加数据页面"></a><strong>8.6、具体功能：跳转到添加数据页面</strong></h3><h4 id="①配置view-controller-1"><a href="#①配置view-controller-1" class="headerlink" title="①配置view-controller"></a><strong>①配置view-controller</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/to/add&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②创建employee-add-html"><a href="#②创建employee-add-html" class="headerlink" title="②创建employee_add.html"></a>②创建employee_add.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>添加员工<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/css/index_work.css&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>add employee<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>email<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>男</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>女</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-7、具体功能：执行保存"><a href="#8-7、具体功能：执行保存" class="headerlink" title="8.7、具体功能：执行保存"></a><strong>8.7、具体功能：执行保存</strong></h3><h4 id="①控制器方法-1"><a href="#①控制器方法-1" class="headerlink" title="①控制器方法"></a><strong>①控制器方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-8、具体功能：跳转到更新数据页面"><a href="#8-8、具体功能：跳转到更新数据页面" class="headerlink" title="8.8、具体功能：跳转到更新数据页面"></a><strong>8.8、具体功能：跳转到更新数据页面</strong></h3><h4 id="①修改超链接"><a href="#①修改超链接" class="headerlink" title="①修改超链接"></a><strong>①修改超链接</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②控制器方法"><a href="#②控制器方法" class="headerlink" title="②控制器方法"></a><strong>②控制器方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toUpdate</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③创建employee-update-html"><a href="#③创建employee-update-html" class="headerlink" title="**③创建employee_update.html"></a>**③创建employee_update.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改员工信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/css/index_work.css&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>update employee<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>email<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>女</span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-9、具体功能：执行更新"><a href="#8-9、具体功能：执行更新" class="headerlink" title="8.9、具体功能：执行更新"></a><strong>8.9、具体功能：执行更新</strong></h3><h4 id="①控制器方法-2"><a href="#①控制器方法-2" class="headerlink" title="①控制器方法"></a><strong>①控制器方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、SpringMVC处理ajax请求"><a href="#9、SpringMVC处理ajax请求" class="headerlink" title="9、SpringMVC处理ajax请求"></a><strong>9、SpringMVC处理ajax请求</strong></h2><h3 id="9-1、-RequestBody"><a href="#9-1、-RequestBody" class="headerlink" title="9.1、@RequestBody"></a><strong>9.1、@RequestBody</strong></h3><p>@RequestBody可以获取请求体信息，使用@RequestBody注解标识控制器方法的形参，当前请求的请 求体就会为当前注解所标识的形参赋值</p><!--此时必须使用post请求方式，因为get请求没有请求体--><form th:action="@{/test/RequestBody}" method="post"><p>用户名：<input type="text" name="username"><br></p><p>密码：<input type="password" name="password"><br></p><input type="submit"></form><p>@RequestMapping(“&#x2F;test&#x2F;RequestBody”)</p><p>public String testRequestBody(@RequestBody String requestBody){</p><p>System.out.println(“requestBody:”+requestBody);</p><p>return “success”;</p><p>}</p><p>输出结果：</p><p>requestBody:username&#x3D;admin&amp;password&#x3D;123456</p><h3 id="9-2、-RequestBody获取json格式的请求参数"><a href="#9-2、-RequestBody获取json格式的请求参数" class="headerlink" title="9.2、@RequestBody获取json格式的请求参数"></a><strong>9.2、@RequestBody获取json格式的请求参数</strong></h3><p>在使用了axios发送ajax请求之后，浏览器发送到服务器的请求参数有两种格式：</p><p>1、name&#x3D;value&amp;name&#x3D;value…，此时的请求参数可以通过request.getParameter()获取，对应<br>SpringMVC中，可以直接通过控制器方法的形参获取此类请求参数</p><p>2、{key:value,key:value,…}，此时无法通过request.getParameter()获取，之前我们使用操作<br>json的相关jar包gson或jackson处理此类请求参数，可以将其转换为指定的实体类对象或map集<br>合。在SpringMVC中，直接使用@RequestBody注解标识控制器方法的形参即可将此类请求参数<br>转换为java对象</p><p>使用@RequestBody获取json格式的请求参数的条件：</p><p>1、导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jackson的依赖：使用@RequestBody，将json格式的请求转化为java对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、SpringMVC的配置文件中设置开启mvc的注解驱动</p><!--开启mvc的注解驱动--><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>3、在控制器方法的形参位置，设置json格式的请求参数要转换成的java类型（实体类或map）的参<br>数，并使用@RequestBody注解标识</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试SpringMVC处理ajax&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testAjax()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;使用RequestBody处理json格式的请求参数&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testRequestBody()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// axios(&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     url:&quot;&quot;,     //请求路径</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     method:&quot;&quot;,  //请求方式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     params:&#123;&#125;,  //以name=value&amp;name=value发送请求参数，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                      不管请求方式是get还是post，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                      请求参数都会被拼接到请求地址后,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                      请求参数可以通过request.getParameter()获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     data:&#123;&#125;     //以json格式发送的请求参数，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                      请求参数会被保存到请求报文的请求体传输到服务器，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                      这里只能用post,get没有请求体</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                      请求参数不可以通过request.getParameter()获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;).then(response=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     console.log(response.data);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">testAjax</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;/SpringMVC/test/ajax?id=1001&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,<span class="attr">password</span>:<span class="string">&quot;123456&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">testRequestBody</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;/SpringMVC/test/RequestBody&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,<span class="attr">password</span>:<span class="string">&quot;123456&quot;</span>,<span class="attr">age</span>:<span class="number">23</span>,<span class="attr">gender</span>:<span class="string">&quot;男&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将json格式的数据转换为map集合</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/RequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,Object&gt; map, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;hello,requestBody&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将json格式的数据转换为实体类对象</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/RequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;hello,requestBody&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 1. @RequestBody：将请求体中的内容和控制器方法的形参进行绑定</span></span><br><span class="line"><span class="comment">* 2.使用@RequestBody，将json格式的请求转化为java对象</span></span><br><span class="line"><span class="comment">* 满足三个条件</span></span><br><span class="line"><span class="comment">* （1）导入jackson的依赖</span></span><br><span class="line"><span class="comment">* （2）在SpringMVC的配置文件中设置 &lt;mvc:annotation-driven/&gt; 开启注解驱动</span></span><br><span class="line"><span class="comment">* （3）在处理请求的控制器的形参位置，直接设置json格式的请求参数要转化的Java类型的形参，使用@RequestBody注解标识即可</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><h3 id="9-3、-ResponseBody"><a href="#9-3、-ResponseBody" class="headerlink" title="9.3、@ResponseBody"></a><strong>9.3、@ResponseBody</strong></h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到 浏览器</p><p>@RequestMapping(“&#x2F;testResponseBody”)</p><p>public String testResponseBody(){</p><p>&#x2F;&#x2F;此时会跳转到逻辑视图success所对应的页面</p><p>return “success”;</p><p>}</p><p>@RequestMapping(“&#x2F;testResponseBody”)</p><p>@ResponseBody</p><p>public String testResponseBody(){</p><p>&#x2F;&#x2F;此时响应浏览器数据success</p><p>return “success”;</p><p>}</p><h3 id="9-4、-ResponseBody响应浏览器json数据"><a href="#9-4、-ResponseBody响应浏览器json数据" class="headerlink" title="9.4、@ResponseBody响应浏览器json数据"></a><strong>9.4、@ResponseBody响应浏览器json数据</strong></h3><p>服务器处理ajax请求之后，大多数情况都需要向浏览器响应一个java对象，此时必须将java对象转换为<br>json字符串才可以响应到浏览器，之前我们使用操作json数据的jar包gson或jackson将java对象转换为<br>json字符串。在SpringMVC中，我们可以直接使用@ResponseBody注解实现此功能</p><p>@ResponseBody响应浏览器json数据的条件：</p><p>1、导入jackson的依赖</p><dependency><p><groupId>com.fasterxml.jackson.core</groupId></p><p><artifactId>jackson-databind</artifactId></p><p><version>2.12.1</version></p></dependency><p>2、SpringMVC的配置文件中设置开启mvc的注解驱动</p><!--开启mvc的注解驱动--><p>&lt;mvc:annotation-driven &#x2F;&gt;</p><p>3、使用@ResponseBody注解标识控制器方法，在方法中，将需要转换为json字符串并响应到浏览器<br>的java对象作为控制器方法的返回值，此时SpringMVC就可以将此对象直接转换为json字符串并响应到<br>浏览器</p><p>&lt;input type&#x3D;”button” value&#x3D;”测试@ResponseBody响应浏览器json格式的数据”</p><p>@click&#x3D;”testResponseBody()”&gt;<br></p><script type="text/javascript" th:src="@{/js/vue.js}"></script><script type="text/javascript" th:src="@{/js/axios.min.js}"></script><script type="text/javascript">var vue = new Vue({el:"#app",methods:{testResponseBody(){axios.post("/SpringMVC/test/ResponseBody/json").then(response=>{console.log(response.data);});}}});</script><p>&#x2F;&#x2F;响应浏览器list集合</p><p>@RequestMapping(“&#x2F;test&#x2F;ResponseBody&#x2F;json”)</p><p>@ResponseBody</p><p>public List<User> testResponseBody(){</p><p>User user1 &#x3D; new User(1001,”admin1”,”123456”,23,”男”);</p><p>User user2 &#x3D; new User(1002,”admin2”,”123456”,23,”男”);</p><p>User user3 &#x3D; new User(1003,”admin3”,”123456”,23,”男”);</p><p>List<User> list &#x3D; Arrays.asList(user1, user2, user3);</p><p>return list;</p><p>}</p><p>&#x2F;&#x2F;响应浏览器map集合</p><p>@RequestMapping(“&#x2F;test&#x2F;ResponseBody&#x2F;json”)</p><p>@ResponseBody</p><p>public Map&lt;String, Object&gt; testResponseBody(){</p><p>User user1 &#x3D; new User(1001,”admin1”,”123456”,23,”男”);</p><p>User user2 &#x3D; new User(1002,”admin2”,”123456”,23,”男”);</p><p>User user3 &#x3D; new User(1003,”admin3”,”123456”,23,”男”);</p><p>Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();</p><p>map.put(“1001”, user1);</p><p>map.put(“1002”, user2);</p><p>map.put(“1003”, user3);</p><p>return map;</p><p>}</p><p>&#x2F;&#x2F;响应浏览器实体类对象</p><p>@RequestMapping(“&#x2F;test&#x2F;ResponseBody&#x2F;json”)</p><p>@ResponseBody</p><p>public User testResponseBody(){</p><p>return user;</p><p>}</p><h3 id="9-5、-RestController注解"><a href="#9-5、-RestController注解" class="headerlink" title="9.5、@RestController注解"></a><strong>9.5、@RestController注解</strong></h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了<br>@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h2 id="10、文件上传和下载"><a href="#10、文件上传和下载" class="headerlink" title="10、文件上传和下载"></a><strong>10、文件上传和下载</strong></h2><h3 id="10-1、文件下载"><a href="#10-1、文件下载" class="headerlink" title="10.1、文件下载"></a><strong>10.1、文件下载</strong></h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文 更多Java –使用ResponseEntity实现下载文件的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ResponseEntity:可以作为控制器方法的返回值，表示响应到浏览器的完整的响应报文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/down&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="comment">//这里即 target/spring_mvc_ajax-1.0-SNAPSHOT</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/img/Hiiro.webp&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组，available() 获取输入流所对应文件的字节数</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=Hiiro.webp&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-2、文件上传"><a href="#10-2、文件上传" class="headerlink" title="10.2、文件上传"></a><strong>10.2、文件上传</strong></h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype&#x3D;”multipart&#x2F;form-data”</p><p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><p>①添加依赖：</p><!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --\><dependency><groupId>commons-fileupload</groupId><artifactId>commons-fileupload</artifactId><version>1.3.1</version></dependency>②在SpringMVC的配置文件中添加配置：<!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--><p>&lt;bean id&#x3D;”multipartResolver”</p><p>class&#x3D;”org.springframework.web.multipart.commons.CommonsMultipartResolver”&gt;</p></bean><p>③控制器方法：</p><p>@RequestMapping(“&#x2F;testUp”)</p><p>public String testUp(MultipartFile photo, HttpSession session) throws</p><p>IOException {</p><p>&#x2F;&#x2F;获取上传的文件的文件名</p><p>String fileName &#x3D; photo.getOriginalFilename();</p><p>&#x2F;&#x2F;处理文件重名问题</p><p>String hzName &#x3D; fileName.substring(fileName.lastIndexOf(“.”));</p><p>fileName &#x3D; UUID.randomUUID().toString() + hzName;</p><p>&#x2F;&#x2F;获取服务器中photo目录的路径</p><p>ServletContext servletContext &#x3D; session.getServletContext();</p><p>String photoPath &#x3D; servletContext.getRealPath(“photo”);</p><p>File file &#x3D; new File(photoPath);</p><p>if(!file.exists()){</p><p>file.mkdir();</p><p>}</p><p>String finalPath &#x3D; photoPath + File.separator + fileName;</p><p>&#x2F;&#x2F;实现上传功能</p><p>photo.transferTo(new File(finalPath));</p><p>return “success”;</p><p>}</p><h2 id="11、拦截器"><a href="#11、拦截器" class="headerlink" title="11、拦截器"></a><strong>11、拦截器</strong></h2><p>拦截器与过滤器的区别</p><p>浏览器 &gt; filter&gt; DisparServlet &gt;  拦截器 》 控制器 》 拦截器</p><p>拦截器在控制器前后、渲染视图后执行的</p><h3 id="11-1、拦截器的配置"><a href="#11-1、拦截器的配置" class="headerlink" title="11.1、拦截器的配置"></a><strong>11.1、拦截器的配置</strong></h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean class=&quot;com.zzuli.interceptor.FirstInterceptor&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对DispatcherServlet所处理的所有请求进行拦截--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;ref bean=&quot;firstInterceptor&quot;&gt;&lt;/ref&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定拦截请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/*: 表示上下文路径下的一层目录被拦截</span></span><br><span class="line"><span class="comment">            /**:表示上下文路径下的多层目录被拦截</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除拦截请求的请求路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/abc&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><!--以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求--><h3 id="11-2、拦截器的三个抽象方法"><a href="#11-2、拦截器的三个抽象方法" class="headerlink" title="11.2、拦截器的三个抽象方法"></a><strong>11.2、拦截器的三个抽象方法</strong></h3><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返<br>回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterCompletion：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()</p><h3 id="11-3、多个拦截器的执行顺序"><a href="#11-3、多个拦截器的执行顺序" class="headerlink" title="11.3、多个拦截器的执行顺序"></a><strong>11.3、多个拦截器的执行顺序</strong></h3><p>①若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterCompletion()会按照配置的反序执行</p><p>②若某个拦截器的preHandle()返回了false</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false<br>的拦截器之前的拦截器的afterCompletion()会执行</p><h2 id="12、异常处理器"><a href="#12、异常处理器" class="headerlink" title="12、异常处理器"></a><strong>12、异常处理器</strong></h2><h3 id="12-1、基于配置的异常处理"><a href="#12-1、基于配置的异常处理" class="headerlink" title="12.1、基于配置的异常处理"></a><strong>12.1、基于配置的异常处理</strong></h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和 SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><p>&lt;bean</p><p>class&#x3D;”org.springframework.web.servlet.handler.SimpleMappingExceptionResolver”&gt;</p><property name="exceptionMappings"><props><!--properties的键表示处理器方法执行过程中出现的异常properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面--><p><prop key="java.lang.ArithmeticException">error</prop></p></props></property><!--exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享--><p><property name="exceptionAttribute" value="ex"></property></p></bean><h3 id="12-2、基于注解的异常处理"><a href="#12-2、基于注解的异常处理" class="headerlink" title="12.2、基于注解的异常处理"></a><strong>12.2、基于注解的异常处理</strong></h3><p>&#x2F;&#x2F;@ControllerAdvice将当前类标识为异常处理的组件</p><p>@ControllerAdvice</p><p>public class ExceptionController {</p><p>&#x2F;&#x2F;@ExceptionHandler用于设置所标识方法处理的异常</p><p>@ExceptionHandler(ArithmeticException.class)</p><p>&#x2F;&#x2F;ex表示当前请求处理中出现的异常对象</p><p>public String handleArithmeticException(Exception ex, Model model){</p><p>model.addAttribute(“ex”, ex);</p><p>return “error”;</p><p>}</p><p>}</p><h2 id="13、注解配置SpringMVC"><a href="#13、注解配置SpringMVC" class="headerlink" title="13、注解配置SpringMVC"></a><strong>13、注解配置SpringMVC</strong></h2><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h3 id="13-1、创建初始化类，代替web-xml"><a href="#13-1、创建初始化类，代替web-xml" class="headerlink" title="13.1、创建初始化类，代替web.xml"></a><strong>13.1、创建初始化类，代替web.xml</strong></h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，<br>如果找到的话就用它来配置Servlet容器。 Spring提供了这个接口的实现，名为 SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配<br>置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为<br>AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了 AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自<br>动发现它，并用它来配置Servlet上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//设置一个配置类代替spring的配置文件</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//设置一个配置类代替springMVC的配置文件</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//设置SpringMVC的前端控制器DispatcherServlet的url-pattern</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//设置过滤器</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="comment">//创建编码过滤器</span></span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">characterEncodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        characterEncodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        characterEncodingFilter.setForceEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//创建处理请求方式的过滤器</span></span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;characterEncodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-2、创建SpringConfig配置类，代替spring的配置文件"><a href="#13-2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="13.2、创建SpringConfig配置类，代替spring的配置文件"></a><strong>13.2、创建SpringConfig配置类，代替spring的配置文件</strong></h3><p>@Configuration</p><p>public class SpringConfig {</p><p>&#x2F;&#x2F;ssm整合之后，spring的配置信息写在此类中</p><p>}</p><h3 id="13-3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#13-3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="13.3、创建WebConfig配置类，代替SpringMVC的配置文件"></a><strong>13.3、创建WebConfig配置类，代替SpringMVC的配置文件</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> pony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-12 21:29</span></span><br><span class="line"><span class="comment"> * 代替SpringMVC的配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//将类标识为控制类</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.zzuli&quot;)</span> <span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">//开启mvc注解驱动</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//视图解析器</span></span><br><span class="line">    <span class="comment">//默认的Servlet的注解驱动</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        <span class="comment">//enable(); 配置可用</span></span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//视图解析器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//可以将方法的返回值作为bean进行管理，bean的id就是方法的方法名</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">FirstInterceptor</span> <span class="variable">firstInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/abc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常解析器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;</span><br><span class="line">        <span class="type">SimpleMappingExceptionResolver</span> <span class="variable">exceptionResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMappingExceptionResolver</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//key:要处理的异常 value:跳转的逻辑视图</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        exceptionResolver.setExceptionMappings(properties);</span><br><span class="line">        exceptionResolver.setExceptionAttribute(<span class="string">&quot;ex&quot;</span>);</span><br><span class="line">        resolvers.add(exceptionResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-4、测试功能"><a href="#13-4、测试功能" class="headerlink" title="13.4、测试功能"></a><strong>13.4、测试功能</strong></h3><p>@RequestMapping(“&#x2F;“)</p><p>public String index(){</p><p>return “index”;</p><p>}</p><h2 id="14、SpringMVC执行流程"><a href="#14、SpringMVC执行流程" class="headerlink" title="14、SpringMVC执行流程"></a><strong>14、SpringMVC执行流程</strong></h2><h3 id="14-1、SpringMVC常用组件"><a href="#14-1、SpringMVC常用组件" class="headerlink" title="14.1、SpringMVC常用组件"></a><strong>14.1、SpringMVC常用组件</strong></h3><p>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</p><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><p>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</p><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p><p>Handler：<strong>处理器</strong>，需要工程师开发</p><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p><p>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</p><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p><p>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</p><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、 RedirectView</p><p>View：<strong>视图</strong></p><p>作用：将模型数据通过页面展示给用户</p><h3 id="14-2、DispatcherServlet初始化过程"><a href="#14-2、DispatcherServlet初始化过程" class="headerlink" title="14.2、DispatcherServlet初始化过程"></a><strong>14.2、DispatcherServlet初始化过程</strong></h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p><h4 id="①初始化WebApplicationContext"><a href="#①初始化WebApplicationContext" class="headerlink" title="①初始化WebApplicationContext"></a><strong>①初始化WebApplicationContext</strong></h4><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><p>protected WebApplicationContext initWebApplicationContext() {</p><p>WebApplicationContext rootContext &#x3D;</p><p>WebApplicationContextUtils.getWebApplicationContext(getServletContext());</p><p>WebApplicationContext wac &#x3D; null;</p><p>if (this.webApplicationContext !&#x3D; null) {</p><p>&#x2F;&#x2F; A context instance was injected at construction time -&gt; use it</p><p>wac &#x3D; this.webApplicationContext;</p><p>if (wac instanceof ConfigurableWebApplicationContext) {</p><p>ConfigurableWebApplicationContext cwac &#x3D;</p><p>(ConfigurableWebApplicationContext) wac;</p><p>if (!cwac.isActive()) {</p><p>&#x2F;&#x2F; The context has not yet been refreshed -&gt; provide services</p><p>such as</p><p>&#x2F;&#x2F; setting the parent context, setting the application context</p><p>id, etc</p><p>if (cwac.getParent() &#x3D;&#x3D; null) {</p><p>&#x2F;&#x2F; The context instance was injected without an explicit</p><p>parent -&gt; set</p><p>&#x2F;&#x2F; the root application context (if any; may be null) as the</p><p>parent</p><p>cwac.setParent(rootContext);</p><p>}</p><p>configureAndRefreshWebApplicationContext(cwac);</p><p>}</p><p>}</p><p>}</p><p>if (wac &#x3D;&#x3D; null) {</p><p><code> </code>&#x2F;&#x2F; No context instance was injected at construction time -&gt; see if one<br> &#x2F;&#x2F; has been registered in the servlet context. If one exists, it is<br>assumed</p><p>&#x2F;&#x2F; that the parent context (if any) has already been set and that the<br>&#x2F;&#x2F; user has performed any initialization such as setting the context id<br>wac &#x3D; findWebApplicationContext();</p><p>}</p><p>if (wac &#x3D;&#x3D; null) {</p><p>&#x2F;&#x2F; No context instance is defined for this servlet -&gt; create a local one</p><p>&#x2F;&#x2F; 创建WebApplicationContext</p><p>wac &#x3D; createWebApplicationContext(rootContext);</p><p>}</p><p>if (!this.refreshEventReceived) {</p><p>&#x2F;&#x2F; Either the context is not a ConfigurableApplicationContext with</p><p>refresh</p><p>&#x2F;&#x2F; support or the context injected at construction time had already been</p><p>&#x2F;&#x2F; refreshed -&gt; trigger initial onRefresh manually here.</p><p>synchronized (this.onRefreshMonitor) {</p><p>&#x2F;&#x2F; 刷新WebApplicationContext</p><p>onRefresh(wac);</p><p>}</p><p>}</p><p>if (this.publishContext) {</p><p>&#x2F;&#x2F; Publish the context as a servlet context attribute.</p><p>&#x2F;&#x2F; 将IOC容器在应用域共享</p><p>String attrName &#x3D; getServletContextAttributeName();</p><p>getServletContext().setAttribute(attrName, wac);</p><p>}</p><p>return wac;</p><p>}</p><h4 id="②创建WebApplicationContext"><a href="#②创建WebApplicationContext" class="headerlink" title="②创建WebApplicationContext"></a><strong>②创建WebApplicationContext</strong></h4><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><p>protected WebApplicationContext createWebApplicationContext(@Nullable</p><p>ApplicationContext parent) {</p><p>Class&lt;?&gt; contextClass &#x3D; getContextClass();</p><p>if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass))</p><p>{</p><p>throw new ApplicationContextException(</p><p>“Fatal initialization error in servlet with name ‘“ +</p><p>getServletName() +</p><p>“‘: custom WebApplicationContext class [“ + contextClass.getName() +</p><p>“] is not of type ConfigurableWebApplicationContext”);</p><p>}</p><p>&#x2F;&#x2F; 通过反射创建 IOC 容器对象</p><p>ConfigurableWebApplicationContext wac &#x3D;</p><p>(ConfigurableWebApplicationContext)</p><p>BeanUtils.instantiateClass(contextClass);</p><p>wac.setEnvironment(getEnvironment());</p><p>&#x2F;&#x2F; 设置父容器</p><p>wac.setParent(parent);</p><p>String configLocation &#x3D; getContextConfigLocation();</p><p>if (configLocation !&#x3D; null) {</p><p>wac.setConfigLocation(configLocation);</p><p>}</p><p>configureAndRefreshWebApplicationContext(wac);</p><p>return wac;</p><p>}</p><h4 id="③DispatcherServlet初始化策略"><a href="#③DispatcherServlet初始化策略" class="headerlink" title="③DispatcherServlet初始化策略"></a><strong>③DispatcherServlet初始化策略</strong></h4><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在<br>DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化<br>DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>protected void initStrategies(ApplicationContext context) {</p><p>initMultipartResolver(context);</p><p>initLocaleResolver(context);</p><p>initThemeResolver(context);</p><p>initHandlerMappings(context);</p><p>initHandlerAdapters(context);</p><p>initHandlerExceptionResolvers(context);</p><p>initRequestToViewNameTranslator(context);</p><p>initViewResolvers(context);</p><p>initFlashMapManager(context);</p><p>}</p><h3 id="14-3、DispatcherServlet调用组件处理请求"><a href="#14-3、DispatcherServlet调用组件处理请求" class="headerlink" title="14.3、DispatcherServlet调用组件处理请求"></a><strong>14.3、DispatcherServlet调用组件处理请求</strong></h3><h4 id="①processRequest"><a href="#①processRequest" class="headerlink" title="①processRequest()"></a><strong>①processRequest()</strong></h4><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了 processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><p>protected final void processRequest(HttpServletRequest request,</p><p>HttpServletResponse response)</p><p>throws ServletException, IOException {</p><p>long startTime &#x3D; System.currentTimeMillis();</p><p>Throwable failureCause &#x3D; null;</p><p>LocaleContext previousLocaleContext &#x3D;</p><p>LocaleContextHolder.getLocaleContext();</p><p>LocaleContext localeContext &#x3D; buildLocaleContext(request);</p><p>RequestAttributes previousAttributes &#x3D;</p><p>RequestContextHolder.getRequestAttributes();</p><p>ServletRequestAttributes requestAttributes &#x3D; buildRequestAttributes(request,</p><p>response, previousAttributes);</p><p>WebAsyncManager asyncManager &#x3D; WebAsyncUtils.getAsyncManager(request);</p><p>asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(),</p><p>new RequestBindingInterceptor());</p><p>initContextHolders(request, localeContext, requestAttributes);</p><p>try {</p><p>&#x2F;&#x2F; 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</p><p>doService(request, response);</p><p>}</p><p>catch (ServletException | IOException ex) {</p><p>failureCause &#x3D; ex;</p><p>throw ex;</p><p>}</p><p>catch (Throwable ex) {</p><p>failureCause &#x3D; ex;</p><p>throw new NestedServletException(“Request processing failed”, ex);</p><p>}</p><p>finally {</p><p>resetContextHolders(request, previousLocaleContext, previousAttributes);</p><p>if (requestAttributes !&#x3D; null) {</p><p>requestAttributes.requestCompleted();</p><p>}</p><p>logResult(request, response, failureCause, asyncManager);</p><p>publishRequestHandledEvent(request, response, startTime, failureCause);</p><p>}</p><p>}</p><h4 id="②doService"><a href="#②doService" class="headerlink" title="②doService()"></a><strong>②doService()</strong></h4><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>@Override</p><p>protected void doService(HttpServletRequest request, HttpServletResponse</p><p>response) throws Exception {</p><p>logRequest(request);</p><p>&#x2F;&#x2F; Keep a snapshot of the request attributes in case of an include,</p><p>&#x2F;&#x2F; to be able to restore the original attributes after the include.</p><p>Map&lt;String, Object&gt; attributesSnapshot &#x3D; null;</p><p>if (WebUtils.isIncludeRequest(request)) {</p><p>attributesSnapshot &#x3D; new HashMap&lt;&gt;();</p><p>Enumeration&lt;?&gt; attrNames &#x3D; request.getAttributeNames();</p><p>while (attrNames.hasMoreElements()) {</p><p>String attrName &#x3D; (String) attrNames.nextElement();</p><p>if (this.cleanupAfterInclude ||</p><p>attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {</p><p>attributesSnapshot.put(attrName,</p><p>request.getAttribute(attrName));</p><p>}</p><p>}</p><p>}</p><p>&#x2F;&#x2F; Make framework objects available to handlers and view objects.</p><p>request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE,</p><p>getWebApplicationContext());</p><p>request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);</p><p>request.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);</p><p>request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</p><p>if (this.flashMapManager !&#x3D; null) {</p><p>FlashMap inputFlashMap &#x3D; this.flashMapManager.retrieveAndUpdate(request,</p><p>response);</p><p>if (inputFlashMap !&#x3D; null) {</p><p>request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE,</p><p>Collections.unmodifiableMap(inputFlashMap));</p><p>}</p><p>request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());</p><p>request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);</p><p>}</p><p>RequestPath requestPath &#x3D; null;</p><p>if (this.parseRequestPath &amp;&amp;</p><p>!ServletRequestPathUtils.hasParsedRequestPath(request)) {</p><p>requestPath &#x3D; ServletRequestPathUtils.parseAndCache(request);</p><p>}</p><p>try {</p><p>&#x2F;&#x2F; 处理请求和响应</p><p>doDispatch(request, response);</p><p>}</p><p>finally {</p><p>if</p><p>(!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {</p><p>&#x2F;&#x2F; Restore the original attribute snapshot, in case of an include.</p><p>if (attributesSnapshot !&#x3D; null) {</p><p>restoreAttributesAfterInclude(request, attributesSnapshot);</p><p>}</p><p>}</p><p>if (requestPath !&#x3D; null) {</p><p>ServletRequestPathUtils.clearParsedRequestPath(request);</p><p>}</p><p>}</p><p>}</p><h4 id="③doDispatch"><a href="#③doDispatch" class="headerlink" title="③doDispatch()"></a><strong>③doDispatch()</strong></h4><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>protected void doDispatch(HttpServletRequest request, HttpServletResponse</p><p>response) throws Exception {</p><p>HttpServletRequest processedRequest &#x3D; request;</p><p>HandlerExecutionChain mappedHandler &#x3D; null;</p><p>boolean multipartRequestParsed &#x3D; false;</p><p>WebAsyncManager asyncManager &#x3D; WebAsyncUtils.getAsyncManager(request);</p><p>try {</p><p>ModelAndView mv &#x3D; null;</p><p>Exception dispatchException &#x3D; null;</p><p>try {</p><p>processedRequest &#x3D; checkMultipart(request);</p><p>multipartRequestParsed &#x3D; (processedRequest !&#x3D; request);</p><p>&#x2F;&#x2F; Determine handler for the current request.</p><p>&#x2F;*</p><p>mappedHandler：调用链</p><p>包含handler、interceptorList、interceptorIndex</p><p>handler：浏览器发送的请求所匹配的控制器方法</p><p>interceptorList：处理控制器方法的所有拦截器集合</p><p>interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</p><p>*&#x2F;</p><p>mappedHandler &#x3D; getHandler(processedRequest);</p><p>if (mappedHandler &#x3D;&#x3D; null) {</p><p>noHandlerFound(processedRequest, response);</p><p>return;</p><p>}</p><p>&#x2F;&#x2F; Determine handler adapter for the current request.</p><p>&#x2F;&#x2F; 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</p><p>HandlerAdapter ha &#x3D; getHandlerAdapter(mappedHandler.getHandler());</p><p>&#x2F;&#x2F; Process last-modified header, if supported by the handler.</p><p>String method &#x3D; request.getMethod();</p><p>boolean isGet &#x3D; “GET”.equals(method);</p><p>if (isGet || “HEAD”.equals(method)) {</p><p>long lastModified &#x3D; ha.getLastModified(request,</p><p>mappedHandler.getHandler());</p><p>if (new ServletWebRequest(request,</p><p>response).checkNotModified(lastModified) &amp;&amp; isGet) {</p><p>return;</p><p>}</p><p>}</p><p>&#x2F;&#x2F; 调用拦截器的preHandle()</p><p>if (!mappedHandler.applyPreHandle(processedRequest, response)) {</p><p>return;</p><p>}</p><p>&#x2F;&#x2F; Actually invoke the handler.</p><p>&#x2F;&#x2F; 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</p><p>mv &#x3D; ha.handle(processedRequest, response,</p><p>mappedHandler.getHandler());</p><p>if (asyncManager.isConcurrentHandlingStarted()) {</p><p>return;</p><p>}</p><p>applyDefaultViewName(processedRequest, mv);</p><p>&#x2F;&#x2F; 调用拦截器的postHandle()</p><p>mappedHandler.applyPostHandle(processedRequest, response, mv);</p><p>}</p><p>catch (Exception ex) {</p><p>dispatchException &#x3D; ex;</p><p>}</p><p>catch (Throwable err) {</p><p>&#x2F;&#x2F; As of 4.3, we’re processing Errors thrown from handler methods as</p><p>well,</p><p>&#x2F;&#x2F; making them available for @ExceptionHandler methods and other</p><p>scenarios.</p><p>dispatchException &#x3D; new NestedServletException(“Handler dispatch</p><p>failed”, err);</p><p>}</p><p>&#x2F;&#x2F; 后续处理：处理模型数据和渲染视图</p><p>processDispatchResult(processedRequest, response, mappedHandler, mv,</p><p>dispatchException);</p><p>}</p><p>catch (Exception ex) {</p><p>triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</p><p>}</p><p>catch (Throwable err) {</p><p>triggerAfterCompletion(processedRequest, response, mappedHandler,</p><p>new NestedServletException(“Handler processing</p><p>failed”, err));<br> }</p><p>finally {</p><p>if (asyncManager.isConcurrentHandlingStarted()) {</p><p>&#x2F;&#x2F; Instead of postHandle and afterCompletion</p><p>if (mappedHandler !&#x3D; null) {</p><p>mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</p><p>}</p><p>}</p><p>else {</p><p>&#x2F;&#x2F; Clean up any resources used by a multipart request.</p><p>if (multipartRequestParsed) {</p><p>cleanupMultipart(processedRequest);</p><p>}</p><p>}</p><p>}</p><p>}</p><h4 id="④processDispatchResult"><a href="#④processDispatchResult" class="headerlink" title="④processDispatchResult()"></a><strong>④processDispatchResult()</strong></h4><p>private void processDispatchResult(HttpServletRequest request,</p><p>HttpServletResponse response,</p><p>@Nullable HandlerExecutionChain</p><p>mappedHandler, @Nullable ModelAndView mv,</p><p>@Nullable Exception exception) throws</p><p>Exception {</p><p>boolean errorView &#x3D; false;</p><p>if (exception !&#x3D; null) {</p><p>if (exception instanceof ModelAndViewDefiningException) {</p><p>logger.debug(“ModelAndViewDefiningException encountered”,</p><p>exception);</p><p>mv &#x3D; ((ModelAndViewDefiningException) exception).getModelAndView();</p><p>}</p><p>else {</p><p>Object handler &#x3D; (mappedHandler !&#x3D; null ? mappedHandler.getHandler()</p><p>: null);</p><p>mv &#x3D; processHandlerException(request, response, handler, exception);</p><p>errorView &#x3D; (mv !&#x3D; null);</p><p>}</p><p>}</p><p>&#x2F;&#x2F; Did the handler return a view to render?</p><p>if (mv !&#x3D; null &amp;&amp; !mv.wasCleared()) {</p><p>&#x2F;&#x2F; 处理模型数据和渲染视图</p><p>render(mv, request, response);</p><p>if (errorView) {</p><p>WebUtils.clearErrorRequestAttributes(request);</p><p>}</p><p>}</p><p>else {</p><p>if (logger.isTraceEnabled()) {</p><p>logger.trace(“No view rendering, null ModelAndView returned.”);</p><p>}</p><p>}</p><p>if (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {</p><p>&#x2F;&#x2F; Concurrent handling started during a forward</p><p>return;</p><p>}</p><p>if (mappedHandler !&#x3D; null) {</p><p>&#x2F;&#x2F; Exception (if any) is already handled..</p><p>&#x2F;&#x2F; 调用拦截器的afterCompletion()</p><p>mappedHandler.triggerAfterCompletion(request, response, null);</p><p>}</p><p>}</p><h3 id="14-4、SpringMVC的执行流程"><a href="#14-4、SpringMVC的执行流程" class="headerlink" title="14.4、SpringMVC的执行流程"></a><strong>14.4、SpringMVC的执行流程</strong></h3><p>\1) 用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p><p>\2) DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p><p>a) 不存在</p><p>i. 再判断是否配置了mvc:default-servlet-handler</p><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404 错误</p><p>b) 存在则执行下面的流程</p><p>\3) 根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及<br>Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p><p>\4) DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p><p>\5) 如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p><p>\6) 提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。<br>在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p><p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定 的响应信息</p><p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等<br>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等<br>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中<br>7) Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。<br>8) 此时将开始执行拦截器的postHandle(…)方法【逆向】。</p><p>\9) 根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行<br>HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model<br>和View，来渲染视图。</p><p>\10) 渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p><p>\11) 将渲染结果返回给客户端。</p><h1 id="四、SSM整合"><a href="#四、SSM整合" class="headerlink" title="四、SSM整合"></a><strong>四、SSM整合</strong></h1><p>监听器 —-&gt; 过滤器 —-&gt; servlet（SpringMVC  的 IOC 是在servlet的初始化执行），所以spring的ioc要放在监听器 或 过滤器 的初始化方法，这要才能保证在获取SpringMVC  的 IOC容器之前，Spring 的 IOC 准备好了，这样才能完成 Controller 里面的 Service 的自动装配 。</p><h3 id="4-1、ContextLoaderListener"><a href="#4-1、ContextLoaderListener" class="headerlink" title="4.1、ContextLoaderListener"></a><strong>4.1、ContextLoaderListener</strong></h3><p>Spring提供了监听器ContextLoaderListener，实现ServletContextListener接口，可监听<br>ServletContext的状态，在web服务器的启动，读取Spring的配置文件，创建Spring的IOC容器。web<br>应用中必须在web.xml中配置，监听服务器的启动和关闭，在服务器启动后加载 Spring 的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">配置Spring的监听器，在服务器启动时加载Spring的配置文件</span></span><br><span class="line"><span class="comment">Spring配置文件默认位置和名称：/WEB-INF/applicationContext.xml</span></span><br><span class="line"><span class="comment">可通过上下文参数自定义Spring配置文件的位置和名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在服务器启动时加载配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2、准备工作"><a href="#4-2、准备工作" class="headerlink" title="4.2、准备工作"></a><strong>4.2、准备工作</strong></h3><h4 id="①创建Maven-Module"><a href="#①创建Maven-Module" class="headerlink" title="①创建Maven Module"></a><strong>①创建Maven Module</strong></h4><h4 id="②导入依赖"><a href="#②导入依赖" class="headerlink" title="②导入依赖"></a><strong>②导入依赖</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springmvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务需要--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--管理切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis和spring的整合包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理json--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③创建表"><a href="#③创建表" class="headerlink" title="③创建表"></a><strong>③创建表</strong></h4><p>CREATE TABLE <code>t\_emp</code> (</p><p><code>emp\_id</code> int(11) NOT NULL AUTO_INCREMENT,</p><p><code>emp\_name</code> varchar(20) DEFAULT NULL,</p><p><code>age</code> int(11) DEFAULT NULL,</p><p><code>sex</code> char(1) DEFAULT NULL,</p><p><code>email</code> varchar(50) DEFAULT NULL,</p><p>PRIMARY KEY (<code>emp\_id</code>)</p><p>) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</p><h3 id="4-3、配置web-xml"><a href="#4-3、配置web-xml" class="headerlink" title="4.3、配置web.xml"></a><strong>4.3、配置web.xml</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--请求编码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置监听器，在服务器启动时加载spring配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置spring配置文件的位置和名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4、创建SpringMVC的配置文件并配置"><a href="#4-4、创建SpringMVC的配置文件并配置" class="headerlink" title="4.4、创建SpringMVC的配置文件并配置"></a><strong>4.4、创建SpringMVC的配置文件并配置</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zzuli.ssm.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置默认的Servlet处理静态资源</span></span><br><span class="line"><span class="comment">    如果不配置我们的所有请求都会被 DispatcherServlet 处理</span></span><br><span class="line"><span class="comment">    而 DispatcherServlet 无法处理静态资源（如css，js等）</span></span><br><span class="line"><span class="comment">    还要开启mvc的注解驱动，这样我们所有的请求先有 DispatcherServlet 处理</span></span><br><span class="line"><span class="comment">                                  处理不了才会使用 默认的 Servlet 处理</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    视图控制器：为当前的请求设置视图名称实现名称跳转</span></span><br><span class="line"><span class="comment">    诺设置视图控制器，则只有视图控制器的请求会被处理，其他的请求将全部404</span></span><br><span class="line"><span class="comment">    此时必须再配置一个标签&lt;mvc:annotation-driven/&gt;，开启mvc的注解驱动</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文件上传解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-5、搭建MyBatis环境"><a href="#4-5、搭建MyBatis环境" class="headerlink" title="4.5、搭建MyBatis环境"></a><strong>4.5、搭建MyBatis环境</strong></h3><h4 id="①创建属性文件jdbc-properties"><a href="#①创建属性文件jdbc-properties" class="headerlink" title="①创建属性文件jdbc.properties"></a><strong>①创建属性文件jdbc.properties</strong></h4><p>jdbc.user&#x3D;root</p><p>jdbc.password&#x3D;atguigu</p><p>jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm?serverTimezone&#x3D;UTC</p><p>jdbc.driver&#x3D;com.mysql.cj.jdbc.Driver</p><h4 id="②创建MyBatis的核心配置文件mybatis-config-xml"><a href="#②创建MyBatis的核心配置文件mybatis-config-xml" class="headerlink" title="②创建MyBatis的核心配置文件mybatis-config.xml"></a><strong>②创建MyBatis的核心配置文件mybatis-config.xml</strong></h4><?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE configurationPUBLIC "-//mybatis.org//DTD Config 3.0//EN""http://mybatis.org/dtd/mybatis-3-config.dtd"><configuration><settings><!--将下划线映射为驼峰--><setting name="mapUnderscoreToCamelCase" value="true"/></settings><plugins><!--配置分页插件--><p><plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin></p></plugins></configuration><h4 id="③创建Mapper接口和映射文件"><a href="#③创建Mapper接口和映射文件" class="headerlink" title="③创建Mapper接口和映射文件"></a><strong>③创建Mapper接口和映射文件</strong></h4><p>public interface EmployeeMapper {</p><p>List<Employee> getEmployeeList();</p><p>}</p><?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE mapperPUBLIC "-//mybatis.org//DTD Mapper 3.0//EN""http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.atguigu.ssm.mapper.EmployeeMapper"><select id="getEmployeeList" resultType="Employee"><p>select * from t_emp</p></select></mapper><h4 id="④创建日志文件log4j-xml"><a href="#④创建日志文件log4j-xml" class="headerlink" title="④创建日志文件log4j.xml"></a><strong>④创建日志文件log4j.xml</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;%m (%F:%L) \n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-6、创建Spring的配置文件并配置"><a href="#4-6、创建Spring的配置文件并配置" class="headerlink" title="4.6、创建Spring的配置文件并配置"></a><strong>4.6、创建Spring的配置文件并配置</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.ssm&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入jdbc.properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Druid数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置用于创建SqlSessionFactory的工厂bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置MyBatis配置文件的路径（可以不设置） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置类型别名所对应的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.atguigu.ssm.pojo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">设置映射文件的路径</span></span><br><span class="line"><span class="comment">若映射文件所在路径和mapper接口所在路径一致，则不需要设置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/\*.xml&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;/property&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">配置mapper接口的扫描配置</span></span><br><span class="line"><span class="comment">由mybatis-spring提供，可以将指定包下所有的mapper接口创建动态代理</span></span><br><span class="line"><span class="comment">并将这些动态代理作为IOC容器的bean管理</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.atguigu.ssm.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-7、测试功能"><a href="#4-7、测试功能" class="headerlink" title="4.7、测试功能"></a><strong>4.7、测试功能</strong></h3><h4 id="①创建组件"><a href="#①创建组件" class="headerlink" title="①创建组件"></a><strong>①创建组件</strong></h4><p>实体类Employee</p><p>public class Employee {</p><p>private Integer empId;</p><p>private String empName;</p><p>private Integer age;</p><p>private String sex;</p><p>private String email;</p><p>public Employee() {</p><p>}</p><p>public Employee(Integer empId, String empName, Integer age, String sex,</p><p>String email) {</p><p>this.empId &#x3D; empId;</p><p>this.empName &#x3D; empName;</p><p>this.age &#x3D; age;</p><p>this.sex &#x3D; sex;</p><p>this.email &#x3D; email;</p><p>}</p><p>public Integer getEmpId() {</p><p>return empId;</p><p>}</p><p>public void setEmpId(Integer empId) {</p><p>this.empId &#x3D; empId;</p><p>}</p><p>public String getEmpName() {</p><p>return empName;</p><p>}</p><p>public void setEmpName(String empName) {</p><p>this.empName &#x3D; empName;</p><p>}</p><p>public Integer getAge() {</p><p>return age;</p><p>}</p><p>public void setAge(Integer age) {</p><p>this.age &#x3D; age;</p><p>}</p><p>public String getSex() {</p><p>return sex;</p><p>}</p><p>public void setSex(String sex) {</p><p>this.sex &#x3D; sex;</p><p>}</p><p>public String getEmail() {</p><p>return email;</p><p>}</p><p>public void setEmail(String email) {</p><p>this.email &#x3D; email;</p><p>}</p><p>}</p><p>创建控制层组件EmployeeController</p><p>@Controller</p><p>public class EmployeeController {</p><p>@Autowired</p><p>private EmployeeService employeeService;</p><p>@RequestMapping(value &#x3D; “&#x2F;employee&#x2F;page&#x2F;{pageNum}”, method &#x3D;</p><p>RequestMethod.GET)</p><p>public String getEmployeeList(Model model, @PathVariable(“pageNum”) Integer</p><p>pageNum){</p><p>PageInfo<Employee> page &#x3D; employeeService.getEmployeeList(pageNum);</p><p>model.addAttribute(“page”, page);</p><p>return “employee_list”;</p><p>}</p><p>}</p><p>创建接口EmployeeService</p><p>public interface EmployeeService {</p><p>PageInfo<Employee> getEmployeeList(Integer pageNum);</p><p>}</p><p>创建实现类EmployeeServiceImpl</p><p>@Service</p><p>public class EmployeeServiceImpl implements EmployeeService {</p><p>@Autowired</p><p>private EmployeeMapper employeeMapper;</p><p>@Override</p><p>public PageInfo<Employee> getEmployeeList(Integer pageNum) {</p><p>PageHelper.startPage(pageNum, 4);</p><p>List<Employee> list &#x3D; employeeMapper.getEmployeeList();</p><p>PageInfo<Employee> page &#x3D; new PageInfo&lt;&gt;(list, 5);</p><p>return page;</p><p>}</p><p>}</p><h4 id="②创建页面-1"><a href="#②创建页面-1" class="headerlink" title="②创建页面"></a><strong>②创建页面</strong></h4><!DOCTYPE html><html lang="en" xmlns:th="http://www.thymeleaf.org"><head><meta charset="UTF-8"><title>Employee Info</title><link rel="stylesheet" th:href="@{/static/css/index\_work.css}"></head><body><table><tr><th colspan="6">Employee Info</th></tr><tr><th>emp\_id</th><th>emp\_name</th><th>age</th><th>sex</th><th>email</th><th>options</th></tr><tr th:each="employee : ${page.list}"><td th:text="${employee.empId}"></td><td th:text="${employee.empName}"></td><td th:text="${employee.age}"></td><td th:text="${employee.sex}"></td><td th:text="${employee.email}"></td><td><p><a href="">delete</a></p><p><a href="">update</a></p><p><code> </code></td></p></tr> <tr><td colspan="6"><span th:if="${page.hasPreviousPage}"><p><a th:href="@{/employee/page/1}">首页</a></p><p><a th:href="@{'/employee/page/'+${page.prePage}}">上一页</a></p></span><span th:each="num : ${page.navigatepageNums}"><p>&lt;a th:if&#x3D;”${page.pageNum&#x3D;&#x3D;num}”</p><p>th:href&#x3D;”@{‘&#x2F;employee&#x2F;page&#x2F;‘+${num}}” th:text&#x3D;”‘[‘+${num}+’]’” style&#x3D;”color:</p><p>red;”&gt;</a></p><p>&lt;a th:if&#x3D;”${page.pageNum!&#x3D;num}”</p><p>th:href&#x3D;”@{‘&#x2F;employee&#x2F;page&#x2F;‘+${num}}” th:text&#x3D;”${num} “&gt;</a></p></span><span th:if="${page.hasNextPage}"><p><a th:href="@{'/employee/page/'+${page.nextPage}}">下一页</a></p><p><a th:href="@{'/employee/page/'+${page.pages}}">末页</a></p></span></td></tr></table></body></html><h4 id="③访问测试分页功能"><a href="#③访问测试分页功能" class="headerlink" title="③访问测试分页功能"></a><strong>③访问测试分页功能</strong></h4><p>localhost:8080&#x2F;employee&#x2F;page&#x2F;1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring5框架</title>
      <link href="/posts/Spring5%E6%A1%86%E6%9E%B6.html"/>
      <url>/posts/Spring5%E6%A1%86%E6%9E%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-5-框架"><a href="#Spring-5-框架" class="headerlink" title="Spring 5 框架"></a>Spring 5 框架</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>1、Spring 是一个轻量级的开源的 JavaEE 框架</p><p>2、Spring 可以解决企业应用开发的复杂性</p><p>3、Spring 有两个核心部分：IOC 和 Aop</p><p>（1）IOC : 控制反转，Spring 帮助我们进行创建对象和实例化 </p><p>（2）Aop：面向切面，扩展功能，不修改源代码</p><p>4、Spring 特点</p><p>（1）方便解耦，简化开发</p><p>（2）Aop编程支持</p><p>（3）方便测试</p><p>（4）可以方便和其他框架进行整合</p><p>（5）方便进行事务操作</p><h2 id="2-入门案例"><a href="#2-入门案例" class="headerlink" title="2. 入门案例"></a>2. 入门案例</h2><h3 id="2-1-下载-Spring-5-0-jar包"><a href="#2-1-下载-Spring-5-0-jar包" class="headerlink" title="2.1 下载 Spring 5.0 jar包"></a>2.1 下载 Spring 5.0 jar包</h3><p><strong>1、进入官网</strong></p><p>spring.io</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220518191620568.png" alt="image-20220518191620568"></p><p>Projects  —   Spring Framework</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220518191942602.png" alt="image-20220518191942602"></p><p>下载 点击 GitHub 图标</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220518192110635.png" alt="image-20220518192110635"></p><p>打不开</p><p>这里提供一个链接</p><p><a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">https://repo.spring.io/ui/native/release/org/springframework/spring/</a></p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220518193136492.png" alt="image-20220518193136492"></p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220519154815810.png" alt="image-20220519154815810"></p><h3 id="2-2-创建一个普通-java-工程"><a href="#2-2-创建一个普通-java-工程" class="headerlink" title="2.2. 创建一个普通 java 工程"></a><strong>2.2. 创建一个普通 java 工程</strong></h3><p>导入 jar 包</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220519155604581.png" alt="image-20220519155604581"></p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220519160551519.png" alt="image-20220519160551519"></p><p>这四个是 Spring 中最基本的，先导入这四个</p><h3 id="2-3-创建普通类，在这个类创建普通方法"><a href="#2-3-创建普通类，在这个类创建普通方法" class="headerlink" title="2.3. 创建普通类，在这个类创建普通方法"></a>2.3. 创建普通类，在这个类创建普通方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-创建-Spring-配置文件，在配置文件配置创建的对象"><a href="#2-4-创建-Spring-配置文件，在配置文件配置创建的对象" class="headerlink" title="2.4. 创建 Spring 配置文件，在配置文件配置创建的对象"></a>2.4. 创建 Spring 配置文件，在配置文件配置创建的对象</h3><p>Spring 配置文件使用 xml 格式</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220519162544499.png" alt="image-20220519162544499"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置User对象创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5. 测试"></a>2.5. 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring5</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1、加载 spring 配置文件，ClassPath 类路径 在 src 下</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//要写文件全路径 FileSystemXmlApplicationContext</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、获取配置创建的对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Spring5%E6%A1%86%E6%9E%B6.assets/image-20220520140945169.png" alt="image-20220520140945169"></p><h2 id="3-IOC-容器"><a href="#3-IOC-容器" class="headerlink" title="3. IOC 容器"></a>3. IOC 容器</h2><h3 id="3-1-IOC（概念和原理）"><a href="#3-1-IOC（概念和原理）" class="headerlink" title="3.1. IOC（概念和原理）"></a>3.1. IOC（概念和原理）</h3><p>1、什么是 IOC</p><p>（1）控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理</p><p>（2）使用 IOC 目的：为了耦合度降低</p><p>2、IOC 底层原理</p><p>（1）xml 解析、工厂模式、反射</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220520145944830.png" alt="image-20220520145944830"></p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220520150002221.png" alt="image-20220520150002221"></p><h3 id="3-2-IOC（BeanFactory-接口）"><a href="#3-2-IOC（BeanFactory-接口）" class="headerlink" title="3.2. IOC（BeanFactory 接口）"></a>3.2. IOC（BeanFactory 接口）</h3><p>1、IOC 思想基于 IOC 容器完成，IOC 容器底层就是对象工厂</p><p>2、Spring 提供 IOC 容器实现两种方式：（两个接口）</p><p>（1）BeanFactory：IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象</p><p>在第二步才创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、加载 spring 配置文件，ClassPath 类路径 在 src 下</span></span><br><span class="line"><span class="type">BeanFactory</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"><span class="comment">//要写文件全路径 FileSystemXmlApplicationContext</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取配置创建的对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br></pre></td></tr></table></figure><p>（2）ApplicationContext：BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人员进行使用加载配置文件时候就会把在配置文件对象进行创建</p><p>在第一步就创建了对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、加载 spring 配置文件，ClassPath 类路径 在 src 下</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"><span class="comment">//要写文件全路径 FileSystemXmlApplicationContext</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取配置创建的对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br></pre></td></tr></table></figure><p>​在开发中常常要用 Tomcat ，使用 ApplicationContext 更优，因为我们希望在 tomcat 启动过程中就把对象创建了，而不是要用的时候才创建对象。</p><p>3、ApplicationContext 接口有实现类</p><p><img src="/Spring5%E6%A1%86%E6%9E%B6.assets/image-20220520150302015.png" alt="image-20220520150302015"></p><h3 id="3-3-IOC-操作-Bean-管理（基于-xml-方式）"><a href="#3-3-IOC-操作-Bean-管理（基于-xml-方式）" class="headerlink" title="3.3. IOC 操作 Bean 管理（基于 xml 方式）"></a>3.3. IOC 操作 Bean 管理（基于 <strong>xml</strong> <strong>方式）</strong></h3><h4 id="1、基于-xml-方式创建对象"><a href="#1、基于-xml-方式创建对象" class="headerlink" title="1、基于 xml 方式创建对象"></a>1、基于 xml 方式创建对象</h4><p>（1）在 spring 配置文件中，使用 bean 标签，标签里面添加对应属性，就可以实现对象创建</p><p>（2）在 bean 标签有很多属性，介绍常用的属性</p><p>id 属性：唯一标识</p><p>class 属性：类全路径（包类路径）</p><p>name 属性：和 id 属性类似，不常用，区别：name 里面可以加一些特殊符号</p><p>（3）创建对象时候，默认也是执行无参数构造方法完成对象创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置User对象创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、基于-xml-方式注入属性"><a href="#2、基于-xml-方式注入属性" class="headerlink" title="2、基于 xml 方式注入属性"></a>2、基于 xml 方式注入属性</h4><p><strong>注入属性的前提是对象创建好了</strong></p><p>（1）DI：依赖注入，就是注入属性</p><p>（2）第一种注入方式：使用 set 方法进行注入</p><p>方式一：创建类，定义属性和对应的 set 方法</p><p>方式二：在 spring 配置文件配置对象创建，配置属性注入</p><p><strong>配置前， set 方法，要提前写好</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注入属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用property完成属性的注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;易筋经&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bAuthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pony&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBook</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line">    System.out.println(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220520160333931.png" alt="image-20220520160333931"></p><p>（3）第二种注入方式：使用有参数构造进行注入</p><p>方式一：创建类，定义属性，创建属性对应有参数构造方法</p><p>方式二：在 spring 配置文件中进行配置</p><p><strong>默认是用无参构造器</strong>，要想使用有参构造器，要在 bean 中加一些配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--有参构造注入属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;order&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.spring5.Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电脑&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    通过 index 索引值进行 0 第一个值 1 第二个值    </span></span><br><span class="line"><span class="comment">        &lt;constructor-arg index=&quot;0&quot; value=&quot;电脑&quot;&gt;&lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOrder</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;order&quot;</span>, Order.class);</span><br><span class="line">    System.out.println(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220520162137058.png" alt="image-20220520162137058"></p><h4 id="3、p-名称空间的注入"><a href="#3、p-名称空间的注入" class="headerlink" title="3、p 名称空间的注入"></a>3、p 名称空间的注入</h4><p><strong>（对 xml 配置的简化）</strong>（了解即可）</p><p>添加 p 名称空间在配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       &lt;!<span class="attr">--添加</span> <span class="attr">p</span> <span class="attr">空间--</span>&gt;</span></span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.spring5.Book&quot;</span> <span class="attr">p:bName</span>=<span class="string">&quot;九阳神功&quot;</span> <span class="attr">p:bAuthor</span>=<span class="string">&quot;无名氏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4、xml-注入其他类型的属性"><a href="#4、xml-注入其他类型的属性" class="headerlink" title="4、xml 注入其他类型的属性"></a>4、xml 注入其他类型的属性</h4><p>字面量 即显示初始化</p><p>（1）null 值</p><p>使用 null 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注入属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用property完成属性的注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;易筋经&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bAuthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pony&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--设置空值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bAddress&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）属性值包含特殊符号 ( CD+回车 )</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注入特殊符号--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1、转义</span></span><br><span class="line"><span class="comment">&amp;lt; = &#x27;&lt;&#x27; &amp;gt; = &#x27;&gt;&#x27; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2、把特殊符号写到 CDATA结构中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bAddress&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5、注入属性-（外部bean）"><a href="#5、注入属性-（外部bean）" class="headerlink" title="5、注入属性 （外部bean）"></a>5、注入属性 （外部bean）</h4><p>（1）创建两个类 servlet 类 和 bean 类</p><p>UserServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzuli.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zzuli.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.zzuli.dao.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> pony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-05-28 8:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一 set 方式注入：创建UserDao类型属性，生成对应的 set 方法</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet : add&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzuli.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> pony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-05-28 8:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzuli.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> pony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-05-28 8:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao : update&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）在 xml 配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1、servlet 和 dao 对象的创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServlet&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.servlet.UserServlet&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入 userDao 对象</span></span><br><span class="line"><span class="comment">            name 属性名：类里面的属性名称</span></span><br><span class="line"><span class="comment">            ref 属性：创建 userBean 对象 bean 标签的 id 值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzuli.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zzuli.servlet.UserServlet;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> pony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-05-28 9:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">userTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;userBean.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserServlet</span> <span class="variable">userServlet</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userServlet&quot;</span>, UserServlet.class);</span><br><span class="line">        userServlet.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220528093118916.png" alt="image-20220528093118916"></p><h4 id="6、注入属性-（内部bean）"><a href="#6、注入属性-（内部bean）" class="headerlink" title="6、注入属性 （内部bean）"></a>6、注入属性 （内部bean）</h4><p>（1）一对多关系：部门和员工</p><p>（2）在实体类中表示一对多的关系</p><p>Dept</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzuli.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 部门类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> pony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-05-28 9:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setdName</span><span class="params">(String dName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dName = dName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dept&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;dName=&#x27;&quot;</span> + dName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Emp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzuli.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> pony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-05-28 9:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String eName;</span><br><span class="line">    <span class="keyword">private</span> String realEName;</span><br><span class="line">    <span class="comment">//员工属于某一个部门，使用对象的形式进行表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seteName</span><span class="params">(String eName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eName = eName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRealEName</span><span class="params">(String realEName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.realEName = realEName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;eName=&#x27;&quot;</span> + eName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, realEName=&#x27;&quot;</span> + realEName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, dept=&quot;</span> + dept +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>deptBean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--内部bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;eName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pony&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realEName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;马炳政&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--设置对象类型的属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保安部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dept</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;deptBean.xml&quot;</span>);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;emp&quot;</span>, Emp.class);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220528100621013.png" alt="image-20220528100621013"></p><h4 id="7、注入属性（级联赋值）"><a href="#7、注入属性（级联赋值）" class="headerlink" title="7、注入属性（级联赋值）"></a>7、注入属性（级联赋值）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;eName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pony&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realEName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;马炳政&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一：设置对象类型的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式二：需要dept属性的 get 方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保安部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8、注入集合属性"><a href="#8、注入集合属性" class="headerlink" title="8、注入集合属性"></a>8、注入集合属性</h4><p>注入数组类型的属性</p><p>注入List类型的属性</p><p>注入Map类型的属性</p><p>注入set类型的属性</p><p>(1) 编写 stu 类和对应属性的 set 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzuli.collectiontype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> pony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-04 16:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCourses</span><span class="params">(String[] courses)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSet</span><span class="params">(Set&lt;String&gt; set)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(courses));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(maps);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）xml 进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        数组类型注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        list类型注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        map类型注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PHP&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;JAVA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        set类型注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MYSQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCollection</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    <span class="type">Stu</span> <span class="variable">stu</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;stu&quot;</span>, Stu.class);</span><br><span class="line">    stu.test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220804163911026.png" alt="image-20220804163911026"></p><p>特殊情况：</p><p>（1）集合里面设置对象类型的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        注入list集合类型，值是对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring5课程&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mysql课程&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）把集合注入部分提取处理，作为公共部分</p><ul><li>在 spring 配置文件中引入名称空间 util</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       &lt;!<span class="attr">--引入</span> <span class="attr">util</span> <span class="attr">空间--</span>&gt;</span></span><br><span class="line">       xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">&lt;!-复制上面的地址，并将 beans 换成 util--&gt;</span><br><span class="line">                           http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--提取list集合类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>易筋经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阴真经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阳神功<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.collectiontype.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9、工厂bean——FactoryBean"><a href="#9、工厂bean——FactoryBean" class="headerlink" title="9、工厂bean——FactoryBean"></a>9、工厂bean——FactoryBean</h4><p>（1）Spring有两种类型的bean，一种是普通bean，另一种是工厂bean（FactoryBean）</p><p>（2）区别：</p><p>普通 bean：在配置文件中 class ，你定义的什么类型返回的就是什么类型</p><p>工厂 bean：在配置文件中 class ，你定义的什么类型返回的可以不是你定义的类型</p><p>（3）工厂 bean举例</p><ul><li><p>创建一个类让这个类作为工厂 bean，实现接口 FactoryBean</p></li><li><p>实现接口里面的方法，在实现的方法中定义返回的 bean 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Course&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义返回 bean 的类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Course <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">        course.setCname(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FactoryBean.<span class="built_in">super</span>.isSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.factorybean.MyBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">textCollection3</span><span class="params">()</span>&#123;</span><br><span class="line">    ApplicationContext context= <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line">    <span class="type">MyBean</span> <span class="variable">myBean</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;myBean&quot;</span>, MyBean.class);</span><br><span class="line">    System.out.println(myBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220804173838717.png" alt="image-20220804173838717"></p><p>报错因为返回值类型在 mybean 中的 getObject() 方法中已经定义了是 Coures 类型，所以这里应该返回的是 Course</p><p>重新测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">textCollection3</span><span class="params">()</span>&#123;</span><br><span class="line">    ApplicationContext context= <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line">    <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;myBean&quot;</span>, Course.class);</span><br><span class="line">    System.out.println(course);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、bean的作用域"><a href="#10、bean的作用域" class="headerlink" title="10、bean的作用域"></a>10、bean的作用域</h4><ul><li><p>在 spring 中，可以设置创建的 bean 实例是一个单实例还是多实例</p></li><li><p>在 spring 中，<strong>默认 bean 实例是一个单实例对象</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">textCollection2</span><span class="params">()</span>&#123;</span><br><span class="line">   ApplicationContext context= <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book1</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line">    System.out.println(book1);</span><br><span class="line">    System.out.println(book2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220804175609868.png" alt="image-20220804175609868"></p><p>地址一样，默认情况是单实例对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 spring 配置文件 bean 标签里有属性（scope）用于设置单实例还是多实例</p><p>scope 属性值</p><ul><li><p>默认值，singleton，表示单实例对象</p></li><li><p>prototype，表示多实例</p></li></ul><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220804180346117.png" alt="image-20220804180346117"></p><p>区别：</p><ul><li><p>singleton，表示单实例对象；prototype，表示多实例</p></li><li><p>设置 scope 的值为 singleton 时，加载 spring配置文件的时候，就会创建一个单实例对象</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220804180849417.png" alt="image-20220804180849417"></p></li><li><p>设置 scope 的值为 prototype 时，在调用 getbean 方法的时候去创建一个多实例对象</p></li></ul><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220804180902787.png" alt="image-20220804180902787"></p><p>scope 的其他属性值（不常用，了解即可）</p><p>request：一次请求</p><p>session：一次会话</p><h4 id="11、bean-的生命周期"><a href="#11、bean-的生命周期" class="headerlink" title="11、bean 的生命周期"></a>11、bean 的生命周期</h4><p>1、生命周期</p><p>（1）从对象创建到对象的销毁的过程</p><p>2、bean 的生命周期</p><p>（1）通过构造器创建 bean 实例</p><p>（2）为 bean 中的属性设置值和对其他 bean 的引用（调用 set 方法）</p><p>（3）调用 bean 的初始化方法（需要进行相应的配置）</p><p>（4）bean 可以使用了（对象可以取到了）</p><p>（5）当容器关闭的时候，调用 bean 的销毁方法（需要进行配置）</p><p>3、演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzuli.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> pony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-04 18:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOname</span><span class="params">(String oname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.oname = oname;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期2：为 bean 中的属性设置值和对其他 bean 的引用（调用 set 方法）&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期1：执行无参构造创建 bean 实例。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建执行的初始化的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期3：执行初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建执行销毁方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期5：执行销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  nit-method：设置初始化方法 destroy-method：先手动销毁，才能调用这个方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.bean.Orders&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">textBean3</span><span class="params">()</span>&#123;</span><br><span class="line">    ApplicationContext context= <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean4.xml&quot;</span>);</span><br><span class="line">    <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;生命周期4：bean 可以使用了（对象可以取到了）&quot;</span>);</span><br><span class="line">    System.out.println(orders);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动让 bean 实例销毁，这里进行了强转，因为 ApplicationContext 中是没有close()方法的，他的子接口ClassPathXmlApplicationContext中才有</span></span><br><span class="line">    ((ClassPathXmlApplicationContext) context).close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220804184228411.png" alt="image-20220804184228411"></p><p>4、bean 后置处理器</p><p>在以上五步中，还有有两步，在初始化之前和初始化之后</p><p>（1）通过构造器创建 bean 实例</p><p>（2）为 bean 中的属性设置值和对其他 bean 的引用（调用 set 方法）</p><p>把 bean 实例传递给 bean 后置处理器的 postProcessBeforeInitialization 方法</p><p>（3）调用 bean 的初始化方法（需要进行相应的配置）</p><p>把 bean 实例传递给 bean 后置处理器的 postProcessAfterInitialization 方法</p><p>（4）bean 可以使用了（对象可以取到了）</p><p>（5）当容器关闭的时候，调用 bean 的销毁方法（需要进行配置）</p><p>5、演示</p><p>（1）创建一个类，实现接口 BeanPostProcessor，并重写接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzuli.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> pony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-04 18:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPost</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之前执行的的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之后执行的的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  nit-method：设置初始化方法 destroy-method：先手动销毁，才能调用这个方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.bean.Orders&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置后置处理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.bean.MyBeanPost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="12、xml-自动装配"><a href="#12、xml-自动装配" class="headerlink" title="12、xml 自动装配"></a>12、xml 自动装配</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.bean.Orders&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>手动装配：像我们之前那样，通过 property value 注入属性值，就是手动装配</p><p>自动装配：根据指定装配规则（属性名称、属性类型），Spring 自动将匹配的属性值进行注入</p><ul><li><p>根据属性名称进行装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Dept dept;</span><br></pre></td></tr></table></figure><p>即 dept</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  实现自动装配</span></span><br><span class="line"><span class="comment">    autowire，配置自动装配</span></span><br><span class="line"><span class="comment">    autowire，有两个常用的属性值</span></span><br><span class="line"><span class="comment">        byName，根据名称进行注入，要注入的值 bean 的id值和类属性的名称要一样</span></span><br><span class="line"><span class="comment">        byType，根据属性类型进行注入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>根据属性类型进行装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Dept dept;</span><br></pre></td></tr></table></figure></li></ul><p>​       即 Dept，来找到 xml 的对象（class&#x3D;””）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  实现自动装配</span></span><br><span class="line"><span class="comment">    autowire，配置自动装配</span></span><br><span class="line"><span class="comment">    autowire，有两个常用的属性值</span></span><br><span class="line"><span class="comment">        byName，根据名称进行注入，要注入的值 bean 的id值和类属性的名称要一样</span></span><br><span class="line"><span class="comment">        byType，根据属性类型进行注入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：这种情况只能用 byName，因为根据类型，有两个，不知道用哪一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zzuli.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="13、引入外部属性文件"><a href="#13、引入外部属性文件" class="headerlink" title="13、引入外部属性文件"></a>13、引入外部属性文件</h4><p>1、直接配置数据库信息</p><p>（1）配置德鲁伊的连接池</p><p>（2）引入德鲁伊连接池jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置德鲁伊数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/bookdb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、引入外部属性文件配置数据库连接池</p><p>（1）创建 properties 文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>（2）将 properties 文件引入到 spring 配置文件中</p><ul><li><p>引入 context 名称空间</p></li><li><p>在 Spring 配置文件中使用标签引入外部属性文件</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druid.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClassName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-IOC-操作-Bean-管理（基于-注解-方式）"><a href="#3-4-IOC-操作-Bean-管理（基于-注解-方式）" class="headerlink" title="3.4. IOC 操作 Bean 管理（基于 注解 方式）"></a>3.4. IOC 操作 Bean 管理（基于 <strong>注解</strong> <strong>方式）</strong></h3><h4 id="1、注解"><a href="#1、注解" class="headerlink" title="1、注解"></a>1、注解</h4><p>（1）注解：注解是代码中一些特殊标记，格式：@注解名称（属性名称&#x3D;属性值，属性名称&#x3D;属性值…）</p><p>（2）使用注解：注解可以作用在类上面，方法上面，属性上面</p><p>（3）注解目的：简化 xml 配置</p><h4 id="2、创建对象"><a href="#2、创建对象" class="headerlink" title="2、创建对象"></a>2、创建对象</h4><p>（1）@Component：Spring 提供的普通组件，一般都可以用它创建对象</p><p>（2）@Service：一般用在业务逻辑层 Service 层上</p><p>（3）@Controller：一般用在web层上</p><p>（4）@Repository：一般用在dao层上</p><p>当然混用也是没事的，但开发为了规范，这四个注解的功能是一样的</p><h4 id="3、演示"><a href="#3、演示" class="headerlink" title="3、演示"></a>3、演示</h4><p>（1）引入 aop 的依赖</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220804210954116.png" alt="image-20220804210954116"></p><p>（2）开启组件扫描：看那个包中那个类有注解</p><p>引用 context 名词空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启组件扫描--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描多个包</span></span><br><span class="line"><span class="comment">     1、可以用 , 分隔 base-package=&quot;com.zzuli.spring5.testdemo, com.zzuli.spring5.dao&quot;</span></span><br><span class="line"><span class="comment">     2、写它的上层目录 base-package=&quot;com.zzuli.spring5&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zzuli.spring5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//value 值可以不写，默认值为类名的首字母小写（UserService即userService）</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span> <span class="comment">//等价于&lt;bean id=&quot;userService&quot; class=&quot;&quot;&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220804213336398.png" alt="image-20220804213336398"></p><h4 id="4、开启组件扫描的配置"><a href="#4、开启组件扫描的配置" class="headerlink" title="4、开启组件扫描的配置"></a>4、开启组件扫描的配置</h4><p>我们可以配置，它扫描包中的哪些，或者不扫描包中的哪些</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 例：</span></span><br><span class="line"><span class="comment">    use-default-filters=&quot;false&quot; 表示不使用默认的filters，使用自己配置的filters</span></span><br><span class="line"><span class="comment">    context:include-filter，扫描哪些内容 type=&quot;annotation&quot; 根据注解进行扫描</span></span><br><span class="line"><span class="comment">    context:exclude-filter, 不去扫描哪些内容</span></span><br><span class="line"><span class="comment">    只扫描com.zzuli.spring5 带Component注解</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zzuli.spring5&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Component&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zzuli.spring5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Component&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5、属性注入"><a href="#5、属性注入" class="headerlink" title="5、属性注入"></a>5、属性注入</h4><p>（1）@AutoWired，根据属性类型自动注入</p><p>（2）@Qualifier，根据属性名称自动注入，要和 @AutoWired 一起进行使用</p><p>（3）@Resource，可以根据属性类型，也可以根据属性名称进行自动注入</p><p>（4）@Value，注入普通类型属性</p><ul><li>@AutoWired，根据属性类型自动注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(value = &quot;userService&quot;)</span> <span class="comment">//等价于&lt;bean id=&quot;userService&quot; class=&quot;&quot;&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//不需要在添加 set 方法了，注解也实现了</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add......&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Qualifier，根据属性名称自动注入，要和 @AutoWired 一起进行使用</li></ul><p>一个接口可以有多个实现类，这时就不能根据属性类型进行自动注入，要根据名称自动注入</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220804221510165.png" alt="image-20220804221510165"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//value 值可以不写，默认值为类名的首字母小写（UserService即userService）</span></span><br><span class="line"><span class="meta">@Service(value = &quot;userService&quot;)</span> <span class="comment">//等价于&lt;bean id=&quot;userService&quot; class=&quot;&quot;&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//不需要在添加 set 方法了，注解也实现了</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;userDaoImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add......&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> @Qualifier(value &#x3D; “userDaoImpl”) 里的 value 即 UserDaoImpl 的注解 @Repository() 的 value 值</p><ul><li>@Resource，可以根据属性类型，也可以根据属性名称进行自动注入</li></ul><p>@Resource，根据类型注入</p><p>@Resource（name&#x3D;””）, 根据名称注入</p><p>但是它不是 Spring 中的，他是 Java 扩展包中的，官方更建议我们使用 @AutoWired，@Qualifier。</p><ul><li>@Value，注入普通类型属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;abc&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p>把 abc 注入到 name 中</p><h4 id="6、完全注解开发（不在使用配置文件）"><a href="#6、完全注解开发（不在使用配置文件）" class="headerlink" title="6、完全注解开发（不在使用配置文件）"></a>6、完全注解开发（不在使用配置文件）</h4><p>（1）创建配置类，替换 xml 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//声明配置类，替换 xml 文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.zzuli&quot;&#125;)</span> <span class="comment">//等同于 &lt;context:component-scan base-package=&quot;com.zzuli.spring5&quot;&gt;&lt;/context:component-scan&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//加载配置类的方式</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Annotation     注解</p><p>Config             配置</p><p>Application    应用</p><p>Context          上下文</p><h2 id="4-AOP"><a href="#4-AOP" class="headerlink" title="4. AOP"></a>4. AOP</h2><h3 id="4-1-什么是-AOP"><a href="#4-1-什么是-AOP" class="headerlink" title="4.1. 什么是 AOP"></a>4.1. 什么是 AOP</h3><p>（1）面向切面编程（面向方面编程）：利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p><p>（2）通俗来说，不通过修改源代码方式，在主干功能里面添加新的功能</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805100956100.png" alt="image-20220805100956100"></p><h3 id="4-2-AOP的底层原理"><a href="#4-2-AOP的底层原理" class="headerlink" title="4.2. AOP的底层原理"></a>4.2. AOP的底层原理</h3><h4 id="1、AOP-使用动态代理实现"><a href="#1、AOP-使用动态代理实现" class="headerlink" title="1、AOP 使用动态代理实现"></a>1、AOP 使用动态代理实现</h4><p>（1）有两种情况的动态代理</p><ul><li>有接口的情况 使用 <strong>JDK</strong> 动态代理</li></ul><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805101915698.png" alt="image-20220805101915698"></p><ul><li>没有接口的情况 使用 <strong>CGLIB</strong> 动态代理</li></ul><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805102236244.png" alt="image-20220805102236244"></p><h4 id="2、动态代理代码实现"><a href="#2、动态代理代码实现" class="headerlink" title="2、动态代理代码实现"></a>2、动态代理代码实现</h4><p>Spring5 里代码已经帮我们实现了，我们要做一些配置就好</p><p>1、JDK 动态代理 使用 <strong>Proxy</strong> 类里面的方法创建代理对象</p><p>java.lang.Object</p><p>​java.lang.reflect.Proxy</p><p><strong>（1）调用 newProxyInstance（）方法</strong></p><p>static Object  newProxyInstance(ClassLoader loader，类&lt;?&gt;[] interfaces，InvocationHandler h)</p><p>返回指定接口的代理类的实例，该接口将方法调用分派给指定的调用处理程序</p><p><strong>（2）方法参数参数：</strong></p><p>ClassLoader loader     当前类加载器</p><p>类&lt;?&gt;[] interfaces        增强方法所在的类，这个类实现的接口，支持多个接口</p><p>InvocationHandler h   实现这个接口 InvocationHandler ，创建代理对象，写增强的方法。</p><p>2、代码实现</p><p>（1）创建接口，定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建接口实现类，实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）使用 Proxy 类创建接口代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建接口实现类的代理对象</span></span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line"><span class="comment">//        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span></span><br><span class="line"><span class="comment">//                return null;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> <span class="title class_">UserDaoProxy</span>(userDao));</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> dao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result: &quot;</span> + add);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    <span class="comment">//1、把创建的是谁的代理对象，把谁传递过来</span></span><br><span class="line">    <span class="comment">//使用有参构造</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"><span class="comment">//    public UserDaoProxy(UserDaoProxy userDaoProxy)&#123;</span></span><br><span class="line"><span class="comment">//        this.obj = obj;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoProxy</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增强逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前执行&quot;</span> + method.getName() + <span class="string">&quot;:传递参数...&quot;</span> + Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被增强的方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后执行&quot;</span> + obj);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AOP-操作的术语"><a href="#3、AOP-操作的术语" class="headerlink" title="3、AOP 操作的术语"></a>3、AOP 操作的术语</h4><p>（1）连接点</p><p>​在类里哪些可以被增强的方法即连接点，如图中的（add（）、update（）、select（）、delete（））</p><p>（2）切入点</p><p>​实际被真正被增强的方法即切入点，（如只增强了add（）、update（），那这两个方法就是切入点）</p><p>（3）增强（通知）</p><p>​实际增强的逻辑部分即通知（增强），（add（），中新添加的一些逻辑功能）</p><pre><code>      增强的类型：</code></pre><p>​前置通知，被增强的方法之前执行</p><p>​后置通知，被增强的方法之后执行                              有异常也执行</p><p>​环绕通知，被增强的方法之前后都执行</p><p>​异常通知，被增强的方法出现异常被执行</p><p>​最终通知，被增强的方法之后执行返回值之后执行   有异常不执行</p><p>（4）切面</p><p>​是一个动作，把通知应用到切入点的过程</p><p>​</p><h4 id="4、AOP的准备工作"><a href="#4、AOP的准备工作" class="headerlink" title="4、AOP的准备工作"></a>4、AOP的准备工作</h4><p>（1）Spring 框架中一般基于<strong>AspectJ</strong> 实现 AOP 操作</p><p>（2）AspectJ 不是 Spring 的组成部分，是一个独立的 AOP 框架，一般将两个框架一起使用，进行 AOP 的相关操作。</p><p>（3）基于 AspectJ 实现 AOP 操作</p><ul><li>基于 XML 方式进行实现</li><li>基于 注解 方式进行实现</li></ul><p>（4）引入 AOP 相关依赖</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805114313768.png" alt="image-20220805114313768"></p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805114603711.png" alt="image-20220805114603711"></p><p>（5）切入点表达式</p><p>​切入点表达式的作用，知道对哪个类里面的哪个方法进行增强</p><p>​语法结构</p><p>​<strong>execution ([权限修饰符] [返回类型] [类的全路径] [方法名称] （参数列表）)</strong></p><p>​例1：对com.zzuil.dao.BookDao 类里面的 add 方法进行增强</p><p>​execution (* com.zzuil.dao.BookDao.add(..))</p><p>​        “*” 即所有的权限修饰符</p><p>​        返回类型 可以不写</p><p>​        com.zzuil.dao.BookDao 全类名</p><p>​        “..” 参数列表</p><p>​       例2：对com.zzuil.dao.BookDao 类里面的 <strong>所有的方法</strong> 进行增强</p><p>​execution (* com.zzuil.dao.BookDao.*(..))</p><p>​   例3：对com.zzuil.dao 类里面的 <strong>所有类 既 所有的方法</strong> 进行增强</p><p>​execution (* com.zzuil.dao. *. * (..))</p><h4 id="5、AOP操作（基于-注解-方式）"><a href="#5、AOP操作（基于-注解-方式）" class="headerlink" title="5、AOP操作（基于 注解 方式）"></a>5、AOP操作（基于 注解 方式）</h4><p>（1）创建一个类，在类里定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建增强类（编写增强逻辑）</p><p>1、在增强类里面，创建放啊发，让不同方法代表不同的通知类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;befoer...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、进行通知配置</p><ul><li><p>在 Spring 配置文件中，开启注解扫描</p></li><li><p>使用注解创建 User 和 UserProxy 对象</p></li><li><p>在增强的类上面添加注解 @Aspect</p></li><li><p>在 Spring 配置文件中，开启生成代理对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zzuli.spring5.aopanno&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启Aspect生成代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>​       也可使用全注解实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.zzuli.spring5.aopanno&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;befoer...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置不同类型的通知，在增强类的里面通知方法添加通知类型注解，使用切入点表达式配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.zzuli.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;befoer...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805122817453.png" alt="image-20220805122817453"></p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805124941347.png" alt="image-20220805124941347"></p><table><thead><tr><th align="center">通知类型</th><th align="center">注解</th><th align="center">有异常</th></tr></thead><tbody><tr><td align="center">前置通知，被增强的方法之前执行</td><td align="center">@Before</td><td align="center">执行</td></tr><tr><td align="center">后置通知，被增强的方法之后执行</td><td align="center">@After</td><td align="center">执行</td></tr><tr><td align="center">环绕通知，被增强的方法之前后都执行</td><td align="center">@Around</td><td align="center">执行</td></tr><tr><td align="center">异常通知，被增强的方法出现异常被执行</td><td align="center">@AfterThrowing</td><td align="center">执行</td></tr><tr><td align="center">最终通知，被增强的方法之后执行返回值之后执行</td><td align="center">@AfterReturning</td><td align="center"></td></tr></tbody></table><p>（3）对相同的切入点进行抽取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提取相同的切入点</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;execution(* com.zzuli.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointdemo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前置通知</span></span><br><span class="line"><span class="meta">@Before(value = &quot;pointdemo()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;befoer...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）有多个增强类对同一个方法进行增强，可以设置优先级</p><p>在增强类上面添加一个注解 @Order（数字）， 数字越小优先级越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonProxy</span> &#123;</span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.zzuli.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;person 方法执行前...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行执行方法</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;person 方法执行后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(4)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">//提取相同的切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* com.zzuli.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointdemo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;befoer...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.zzuli.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行前...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行执行方法</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805125950727.png" alt="image-20220805125950727"></p><h4 id="6、AOP操作（基于-XML-方式）"><a href="#6、AOP操作（基于-XML-方式）" class="headerlink" title="6、AOP操作（基于 XML 方式）"></a>6、AOP操作（基于 XML 方式）</h4><p>1、创建两个类，增强类和被增强类，创建方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;buy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、在 Spring 配置文件中创建两个类对象</p><p>3、在 Spring 配置文件中配置切入点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   &lt;bean id=<span class="string">&quot;book&quot;</span> class=<span class="string">&quot;com.zzuli.spring5.aopxml.Book&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">   &lt;bean id=<span class="string">&quot;bookProxy&quot;</span> class=<span class="string">&quot;com.zzuli.spring5.aopxml.BookProxy&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;!--op增强--&gt;</span><br><span class="line">   &lt;aop:config&gt;</span><br><span class="line">&lt;!--切入点--&gt;</span><br><span class="line">       &lt;aop:pointcut id=<span class="string">&quot;p&quot;</span> expression=<span class="string">&quot;execution(* com.zzuli.spring5.aopanno.User.add(..))&quot;</span>&gt;&lt;/aop:pointcut&gt;</span><br><span class="line">&lt;!--配置切面--&gt;</span><br><span class="line">       &lt;aop:aspect ref=<span class="string">&quot;bookProxy&quot;</span>&gt;</span><br><span class="line">&lt;!--增强作用在具体的方法上--&gt;</span><br><span class="line">           &lt;aop:before method=<span class="string">&quot;before&quot;</span> pointcut-ref=<span class="string">&quot;p&quot;</span>&gt;&lt;/aop:before&gt;</span><br><span class="line">       &lt;/aop:aspect&gt;</span><br><span class="line">   &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h2 id="5-JdbcTemplate"><a href="#5-JdbcTemplate" class="headerlink" title="5. JdbcTemplate"></a>5. JdbcTemplate</h2><h4 id="1、什么是JdbcRemplate"><a href="#1、什么是JdbcRemplate" class="headerlink" title="1、什么是JdbcRemplate"></a>1、什么是JdbcRemplate</h4><p>（1）Spring 框架对 JDBC 进行了封装，使用 JdbcTemplate 方便实现对数据库操作</p><h4 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h4><p>（1）引入相关的 jar 包</p><p>jbdc 封装</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805150949428.png" alt="image-20220805150949428"></p><p>事务操作</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805151032997.png" alt="image-20220805151032997"></p><p>spring 整合其他框架所需要的依赖</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805151223004.png" alt="image-20220805151223004"></p><p>（2）在 spring 配置文件中配置数据库连接池</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druidDB.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClassName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）配置 JdbcTemplate 对象，注入DateSource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druidDB.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClassName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  JdbcTemplate 对象  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  注入 dataSource      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoimpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、JdbcTemplate-操作数据库"><a href="#3、JdbcTemplate-操作数据库" class="headerlink" title="3、JdbcTemplate 操作数据库"></a>3、JdbcTemplate 操作数据库</h4><h5 id="3-1、添加（修改、删除一样的）"><a href="#3-1、添加（修改、删除一样的）" class="headerlink" title="3.1、添加（修改、删除一样的）"></a>3.1、添加（修改、删除一样的）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Book book)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoimpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO book VALUES(?,?,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, book.getId(), book.getFname(), book.getPrice(), book.getFcount(), book.getRemark());</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">        bookDao.add(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805155638122.png" alt="image-20220805155638122"></p><p>两个参数</p><p>sql 语句</p><p>可变参数</p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBook</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;bookService&quot;</span>, BookService.class);</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setFcount(<span class="number">1</span>);</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setPrice(<span class="number">1</span>);</span><br><span class="line">        book.setRemark(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        book.setFname(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        bookService.addBook(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805161810659.png" alt="image-20220805161810659"></p><p>可能会出现的BUG</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805161539576.png" alt="image-20220805161539576"></p><h5 id="3-2、查询"><a href="#3-2、查询" class="headerlink" title="3.2、查询"></a>3.2、查询</h5><p>（1）查询返回某个值</p><p>​例：查询总记录数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">selectCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT count(*) from book&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）查询返回对象</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805164142186.png" alt="image-20220805164142186"></p><p>参数 rowMapper，是一个接口，返回不类型的数据，使用这个接口可以帮助我们完成数据的封装</p><p>接口实现类，固定写法：new BeanPropertyRowMapper<Book>(Book.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">selectCount</span><span class="params">(Integer fid)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * from book WHERE fid = ?&quot;</span>;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class), fid);</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）查询返回集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">selectAll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * from book&quot;</span>;</span><br><span class="line">    List&lt;Book&gt; query = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class));</span><br><span class="line">    <span class="keyword">return</span> query;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3、批量添加"><a href="#3-3、批量添加" class="headerlink" title="3.3、批量添加"></a>3.3、批量添加</h5><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805170042805.png" alt="image-20220805170042805"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchAdd</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO book VALUES(?,?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">    System.out.println(ints);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、事务"><a href="#6、事务" class="headerlink" title="6、事务"></a>6、事务</h2><h3 id="1、什么是事务"><a href="#1、什么是事务" class="headerlink" title="1、什么是事务"></a>1、什么是事务</h3><p>（1）事务是指数据库操作的最基本单元，逻辑上的一组操作。</p><p>（2）事务的特性（ACID）</p><p>原子性<br>        事务的原子性是指事务必须是一个原子的操作序列单元。事务中包含的各项操作在一次执行过程中，只允许出现两种状态之一，<strong>要么都成功，要么都失败</strong>。<br>任何一项操作都会导致整个事务的失败，同时其它已经被执行的操作都将被撤销并回滚，只有所有的操作全部成功，整个事务才算是成功完成。</p><p>一致性<br>        事务的一致性是指事务在执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处以一致性状态。<br>比如：<strong>张三给李四转钱，不可能张三被扣了钱，李四没有加钱</strong>。</p><p>隔离性<br>        事务的隔离性是指在并发环境中，并发的事务是互相隔离的，<strong>一个事务的执行不能被其它事务干扰</strong>。也就是说，不同事物并非操作相同数据时，每个事务都有完整的数据空间。<br>一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务是不能互相干扰的。</p><p>持久性<br>        事务的持久性是指<strong>事务一旦提交后，数据库中的数据必须被永久的保存下来</strong>。即使服务器系统崩溃或服务器宕机等故障。只要数据库重新启动，那么一定能够将其恢复到事务成功结束后的状态。</p><h3 id="2、搭建事务操作的基本环境"><a href="#2、搭建事务操作的基本环境" class="headerlink" title="2、搭建事务操作的基本环境"></a>2、搭建事务操作的基本环境</h3><p>1、创建数据库表，添加记录</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805174728706.png" alt="image-20220805174728706"></p><p>2、创建 service，搭建 dao，完成对象创建和注入关系</p><p>（1）service 注入 dao，在 dao 注入 JdbcTemplate</p><p>（2）service 注入 dao,  在 dao 注入 JdbcTemplate，在 JdbcTemplate 注入 DateSource</p><p>（3）在 dao 中创建两个方法：多钱和少钱的方法，在 service 中创建转账方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druidDB.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zzuli.spring5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  JdbcTemplate 对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  注入 dataSource      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转账方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//pony1 少 100</span></span><br><span class="line">        userDao.reduceMoney();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//pony2 多 100</span></span><br><span class="line">        userDao.addMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMoney</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pony1 转账100 给 pony2</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_account set money=money-? where username=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, <span class="number">100</span>, <span class="string">&quot;pony1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_account set money=money+? where username=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, <span class="number">100</span>, <span class="string">&quot;pony2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.accountMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805184129279.png" alt="image-20220805184129279"></p><p>3、以上代码正常执行是没有问题的，但是如果有异常，就会有问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转账方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//pony1 少 100</span></span><br><span class="line">    userDao.reduceMoney();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟异常</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pony2 多 100</span></span><br><span class="line">    userDao.addMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pony1 钱少了，但是 pony2 钱没加</p><h3 id="3、事务的引入"><a href="#3、事务的引入" class="headerlink" title="3、事务的引入"></a>3、事务的引入</h3><p>使用事务进行解决</p><p>（1）事务操作的基本过程</p><ul><li><p>开启事务的操作</p></li><li><p>进行业务操作</p></li><li><p>没有异常，提交事务</p></li></ul><p>​       出现异常，事务回滚</p><h3 id="4、spring-事务管理"><a href="#4、spring-事务管理" class="headerlink" title="4、spring 事务管理"></a>4、spring 事务管理</h3><h4 id="1、事务一般要添加到-Service-层"><a href="#1、事务一般要添加到-Service-层" class="headerlink" title="1、事务一般要添加到 Service 层"></a>1、事务一般要添加到 Service 层</h4><h4 id="2、在-Spring-进行事务的管理操作"><a href="#2、在-Spring-进行事务的管理操作" class="headerlink" title="2、在 Spring 进行事务的管理操作"></a>2、在 Spring 进行事务的管理操作</h4><p>（1）有两种方式：编程式事务管理和<strong>声明式事务管理</strong>（常用）</p><p>（2）即 3、 中的所说的就是编程式事务管理</p><p>编程式（不常用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转账方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1、开启事务的操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、进行业务操作</span></span><br><span class="line">        <span class="comment">//pony1 少 100</span></span><br><span class="line">        userDao.reduceMoney();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟异常</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//pony2 多 100</span></span><br><span class="line">        userDao.addMoney();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、没有异常，提交事务</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">        <span class="comment">//4、出现异常，事务回滚</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、声明式事务管理"><a href="#3、声明式事务管理" class="headerlink" title="3、声明式事务管理"></a>3、声明式事务管理</h4><p>（1）基于注解方式</p><p>1、在 spring 中配置事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、开启事务注解</p><ul><li><p>​先在 xml 引入名称空间 tx</p></li><li><p>​开启事务注解</p></li><li><p>​    在 Service 类的上面（获取 service 类里面的方法上面）添加事务注解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转账方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//pony1 少 100</span></span><br><span class="line">        userDao.reduceMoney();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟异常</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//pony2 多 100</span></span><br><span class="line">        userDao.addMoney();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果添加到类上面，就表示这个类里的所有方法都添加了事务</p><p>如果添加到方法上面，就表示这个方法添加了事务</p><p>3、事务的相关配置</p><ul><li>事务传播行为：propagation</li></ul><p>当一个事务方法被另一个事务方法调用的时候，这个事务方法如何进行</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805210908051.png" alt="image-20220805210908051"></p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805211737816.png" alt="image-20220805211737816"></p><p>​required_new 事务A 里面的方法 A 要调事务 B 里的方法 B ，可以把这两个事务理解为内外两层，且两个事务互不影响。事务 A 在外层，事务 B 在内层，如果方法 A 在调完 方法 B 后出现异常，方法 B 已经调完了，事务 B 就不会回归滚了，事务 A 会回滚。</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805211812870.png"></p><ul><li>ioslation：事务的隔离级别</li></ul><p>不考虑隔离性有三个读的问题：脏读、不可重复读、虚（幻）读。</p><p>脏读：一个未提交的事务读到另一个未提交事务的数据</p><p>不可重复读：一个未提交的事务读到另一个提交事务修改的数据</p><p>虚（幻）读：一个未提交的事务读到另一个提交事务添加的数据</p><p><img src="/../images/Spring5%E6%A1%86%E6%9E%B6/image-20220805214451834.png" alt="image-20220805214451834"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.READ_COMMITTED)</span></span><br></pre></td></tr></table></figure><p>Mysql 默认的是 可重复读</p><ul><li><p>timeout：超时时间</p><p>事务在到一定时间内就会自动提交，不提交就会回滚</p><p>超时时间：默认值为-1（不超时），设置时间以秒为单位</p></li><li><p>readOnly：是否只读</p><p>读：查询操作  写：修改删除添加操作</p><p>readOnly 默认置为 false，表示可以查询，可以添加修改删除操作</p><p>设置为 true，表示只能查询</p></li><li><p>rollbackFor：回滚</p><p>设置出现哪些异常进行回滚</p></li><li><p>noRollbackFor：不回滚</p><p>设置出现哪些异常不进行回滚</p></li></ul><p>（2）基于 xml 方式</p><ul><li><p>配置事务管理器</p></li><li><p>配置通知</p></li><li><p>配置切入点和切面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--  配置通知  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   配置事务参数     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指定在那种规则的方法上面添加事务--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;MANDATORY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--方法名以account开头的加上事务--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置切入点和切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点，哪个方法添加事务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zzuli.spring5.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>（3）完全注解开发</p><p>1、创建配置类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druidDB.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zzuli.spring5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  JdbcTemplate 对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  注入 dataSource      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.zzuli&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>  <span class="comment">//开启事务 相当于&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation-driven&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxConfig</span> &#123;</span><br><span class="line">    <span class="comment">//创建数据库连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">getDruidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建JdbcTemplate 对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="comment">//到 ioc 容器中根据类型找到dataSource</span></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        <span class="comment">//注入dataSource</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        manager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、在-Spring-进行声明式事务管理，底层使用-AOP"><a href="#4、在-Spring-进行声明式事务管理，底层使用-AOP" class="headerlink" title="4、在 Spring 进行声明式事务管理，底层使用 AOP"></a>4、在 Spring 进行声明式事务管理，底层使用 AOP</h4><h4 id="5、Spring-事务管理-API"><a href="#5、Spring-事务管理-API" class="headerlink" title="5、Spring 事务管理 API"></a>5、Spring 事务管理 API</h4><p>（1）提供一个接口，代表事务管理器，这个接口针对不同的框架，提供不同的实现类</p><p><img src="/Spring5%E6%A1%86%E6%9E%B6.assets/image-20220805204336556.png" alt="image-20220805204336556"></p><h2 id="5、新特性"><a href="#5、新特性" class="headerlink" title="5、新特性"></a>5、新特性</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
